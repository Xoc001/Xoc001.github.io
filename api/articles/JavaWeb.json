{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"JavaWeb","date":"2022-02-10T17:38:23.820Z","updated":"2021-07-30T11:26:01.248Z","comments":true,"path":"api/articles/JavaWeb.json","keywords":null,"cover":[],"content":"<h1 id=\"JavaWeb\"><a href=\"#JavaWeb\" class=\"headerlink\" title=\"JavaWeb\"></a>JavaWeb</h1><h2 id=\"1、Servlet\"><a href=\"#1、Servlet\" class=\"headerlink\" title=\"1、Servlet\"></a>1、Servlet</h2><h3 id=\"1-1、ServletContext应用\"><a href=\"#1-1、ServletContext应用\" class=\"headerlink\" title=\"1.1、ServletContext应用\"></a>1.1、ServletContext应用</h3><h4 id=\"1、获取初始化参数\"><a href=\"#1、获取初始化参数\" class=\"headerlink\" title=\"1、获取初始化参数\"></a>1、获取初始化参数</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 配置一些web应用初始化参数--&gt;\n&lt;context-param&gt;\n    &lt;param-name&gt;url&lt;&#x2F;param-name&gt;\n    &lt;param-value&gt;jdbc::mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis&lt;&#x2F;param-value&gt;\n&lt;&#x2F;context-param&gt;</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected void do Get(HttpServletRequest req,HttpServeltResponse resp)\n&#123;\n    SetvletContext context &#x3D; this.getServletContext();\n    String url &#x3D; context.getInitParamer(&quot;url&quot;);\n    resp.getWriter().write(url);\n&#125;</code></pre>\n\n\n\n\n\n<h4 id=\"2、请求转发\"><a href=\"#2、请求转发\" class=\"headerlink\" title=\"2、请求转发\"></a>2、请求转发</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class DemoServlet03 extends HttpServlet &#123;\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n        ServletContext context &#x3D; this.getServletContext();\n        context.getRequestDispatcher(&quot;&#x2F;hello&quot;).forward(req,resp);       &#x2F;&#x2F;请求转发\n    &#125;\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n        doGet(req, resp);\n    &#125;\n&#125;</code></pre>\n\n\n\n<h4 id=\"3、读取资源文件\"><a href=\"#3、读取资源文件\" class=\"headerlink\" title=\"3、读取资源文件\"></a>3、读取资源文件</h4><h6 id=\"在java目录下新建properties\"><a href=\"#在java目录下新建properties\" class=\"headerlink\" title=\"在java目录下新建properties\"></a>在java目录下新建properties</h6><h6 id=\"在resources目录下新建properties\"><a href=\"#在resources目录下新建properties\" class=\"headerlink\" title=\"在resources目录下新建properties\"></a>在resources目录下新建properties</h6><p>都被打包到同一个路径下：classes，我们俗称这个路径为classpath</p>\n<p>思路：需要一个文件流</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class DemoServlet04 extends HttpServlet &#123;\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n        InputStream input &#x3D; this.getServletContext().getResourceAsStream(&quot;&#x2F;WEB-INF&#x2F;classes&#x2F;db.properties&quot;);\n        Properties prop &#x3D; new Properties();\n        prop.load(input);\n        String username &#x3D; prop.getProperty(&quot;username&quot;);\n        String password &#x3D; prop.getProperty(&quot;password&quot;);\n        resp.getWriter().print(&quot;username &#x3D;&quot; + username);\n        resp.getWriter().print(&quot;password &#x3D;&quot;+ password);\n\n    &#125;\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n        doGet(req, resp);\n    &#125;\n&#125;</code></pre>\n\n\n\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--  在build中配置resources ，来防止资源导出时出现的问题--&gt;\n&lt;build&gt;\n    &lt;resources&gt;\n        &lt;resource&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n            &lt;includes&gt;\n                &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;\n                &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;\n            &lt;&#x2F;includes&gt;\n            &lt;filtering&gt;true&lt;&#x2F;filtering&gt;\n        &lt;&#x2F;resource&gt;\n        &lt;resource&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;\n            &lt;includes&gt;\n                &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;\n                &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;\n            &lt;&#x2F;includes&gt;\n            &lt;filtering&gt;true&lt;&#x2F;filtering&gt;\n        &lt;&#x2F;resource&gt;\n    &lt;&#x2F;resources&gt;\n&lt;&#x2F;build&gt;</code></pre>\n\n\n\n<h3 id=\"1-2、HttpServletResponse\"><a href=\"#1-2、HttpServletResponse\" class=\"headerlink\" title=\"1.2、HttpServletResponse\"></a>1.2、HttpServletResponse</h3><p>web服务器接收到客户端http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse;</p>\n<ul>\n<li>如果要获取客户端请求过来的参数:找HttpServletRequest</li>\n<li>如果要给客户端响应一些信息：找HttpServletResponse;</li>\n</ul>\n<h4 id=\"1、简单分类\"><a href=\"#1、简单分类\" class=\"headerlink\" title=\"1、简单分类\"></a>1、简单分类</h4><h5 id=\"负责向浏览器发送数据的方法\"><a href=\"#负责向浏览器发送数据的方法\" class=\"headerlink\" title=\"负责向浏览器发送数据的方法\"></a>负责向浏览器发送数据的方法</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">ServletOutputStream getOutputStream() throws IOException;\nPrinter getWriter() throws IOException;\t</code></pre>\n\n<h5 id=\"负责向浏览器发送相应头的方法\"><a href=\"#负责向浏览器发送相应头的方法\" class=\"headerlink\" title=\"负责向浏览器发送相应头的方法\"></a>负责向浏览器发送相应头的方法</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">void setCharacterEncoding(String var1);\n\n   void setContentLength(int var1);\n\n   void setContentLengthLong(long var1);\n\n   void setContentType(String var1);\n\n   void setBufferSize(int var1);</code></pre>\n\n\n\n<h4 id=\"2、常见应用\"><a href=\"#2、常见应用\" class=\"headerlink\" title=\"2、常见应用\"></a>2、常见应用</h4><h5 id=\"1、向浏览器输出消息\"><a href=\"#1、向浏览器输出消息\" class=\"headerlink\" title=\"1、向浏览器输出消息\"></a>1、向浏览器输出消息</h5><h5 id=\"2、下载文件\"><a href=\"#2、下载文件\" class=\"headerlink\" title=\"2、下载文件\"></a>2、下载文件</h5><p>​        1.要获取下载文件的路径</p>\n<p>​        2.下载的文件名</p>\n<p>​        3.让浏览器能够支持下载指定的东西</p>\n<p>​        4.获取下载文件的输入流</p>\n<p>​        5.创建缓冲区</p>\n<p>​        6.获取OutputStream对象</p>\n<p>​        7.将FileOutputStream流写入到buffer缓冲区</p>\n<p>​        8.使用OutputStream将缓冲区的数据输出到客户端</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@WebServlet(&quot;&#x2F;file&quot;)\npublic class FileServlet extends HttpServlet &#123;\n        @Override\n        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n            &#x2F;&#x2F;获取下载文件的路径\n            String realPath &#x3D; &quot;D:\\\\IDEAProject\\\\JavaWebStudy\\\\Study03\\\\target\\\\Study03\\\\WEB-INF\\\\classes\\\\0.jpg&quot;;\n\n            System.out.println(&quot;文件名 :&quot; + realPath);\n\n            &#x2F;&#x2F;下载的文件名\n            String fileName &#x3D; realPath.substring(realPath.lastIndexOf(&quot;\\\\&quot;)+1);\n            &#x2F;&#x2F;设置文件头\n            resp.setHeader(&quot;content-disposition&quot;,&quot;attachment;filename&#x3D;&quot;+ fileName);\n            &#x2F;&#x2F;获取下载文件的输入流\n            FileInputStream input &#x3D; new FileInputStream(realPath);\n            &#x2F;&#x2F;创建缓冲区\n            int length&#x3D;0;\n            byte[] buffer &#x3D; new byte[4096];\n            &#x2F;&#x2F;获取OutputStream对象\n            ServletOutputStream output &#x3D; resp.getOutputStream();\n            &#x2F;&#x2F;将FileOutputStream流写入到buffer 缓冲区\n            while((length&#x3D;input.read(buffer))&gt;0)\n            &#123;\n                output.write(buffer,0,length);\n            &#125;\n            input.close();\n            output.close();\n        &#125;</code></pre>\n\n<h4 id=\"3、实现重定向\"><a href=\"#3、实现重定向\" class=\"headerlink\" title=\"3、实现重定向\"></a>3、实现重定向</h4><p><img src=\"/JavaWeb.assets/image-20210711164114184.png\" alt=\"image-20210711164114184\"></p>\n<p>B一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫做重定向。</p>\n<p>常见场景：</p>\n<ul>\n<li><p>用户登录</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">void sendRedirect(String var1) throws IOException;</code></pre></li>\n</ul>\n<p>测试</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@WebServlet(&quot;&#x2F;send&quot;)\npublic class SendRedirectServlet extends HttpServlet &#123;\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n\n        &#x2F;*\n            resp.setHeader(&quot;Location&quot;,&quot;&#x2F;Study03_war&#x2F;image&quot;);\n            resp.setStatus(302);\n         *&#x2F;\n       resp.sendRedirect(&quot;&#x2F;Study03_war&#x2F;image&quot;);\n    &#125;\n&#125;</code></pre>\n\n<h6 id=\"重定向和转发的区别\"><a href=\"#重定向和转发的区别\" class=\"headerlink\" title=\"重定向和转发的区别\"></a>重定向和转发的区别</h6><p>相同点</p>\n<ul>\n<li>页面都会实现跳转</li>\n</ul>\n<p>不同点</p>\n<ul>\n<li>请求转发时 url不会产生变化</li>\n<li>重定向时 url地址栏会产生变化。</li>\n</ul>\n<h3 id=\"1-3、HttpServeltRequest\"><a href=\"#1-3、HttpServeltRequest\" class=\"headerlink\" title=\"1.3、HttpServeltRequest\"></a>1.3、HttpServeltRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest,通过这个HttpServletRequset方法，获得客户端的所有信息。</p>\n<h2 id=\"2、Cookie、Session\"><a href=\"#2、Cookie、Session\" class=\"headerlink\" title=\"2、Cookie、Session\"></a>2、Cookie、Session</h2><p>保存会话的两种技术</p>\n<p><strong>cookie</strong></p>\n<ul>\n<li>客户端技术</li>\n</ul>\n<p><strong>session</strong> </p>\n<ul>\n<li>服务器技术，利用这个技术，可以保存用户的会话信息，我们可以把信息放在session中。</li>\n</ul>\n<h3 id=\"2-1、Cookie\"><a href=\"#2-1、Cookie\" class=\"headerlink\" title=\"2.1、Cookie\"></a>2.1、Cookie</h3><p>​    1.请求中获取Cookie信息</p>\n<p>​    2.服务器响应给客户端cookie</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">Cookie [] cookies &#x3D; req.getCookies(); \t&#x2F;&#x2F;获得Cookie\ncookie.getName();\t&#x2F;&#x2F;获得cookie中的name\ncookie.getValue();\t&#x2F;&#x2F;获得cookie中的Value\nnew Cookie(&quot;lastLoginTime&quot;,System.currentTileMillis()+&quot;&quot;);\t&#x2F;&#x2F;新建一个cookie\ncookie.setMaxAge(24*3600)\t&#x2F;&#x2F;设置cookie的有效期\n</code></pre>\n\n<p>​    3.编码解码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">URLEncoder.encode(&quot;百度&quot;,&quot;UTF-8&quot;);\nURLDecoder.decode(cookie.getValue(),&quot;UTF-8&quot;);</code></pre>\n\n\n\n<h2 id=\"3、JSP\"><a href=\"#3、JSP\" class=\"headerlink\" title=\"3、JSP\"></a>3、JSP</h2><h3 id=\"3-1、什么是JSP\"><a href=\"#3-1、什么是JSP\" class=\"headerlink\" title=\"3.1、什么是JSP\"></a>3.1、什么是JSP</h3><p>java Server pages：Java 服务器端页面，也和Servlet一样，用于动态的Web技术！</p>\n<p>特点：</p>\n<ul>\n<li>写JSP就像在HTML</li>\n<li>区别：<ul>\n<li>HTML只给用户提供静态数据</li>\n<li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-2、JSP语法\"><a href=\"#3-2、JSP语法\" class=\"headerlink\" title=\"3.2、JSP语法\"></a>3.2、JSP语法</h3><h4 id=\"JSP表达式\"><a href=\"#JSP表达式\" class=\"headerlink\" title=\"JSP表达式\"></a>JSP表达式</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;%&#x3D; 变量或者表达式%&gt;\n&lt;%&#x3D; new java.util.Date()%&gt;</code></pre>\n\n\n\n<h4 id=\"JSP脚本片段\"><a href=\"#JSP脚本片段\" class=\"headerlink\" title=\"JSP脚本片段\"></a>JSP脚本片段</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;%\n \tint sum &#x3D;0;\n\tfor(int i&#x3D;1;i&lt;&#x3D;100;i++)\n    &#123;\n        sum+&#x3D;i;\n    &#125;\n\tout.println(&quot;&lt;h1&gt;Sum&#x3D;&quot;+sum +&quot;&#x2F;h1&gt;&quot;);\n %&gt;</code></pre>\n\n<h4 id=\"JSP声明\"><a href=\"#JSP声明\" class=\"headerlink\" title=\"JSP声明\"></a>JSP声明</h4><pre class=\"line-numbers language-jsp\" data-language=\"jsp\"><code class=\"language-jsp\">&lt;%!\n   static &#123;\n     System.out.println(&quot;Loading Servlet&quot;);\n   &#125;\n   private int globalVar &#x3D;0;\n   public void test()&#123;\n     System.out.println(&quot;进入了Test 方法&quot;);\n   &#125;\n %&gt;</code></pre>\n\n<p>JSP声明：会被编译到JSP生成的Java的类中。其他的，会被生成到_jspService中！</p>\n<p>在JSP，嵌入Java代码即可！</p>\n<pre class=\"line-numbers language-jsp\" data-language=\"jsp\"><code class=\"language-jsp\">&lt;%%&gt;\n&lt;%&#x3D;%&gt;\n&lt;%!%&gt;\n&lt;%--注释--%&gt;\n\n&lt;!--HTML注释--&gt;\n&lt;%-- jsp注释 --&gt;</code></pre>\n\n<p>JSP的注释，不会在页面显示，HTML的会显示。</p>\n<h3 id=\"3-3、JSP指令\"><a href=\"#3-3、JSP指令\" class=\"headerlink\" title=\"3.3、JSP指令\"></a>3.3、JSP指令</h3><pre class=\"line-numbers language-JSP\" data-language=\"JSP\"><code class=\"language-JSP\">&lt;%!-- @include会将两个页面合二为一 --&gt;\n&lt;%@include file&#x3D;&quot;&quot;%&gt;\n&lt;hr&gt;\n\n&lt;%!-- jsp:include：拼接页面，本质还是三个--&gt;\n&lt;jsp:include page&#x3D;&quot;&quot;&#x2F;&gt;</code></pre>\n\n\n\n<h3 id=\"3-4、9大内置对象\"><a href=\"#3-4、9大内置对象\" class=\"headerlink\" title=\"3.4、9大内置对象\"></a>3.4、9大内置对象</h3><ul>\n<li>PageContext</li>\n<li>Request</li>\n<li>Response</li>\n<li>Session</li>\n<li>Application  【ServletContext】</li>\n<li>config  【ServletConfig】</li>\n<li>page</li>\n<li>exception</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">pageContext.setAttribute(&quot;name1&quot;,&quot;蟑螂恶霸&quot;);           &#x2F;&#x2F;保存的数据只在一个页面中有效\n   request.setAttribute(&quot;name2&quot;,&quot;蜻蜓队长&quot;);               &#x2F;&#x2F;保存的数据只在一次请求中有效，请求转发会携带这个数据\n   session.setAttribute(&quot;name3&quot;,&quot;车轮滚滚&quot;);               &#x2F;&#x2F;保存的数据在一次会话中有效，从打开浏览器到关闭浏览器\n   application.setAttribute(&quot;name4&quot;,&quot;蝎子莱莱&quot;);           &#x2F;&#x2F;保存的数据在服务器中有效，从打开服务器到关闭</code></pre>\n\n<p>request:客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的。</p>\n<p>session: 客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车</p>\n<p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他的用户还可以使用，比如：聊天数据。</p>\n<h3 id=\"3-5、JSP标签、JSTL标签\"><a href=\"#3-5、JSP标签、JSTL标签\" class=\"headerlink\" title=\"3.5、JSP标签、JSTL标签\"></a>3.5、JSP标签、JSTL标签</h3><p>EL表达式：</p>\n<ul>\n<li>获取数据</li>\n<li>执行运算</li>\n<li>获取web开发的常用对象</li>\n</ul>\n<p><strong>jsp标签</strong></p>\n<pre class=\"line-numbers language-JSP\" data-language=\"JSP\"><code class=\"language-JSP\">&lt;%--jsp:include--&gt;\n &lt;%-- http:&#x2F;&#x2F;localhost:8080&#x2F;jsptag.jsp?name&#x3D;abc&amp;age&#x3D;12--&gt;\n\n&lt;jsp:forward page&#x3D;&#39;&#x2F;jsptag2.jsp&#39;&gt;\n    &lt;jsp:param name&#x3D;&quot;name&quot; value&#x3D;&quot;kuangshen&quot;&gt;&lt;&#x2F;jsp:param&gt;\n    &lt;jsp:param name&#x3D;&quot;age&quot; value&#x3D;&quot;12&quot;&gt;&lt;&#x2F;jsp:param&gt;\n&lt;&#x2F;jsp:forward&gt;</code></pre>\n\n\n\n<p>**JSTL **</p>\n<p>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！</p>\n<h2 id=\"4、JavaBean\"><a href=\"#4、JavaBean\" class=\"headerlink\" title=\"4、JavaBean\"></a>4、JavaBean</h2><p>实体类</p>\n<p>JavaBean有特定的写法：</p>\n<ul>\n<li>必须要有一个无参构造</li>\n<li>属性必须私有化</li>\n<li>必须有对应的get&#x2F;set方法</li>\n</ul>\n<p>一般用来和数据库的字段做映射 ORM;</p>\n<p>ORM:对象映射关系</p>\n<ul>\n<li>表—&gt;类</li>\n<li>字段—&gt;属性</li>\n<li>行记录—&gt;对象</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>age</th>\n<th>phone</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>a</td>\n<td>8</td>\n<td>13800012345</td>\n</tr>\n<tr>\n<td>2</td>\n<td>b</td>\n<td>10</td>\n<td>13800012344</td>\n</tr>\n<tr>\n<td>3</td>\n<td>c</td>\n<td>18</td>\n<td>13900077771</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class people&#123;\n    private int id;\n    private String name;\n    private int age;\n    private String phone;\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"5、MVC三层架构\"><a href=\"#5、MVC三层架构\" class=\"headerlink\" title=\"5、MVC三层架构\"></a>5、MVC三层架构</h2><h3 id=\"5-1、MVC三层架构\"><a href=\"#5-1、MVC三层架构\" class=\"headerlink\" title=\"5.1、MVC三层架构\"></a>5.1、MVC三层架构</h3><p> <img src=\"/JavaWeb.assets/image-20210717182056478.png\" alt=\"image-20210717182056478\"></p>\n<p>Model</p>\n<ul>\n<li>业务处理：业务逻辑   (Service)</li>\n<li>数据持久层：CRUD (Dao)</li>\n</ul>\n<p>View</p>\n<ul>\n<li>展示数据</li>\n<li>提供连接发起Servlet请求</li>\n</ul>\n<p>Controller</p>\n<ul>\n<li>接收用户的请求：（req：请求参数、session 会话请求…）</li>\n<li>交给业务层处理对应的代码</li>\n<li>控制视图的跳转</li>\n</ul>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">登录----&gt;接收用户的登录请求---&gt;处理用户的请求(获取用户登录的参数，username，password)----&gt;交给业务层处理登录业务(判断用户名密码是否正确) ---&gt;Dao层查询用户名和密码是否正确----&gt;数据库</code></pre>\n\n<h2 id=\"6、Filter\"><a href=\"#6、Filter\" class=\"headerlink\" title=\"6、Filter\"></a>6、Filter</h2><p>Filter：过滤器，用来过滤网站</p>\n<ul>\n<li>处理中文乱码</li>\n<li>登陆验证..</li>\n</ul>\n<p><img src=\"/JavaWeb.assets/image-20210717222334857.png\" alt=\"image-20210717222334857\"></p>\n<p>2</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">&#x2F;&#x2F;Filter过滤\n\n@WebFilter(&quot;&#x2F;servlet&#x2F;test1&quot;)\npublic class CharaterEncodingFilter implements Filter &#123;\n    \n    &#x2F;&#x2F;初始化:Web服务器启动，就已经初始化了，随时等待过滤对象的出现！\n    public void init(FilterConfig filterConfig) throws ServletException &#123;\n\n    &#125;\n\n    &#x2F;&#x2F;Chain:链\n    &#x2F;&#x2F;1.过滤中的所有代码，在过滤特定请求的时候都会执行\n    &#x2F;&#x2F;2.必须要让过滤器继续执行\n    &#x2F;&#x2F;chain.Filter(request,response);\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;\n        request.setCharacterEncoding(&quot;utf-8&quot;);\n        response.setCharacterEncoding(&quot;utf-8&quot;);\n        response.setContentType(&quot;text&#x2F;plain&quot;);\n\n        System.out.println(&quot;进去Filter过滤器前***&quot;);\n        chain.doFilter(request,response);\n        System.out.println(&quot;进入Filter过滤器后***&quot;);\n\n    &#125;\n\t&#x2F;&#x2F;销毁:web服务器关闭的时候，过滤会销毁。\n    public void destroy() &#123;\n\n    &#125;\n&#125;\n</code></pre>\n\n<p>3.web.xml 配置</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;filter&gt;\n    &lt;filter-name&gt;CharaterEncodingFilter&lt;&#x2F;filter-name&gt;\n    &lt;filter-class&gt;my.CharaterEncodingFilter&lt;&#x2F;filter-class&gt;\n&lt;&#x2F;filter&gt;\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;CharaterEncodingFilter&lt;&#x2F;filter-name&gt;\n    &lt;url-pattern&gt;&#x2F;servlet&#x2F;*&lt;&#x2F;url-pattern&gt;\n&lt;&#x2F;filter-mapping&gt;</code></pre>\n\n<h2 id=\"7、监听器\"><a href=\"#7、监听器\" class=\"headerlink\" title=\"7、监听器\"></a>7、监听器</h2><p>实现一个监听器的接口</p>\n<p>​    1.编写一个监听器接口，实现监听器的接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class OnlineCountListener implements HttpSessionListener &#123;\n    public void sessionCreated(HttpSessionEvent httpSessionEvent) &#123;\n        ServletContext servletContext &#x3D; httpSessionEvent.getSession().getServletContext();\n        System.out.println(httpSessionEvent.getSession().getId());\n        Integer onlineCount &#x3D; (Integer) servletContext.getAttribute(&quot;OnlineCount&quot;);\n        if (onlineCount &#x3D;&#x3D; null) &#123;\n            onlineCount &#x3D; new Integer(1);\n        &#125; else &#123;\n            System.out.println(servletContext);\n            onlineCount +&#x3D; 1;\n        &#125;\n        servletContext.setAttribute(&quot;OnlineCount&quot;, onlineCount);\n    &#125;\n\n    public void sessionDestroyed(HttpSessionEvent httpSessionEvent) &#123;\n        ServletContext servletContext &#x3D; httpSessionEvent.getSession().getServletContext();\n        Integer onlineCount &#x3D; (Integer) servletContext.getAttribute(&quot;OnlineCount&quot;);\n        if (onlineCount &#x3D;&#x3D; null) &#123;\n            onlineCount &#x3D; new Integer(0);\n        &#125; else &#123;\n            onlineCount -&#x3D;1;\n        &#125;\n        servletContext.setAttribute(&quot;OnlineCount&quot;, onlineCount);\n    &#125;\n&#125;</code></pre>\n\n\n\n<p>​    2.web.xml中注册监听器</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;listener&gt;\n    &lt;listener-class&gt;my.listener.OnlineCountListener&lt;&#x2F;listener-class&gt;\n&lt;&#x2F;listener&gt;</code></pre>\n\n\n\n<h2 id=\"8、过滤器、监听器常见应用\"><a href=\"#8、过滤器、监听器常见应用\" class=\"headerlink\" title=\"8、过滤器、监听器常见应用\"></a>8、过滤器、监听器常见应用</h2><p> 用户登陆之后才能进入主页！用户注销后就不能进入主页了！</p>\n<p>1.用户登陆之后，向Session中放入用户的数据</p>\n<p>2.进入主页的时候要判断用户是否已经登陆；要求：在过滤器中实现！</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">HttpServletRequest req &#x3D; (HttpServletRequest) request;\nHttpServletResponse resp &#x3D; (HttpServletResponse) response;\nHttpSession session &#x3D; req.getSession();\nObject username &#x3D; session.getAttribute(&quot;username&quot;);\nif(username &#x3D;&#x3D; null)\n&#123;\n  \t resp.sendRedirect(&quot;&#x2F;login.jsp&quot;);\n&#125;\n\nchain.doFilter(request,response);</code></pre>\n\n\n\n<h2 id=\"9、JDBC\"><a href=\"#9、JDBC\" class=\"headerlink\" title=\"9、JDBC\"></a>9、JDBC</h2><h3 id=\"JDBC固定步骤：\"><a href=\"#JDBC固定步骤：\" class=\"headerlink\" title=\"JDBC固定步骤：\"></a><strong>JDBC固定步骤：</strong></h3><p>1.加载驱动</p>\n<p>2.连接数据库，代表数据库</p>\n<p>3.向数据库发送SQL的对象Statement：CRUD</p>\n<p>4.编写SQL （编写业务，不同的SQL）</p>\n<p>5.执行SQL</p>\n<p>6.关闭连接</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;配置信息\n     String url &#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jdbc?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&quot;;\n     String username&#x3D;&quot;root&quot;;\n     String password&#x3D;&quot;&quot;;\n\n     &#x2F;&#x2F;1.加载驱动\n     Class.forName(&quot;com.mysql.jdbc.Driver&quot;);\n\n     &#x2F;&#x2F;2.连接数据库\n     Connection connection &#x3D; DriverManager.getConnection(url,username,password);\n\n     &#x2F;&#x2F;向数据库发送SQL的对象Statement ：CRUD;\n     Statement statement &#x3D; connection.createStatement();\n     \n     &#x2F;&#x2F;编写SQL\n     String sql&#x3D;&quot;select * from people&quot;;\n\n     &#x2F;&#x2F;执行查询SQL,返回一个结果集\n     ResultSet rs &#x3D; statement.executeQuery(sql);\n     while (rs.next())\n     &#123;\n         System.out.println(&quot;id&#x3D;&quot;+ rs.getObject(&quot;id&quot;));\n         System.out.println(&quot;name&#x3D;&quot;+ rs.getObject(&quot;name&quot;));\n         System.out.println(&quot;age&#x3D;&quot;+ rs.getObject(&quot;age&quot;));\n         System.out.println(&quot;phone&#x3D;&quot;+ rs.getObject(&quot;phone&quot;));\n         System.out.println(&quot;&quot;);\n     &#125;\n\n     &#x2F;&#x2F;关闭\n     rs.close();\n     statement.close();\n     connection.close();\n </code></pre>\n\n\n\n<h3 id=\"预编译SQL处理\"><a href=\"#预编译SQL处理\" class=\"headerlink\" title=\"预编译SQL处理\"></a><strong>预编译SQL处理</strong></h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;配置信息\n     String url &#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jdbc?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&quot;;\n     String username&#x3D;&quot;root&quot;;\n     String password&#x3D;&quot;&quot;;\n\n     &#x2F;&#x2F;1.加载驱动\n     Class.forName(&quot;com.mysql.jdbc.Driver&quot;);\n\n     &#x2F;&#x2F;2.连接驱动\n     Connection connection &#x3D; DriverManager.getConnection(url,username,password);\n\n     &#x2F;&#x2F;3.SQL语句\n     String sql&#x3D;&quot;insert into people (id, name, age, phone)values (?,?,?,?);&quot;;\n\n     &#x2F;&#x2F;编译预处理\n     PreparedStatement preparedStatement &#x3D; connection.prepareStatement(sql);\n     preparedStatement.setInt(1,4);\n     preparedStatement.setString(2,&quot;hello&quot;);\n     preparedStatement.setInt(3,13);\n     preparedStatement.setString(4,&quot;13800012312&quot;);\n\n     &#x2F;&#x2F;5.执行sql\n     int i &#x3D; preparedStatement.executeUpdate();\n     if(i&gt;0)\n     &#123;\n         System.out.println(&quot;插入成功** &quot;);\n     &#125;\n\n     &#x2F;&#x2F;关闭连接\n     preparedStatement.close();\n     connection.close();</code></pre>\n\n\n\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a><strong>事务</strong></h3><p>要么都成功，要么都失败！</p>\n<p>ACID原则：保证数据安全</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">开启事务\n事务提交\tcommit();\n事务回滚\trollback();\n关闭事务\n    \n转账:\nA:1000\nB:1000\nA(900) --100--&gt; B(1000)\n</code></pre>\n\n\n\n<p><strong>junit</strong></p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;junit-dep&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;4.11&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;a</code></pre>\n\n<p>使用@Test注解进行单元测试</p>\n<img src=\"JavaWeb.assets/image-20210718224417109.png\" alt=\"image-20210718224417109\" style=\"zoom: 80%;\" />\n\n<p>错误提示</p>\n<p><img src=\"/JavaWeb.assets/image-20210718224458673.png\" alt=\"image-20210718224458673\"></p>\n<p>事务操作</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\npublic void test() throws ClassNotFoundException, SQLException &#123;\n    &#x2F;&#x2F;配置信息\n    String url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jdbc?useUniode&#x3D;true&amp;characterEncoding&#x3D;utf-8&quot;;\n    String username &#x3D; &quot;root&quot;;\n    String password &#x3D; &quot;&quot;;\n\n    Connection connection &#x3D; null;\n    &#x2F;&#x2F;1.加载驱动\n    try &#123;\n        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);\n\n        &#x2F;&#x2F;2.连接驱动\n        connection &#x3D; DriverManager.getConnection(url, username, password);\n\n        &#x2F;&#x2F;3.通知数据库开启事务\n        connection.setAutoCommit(false);    &#x2F;&#x2F;false 开启事务，true关闭事务\n\n        String sql &#x3D; &quot;update account set money &#x3D; money-100 where name &#x3D; &#39;A&#39;&quot;;\n        connection.prepareStatement(sql).executeUpdate();\n        int i &#x3D;1&#x2F;0;\n\n        String sql1 &#x3D; &quot;update account set money &#x3D; money+100 where name &#x3D; &#39;B&#39;&quot;;\n        connection.prepareStatement(sql1).executeUpdate();\n        connection.commit();\n        System.out.println(&quot;提交成功 **** &quot;);\n    &#125; catch (Exception e) &#123;\n        try&#123;\n            &#x2F;&#x2F;出现异常 就进行数据库回滚事务\n            connection.rollback();\n        &#125;catch(Exception e1)&#123;\n            e1.printStackTrace();\n        &#125;\n\n        e.printStackTrace();\n    &#125;\n\n&#125;</code></pre>\n\n\n\n\n\n<h2 id=\"10、邮件发送\"><a href=\"#10、邮件发送\" class=\"headerlink\" title=\"10、邮件发送\"></a>10、邮件发送</h2><p>1、smtp服务器地址：一般是smtp.xxx.com，163: smtp.163.com   qq:  smtp.qq.com</p>\n<h3 id=\"SMTP协议\"><a href=\"#SMTP协议\" class=\"headerlink\" title=\"SMTP协议\"></a>SMTP协议</h3><h4 id=\"发送邮件：\"><a href=\"#发送邮件：\" class=\"headerlink\" title=\"发送邮件：\"></a>发送邮件：</h4><p>我们通常把处理用户smtp请求(邮件发送请求)的服务器称之为smtp服务器(邮件发送服务器)。</p>\n<h3 id=\"POP3协议\"><a href=\"#POP3协议\" class=\"headerlink\" title=\"POP3协议\"></a>POP3协议</h3><h4 id=\"接收邮件：\"><a href=\"#接收邮件：\" class=\"headerlink\" title=\"接收邮件：\"></a>接收邮件：</h4><p>我们通常把处理用户pop3请求(邮件接收请求)的服务器称之为POP3服务器(邮件接收服务器)</p>\n<h3 id=\"邮件收发原理\"><a href=\"#邮件收发原理\" class=\"headerlink\" title=\"邮件收发原理\"></a>邮件收发原理</h3><p><img src=\"/JavaWeb.assets/image-20210729191827595.png\" alt=\"image-20210729191827595\"></p>\n<h3 id=\"Java-发送邮件\"><a href=\"#Java-发送邮件\" class=\"headerlink\" title=\"Java 发送邮件\"></a>Java 发送邮件</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>使用Java发送E-mail 需要依赖JavaMail API 和 Java Activation Framework。</p>\n<p>两个jar 包</p>\n<ul>\n<li>mail.jar</li>\n<li>activation.jar</li>\n</ul>\n<p>发送邮件只需调用JavaMail开发包中的相应API类 即可。</p>\n<p>尝试发送一封简单的邮件，确保电脑可以连接网络。</p>\n<ul>\n<li>创建包含邮件服务器的网络连接信息的Session对象</li>\n<li>创建代表邮件内容的Message对象</li>\n<li>创建Transport对象，连接服务器，发送Message，关闭连接</li>\n</ul>\n<p>主要有四个核心类，在编写程序时，记住四个核心类，可以编写出Java邮件处理程序。</p>\n<p><img src=\"/JavaWeb.assets/image-20210729183904218.png\" alt=\"image-20210729183904218\"></p>\n<h3 id=\"发送纯文本邮件\"><a href=\"#发送纯文本邮件\" class=\"headerlink\" title=\"发送纯文本邮件\"></a>发送纯文本邮件</h3><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my;\n\nimport com.sun.mail.util.MailSSLSocketFactory;\n\nimport javax.mail.*;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeMessage;\nimport java.security.GeneralSecurityException;\nimport java.util.Properties;\n\npublic class Test &#123;\n    public static void main(String[]args) throws Exception &#123;\n        Properties prop &#x3D; new Properties();\n        prop.setProperty(&quot;mail.host&quot;,&quot;smtp.qq.com&quot;);        &#x2F;&#x2F;设置QQ邮件服务器\n        prop.setProperty(&quot;mail.transport.protocol&quot;,&quot;smtp&quot;);     &#x2F;&#x2F;邮件发送协议\n        prop.setProperty(&quot;mail.smtp.auth&quot;,&quot;true&quot;);\n\n        &#x2F;&#x2F;关于QQ邮箱,还要设置SSL加密，加上以下代码\n        MailSSLSocketFactory sf &#x3D; new MailSSLSocketFactory();\n        sf.setTrustAllHosts(true);\n        prop.put(&quot;mail.smtp.ssl.enable&quot;,&quot;true&quot;);\n        prop.put(&quot;mail.smtp.ssl.socketFactory&quot;,sf);\n\n        &#x2F;&#x2F;使用Java 发送邮件的5个步骤\n\n        &#x2F;&#x2F;创建定义整个应用程序所需的环境信息的Session 对象\n        Session session &#x3D; Session.getDefaultInstance(prop, new Authenticator() &#123;\n            @Override\n            protected PasswordAuthentication getPasswordAuthentication() &#123;\n                &#x2F;&#x2F;发件人邮件用户名，授权码\n                return new PasswordAuthentication(&quot;邮箱用户名”，“授权码&quot;);\n            &#125;\n        &#125;);\n\n        &#x2F;&#x2F;开启Session Debug 模式，这样就可以查看邮件发送状态\n        session.setDebug(true);\n\n        &#x2F;&#x2F;2、通过session 得到transport对象\n        Transport ts &#x3D; session.getTransport();\n\n        &#x2F;&#x2F;使用邮箱的用户名和授权码连上邮件服务器\n        ts.connect(&quot;邮箱用户名&quot;,&quot;授权码&quot;);\n\n        &#x2F;&#x2F;创建邮件对象\n        MimeMessage message &#x3D; new MimeMessage(session);\n        &#x2F;&#x2F;指明邮件发件人\n        message.setFrom(new InternetAddress(&quot;发件人邮箱地址&quot;));\n\n        &#x2F;&#x2F;指明邮件收件人\n        message.setRecipient(Message.RecipientType.TO,new InternetAddress(&quot;收件人邮箱&quot;));\n\n        &#x2F;&#x2F;邮件的标题\n        message.setSubject(&quot;Java发送邮件测试&quot;);\n\n        &#x2F;&#x2F;邮件文本的内容\n        message.setContent(&quot;&lt;h1 style&#x3D;&#39;color:blue&#39;&gt;你好啊，阿巴阿巴阿巴阿巴阿巴阿巴&lt;&#x2F;h1&gt;&quot;,&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);\n\n        &#x2F;&#x2F;发送邮件\n        ts.sendMessage(message,message.getAllRecipients());\n\n        &#x2F;&#x2F;关闭\n        ts.close();\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"带图片和附件的邮件\"><a href=\"#带图片和附件的邮件\" class=\"headerlink\" title=\"带图片和附件的邮件\"></a>带图片和附件的邮件</h3><p><img src=\"/JavaWeb.assets/image-20210729215708779.png\" alt=\"image-20210729215708779\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package my;\n\nimport com.sun.mail.util.MailSSLSocketFactory;\n\nimport javax.activation.DataHandler;\nimport javax.activation.FileDataSource;\nimport javax.mail.*;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeBodyPart;\nimport javax.mail.internet.MimeMessage;\nimport javax.mail.internet.MimeMultipart;\nimport java.security.GeneralSecurityException;\nimport java.util.Properties;\n\npublic class Test &#123;\n    public static void main(String[] args) throws Exception &#123;\n        Properties prop &#x3D; new Properties();\n        prop.setProperty(&quot;mail.host&quot;, &quot;smtp.qq.com&quot;);        &#x2F;&#x2F;设置QQ邮件服务器\n        prop.setProperty(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);     &#x2F;&#x2F;邮件发送协议\n        prop.setProperty(&quot;mail.smtp.auth&quot;, &quot;true&quot;);\n\n        &#x2F;&#x2F;关于QQ邮箱,还要设置SSL加密，加上以下代码\n        MailSSLSocketFactory sf &#x3D; new MailSSLSocketFactory();\n        sf.setTrustAllHosts(true);\n        prop.put(&quot;mail.smtp.ssl.enable&quot;, &quot;true&quot;);\n        prop.put(&quot;mail.smtp.ssl.socketFactory&quot;, sf);\n\n        &#x2F;&#x2F;使用Java 发送邮件的5个步骤\n\n        &#x2F;&#x2F;创建定义整个应用程序所需的环境信息的Session 对象\n        Session session &#x3D; Session.getDefaultInstance(prop, new Authenticator() &#123;\n            @Override\n            protected PasswordAuthentication getPasswordAuthentication() &#123;\n                &#x2F;&#x2F;发件人邮件用户名，授权码\n                return new PasswordAuthentication(&quot;635996171@qq.com&quot;, &quot;cwocrxkrtpcwbbdd&quot;);\n            &#125;\n        &#125;);\n\n        &#x2F;&#x2F;开启Session Debug 模式，这样就可以查看邮件发送状态\n        session.setDebug(true);\n\n        &#x2F;&#x2F;2、通过session 得到transport对象\n        Transport ts &#x3D; session.getTransport();\n\n        &#x2F;&#x2F;使用邮箱的用户名和授权码连上邮件服务器\n        ts.connect(&quot;635996171@qq.com&quot;, &quot;cwocrxkrtpcwbbdd&quot;);\n\n        &#x2F;&#x2F;创建邮件对象\n        MimeMessage message &#x3D; new MimeMessage(session);\n        &#x2F;&#x2F;指明邮件发件人\n        message.setFrom(new InternetAddress(&quot;635996171@qq.com&quot;));\n\n        &#x2F;&#x2F;指明邮件收件人\n        message.setRecipient(Message.RecipientType.TO, new InternetAddress(&quot;965166503@qq.com&quot;));\n\n        &#x2F;&#x2F;邮件的标题\n        message.setSubject(&quot;带图片邮件测试&quot;);\n\n&#x2F;&#x2F;        &#x2F;&#x2F;邮件文本的内容\n&#x2F;&#x2F;        message.setContent(&quot;&quot;, &quot;text&#x2F;html;charset&#x3D;utf-8&quot;);\n\n        &#x2F;&#x2F;准备图片数据\n        MimeBodyPart image &#x3D; new MimeBodyPart();\n        &#x2F;&#x2F;图片需要经过数据处理。。。\n        DataHandler dh &#x3D; new DataHandler(new FileDataSource(&quot;D:\\\\IDEAProject\\\\JavaWebStudy\\\\EmailStudy\\\\src\\\\0.jpg&quot;));\n        image.setDataHandler(dh);\n        image.setContentID(&quot;0.jpg&quot;);\n\n        &#x2F;&#x2F;准备正文数据\n        MimeBodyPart text &#x3D; new MimeBodyPart();\n        text.setContent(&quot;这是一封带图片的邮件&lt;img src&#x3D;&#39;cid:0.jpg&#39;&#x2F;&gt;&quot;,&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);\n\n        &#x2F;&#x2F;描述数据关系\n        MimeMultipart mm &#x3D; new MimeMultipart();\n        mm.addBodyPart(image);\n        mm.addBodyPart(text);\n        mm.setSubType(&quot;related&quot;);\n\n        &#x2F;&#x2F;设置到消息中，保存修改\n        message.setContent(mm);\n        message.saveChanges();\n\n        &#x2F;&#x2F;发送邮件\n        ts.sendMessage(message, message.getAllRecipients());\n\n\n        &#x2F;&#x2F;关闭\n        ts.close();\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"网站注册发送邮件实现\"><a href=\"#网站注册发送邮件实现\" class=\"headerlink\" title=\"网站注册发送邮件实现\"></a>网站注册发送邮件实现</h3><p><strong>什么是序列化？</strong></p>\n<p>序列化是将对象状态转换为可保持或传输的格式的过程。与序列化相对的是反序列化，它将流转换为对象。这两个过程结合起来，可以轻松地存储和传输数据。</p>\n<h5 id=\"编写Servlet\"><a href=\"#编写Servlet\" class=\"headerlink\" title=\"编写Servlet\"></a>编写Servlet</h5><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my;\n\nimport my.pojo.User;\nimport my.utils.SendMail;\n\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\npublic class RegisterServlet extends HttpServlet &#123;\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n        doPost(req, resp);\n    &#125;\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;\n        String username &#x3D; req.getParameter(&quot;username&quot;);\n        String password &#x3D; req.getParameter(&quot;password&quot;);\n        String email &#x3D; req.getParameter(&quot;email&quot;);\n\n        User user &#x3D; new User(username, password, email);\n\n        &#x2F;&#x2F;用户注册成功后，给用户发送一封邮件\n        &#x2F;&#x2F;使用线程来发送邮件，防止出现耗时，和网站注册人数过多的情况\n        SendMail sendMail &#x3D; new SendMail(user);\n        &#x2F;&#x2F;启动线程，线程启动后就会执行run方法来发送邮件。\n        sendMail.start();\n\n        &#x2F;&#x2F;注册用户\n        req.setAttribute(&quot;message&quot;,&quot;注册成功，我们已发送一封邮件到您的邮箱，请注意查收。&quot;);\n        req.getRequestDispatcher(&quot;info.jsp&quot;).forward(req,resp);\n\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<p>编写发送邮件工具类(使用线程，防止出现耗时，或注册人数过多的情况。减少用户在界面的等待)</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.utils;\n\nimport com.sun.mail.util.MailSSLSocketFactory;\nimport my.pojo.User;\n\nimport javax.mail.*;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeMessage;\nimport java.util.Properties;\n\npublic class SendMail extends Thread &#123;\n    &#x2F;&#x2F;用于给用户发送邮件的邮箱\n    private String from &#x3D; &quot;635996171@qq.com&quot;;\n    &#x2F;&#x2F;邮箱的用户名\n    private String username &#x3D; &quot;635996171@qq.com&quot;;\n    &#x2F;&#x2F;邮箱的密码\n    private String password &#x3D; &quot;cwocrxkrtpcwbbdd&quot;;\n    &#x2F;&#x2F;发送邮件的服务器地址\n    private String port &#x3D; &quot;smtp.qq.com&quot;;\n\n    private User user;\n\n    public SendMail(User user) &#123;\n        this.user &#x3D; user;\n    &#125;\n\n    @Override\n    public void run() &#123;\n        try &#123;\n            Properties prop &#x3D; new Properties();\n            prop.setProperty(&quot;mail.port&quot;, port);\n            prop.setProperty(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;); &#x2F;&#x2F;邮件发送协议\n            prop.setProperty(&quot;mail.smtp.auth&quot;, &quot;true&quot;);\n\n            &#x2F;&#x2F;QQ邮箱设置SSL加密\n\n            MailSSLSocketFactory sf &#x3D; new MailSSLSocketFactory();\n            sf.setTrustAllHosts(true);\n            prop.put(&quot;mail.smtp.ssl.enable&quot;, &quot;true&quot;);\n            prop.put(&quot;mail.smtp.ssl.socketFactory&quot;, sf);\n\n            &#x2F;&#x2F;发送邮件\n            &#x2F;&#x2F;创建定义整个应用程序的环境信息的Session对象\n            Session session &#x3D; Session.getDefaultInstance(prop, new Authenticator() &#123;\n                @Override\n                protected PasswordAuthentication getPasswordAuthentication() &#123;\n                    &#x2F;&#x2F;发件人用户名和授权码\n                    return new PasswordAuthentication(username, password);\n                &#125;\n            &#125;);\n\n            &#x2F;&#x2F;开启Debug\n            session.setDebug(true);\n\n            &#x2F;&#x2F;2、通过Session得到Transport对象\n            Transport ts &#x3D; session.getTransport();\n\n            &#x2F;&#x2F;使用邮箱的用户名和授权码登录服务器\n            ts.connect(port, username, password);\n\n            &#x2F;&#x2F;创建邮箱对象\n            MimeMessage message &#x3D; new MimeMessage(session);\n\n            &#x2F;&#x2F;指明邮件发送人\n            message.setFrom(new InternetAddress(from));\n\n            &#x2F;&#x2F;指明邮件接收人\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(user.getEmail()));\n\n            &#x2F;&#x2F;邮件的标题\n            message.setSubject(&quot;网站注册用户消息提示&quot;);\n            &#x2F;&#x2F;邮件内容\n            String info &#x3D; &quot;恭喜您注册成功，您的用户名：&quot; + user.getUsername() + &quot;您的密码：&quot; + user.getPassword() + &quot;,请妥善保管，如有问题，请联系我们&quot;;\n            message.setContent(info, &quot;text&#x2F;html;charset&#x3D;utf-8&quot;);\n            message.saveChanges();\n\n            ts.sendMessage(message, message.getAllRecipients());\n            ts.close();\n\n        &#125; catch (Exception e) &#123;\n            throw new RuntimeException(e);\n        &#125;\n\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"11、Maven\"><a href=\"#11、Maven\" class=\"headerlink\" title=\"11、Maven\"></a>11、Maven</h2><p>maven由于他的约定大于配置，我们之后可以能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;\n&lt;build&gt;\n    &lt;resources&gt;\n        &lt;resource&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n            &lt;includes&gt;\n                &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;\n                &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;\n            &lt;&#x2F;includes&gt;\n            &lt;filtering&gt;true&lt;&#x2F;filtering&gt;\n        &lt;&#x2F;resource&gt;\n        &lt;resource&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;\n            &lt;includes&gt;\n                &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;\n                &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;\n            &lt;&#x2F;includes&gt;\n            &lt;filtering&gt;true&lt;&#x2F;filtering&gt;\n        &lt;&#x2F;resource&gt;\n    &lt;&#x2F;resources&gt;\n&lt;&#x2F;build&gt;</code></pre>\n\n","text":"JavaWeb1、Servlet1.1、ServletContext应用1、获取初始化参数&lt;!-- 配置一些web应用初始化参数--&gt; &lt;context-param&gt; &lt;param-name&gt;url&lt;&#x2F;param-name&gt...","link":"","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"26 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaWeb\"><span class=\"toc-text\">JavaWeb</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81Servlet\"><span class=\"toc-text\">1、Servlet</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1%E3%80%81ServletContext%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">1.1、ServletContext应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%8E%B7%E5%8F%96%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">1、获取初始化参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91\"><span class=\"toc-text\">2、请求转发</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%AF%BB%E5%8F%96%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3、读取资源文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%9C%A8java%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%96%B0%E5%BB%BAproperties\"><span class=\"toc-text\">在java目录下新建properties</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%9C%A8resources%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%96%B0%E5%BB%BAproperties\"><span class=\"toc-text\">在resources目录下新建properties</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2%E3%80%81HttpServletResponse\"><span class=\"toc-text\">1.2、HttpServletResponse</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%AE%80%E5%8D%95%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">1、简单分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%B4%9F%E8%B4%A3%E5%90%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">负责向浏览器发送数据的方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%B4%9F%E8%B4%A3%E5%90%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%91%E9%80%81%E7%9B%B8%E5%BA%94%E5%A4%B4%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">负责向浏览器发送相应头的方法</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">2、常见应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%90%91%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%87%BA%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">1、向浏览器输出消息</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2%E3%80%81%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">2、下载文件</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%AE%9E%E7%8E%B0%E9%87%8D%E5%AE%9A%E5%90%91\"><span class=\"toc-text\">3、实现重定向</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E8%BD%AC%E5%8F%91%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">重定向和转发的区别</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3%E3%80%81HttpServeltRequest\"><span class=\"toc-text\">1.3、HttpServeltRequest</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81Cookie%E3%80%81Session\"><span class=\"toc-text\">2、Cookie、Session</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1%E3%80%81Cookie\"><span class=\"toc-text\">2.1、Cookie</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81JSP\"><span class=\"toc-text\">3、JSP</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFJSP\"><span class=\"toc-text\">3.1、什么是JSP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2%E3%80%81JSP%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">3.2、JSP语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#JSP%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">JSP表达式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#JSP%E8%84%9A%E6%9C%AC%E7%89%87%E6%AE%B5\"><span class=\"toc-text\">JSP脚本片段</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#JSP%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">JSP声明</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3%E3%80%81JSP%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">3.3、JSP指令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4%E3%80%819%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3.4、9大内置对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5%E3%80%81JSP%E6%A0%87%E7%AD%BE%E3%80%81JSTL%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">3.5、JSP标签、JSTL标签</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81JavaBean\"><span class=\"toc-text\">4、JavaBean</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">5、MVC三层架构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1%E3%80%81MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">5.1、MVC三层架构</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81Filter\"><span class=\"toc-text\">6、Filter</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8\"><span class=\"toc-text\">7、监听器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E7%9B%91%E5%90%AC%E5%99%A8%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">8、过滤器、监听器常见应用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9%E3%80%81JDBC\"><span class=\"toc-text\">9、JDBC</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JDBC%E5%9B%BA%E5%AE%9A%E6%AD%A5%E9%AA%A4%EF%BC%9A\"><span class=\"toc-text\">JDBC固定步骤：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%84%E7%BC%96%E8%AF%91SQL%E5%A4%84%E7%90%86\"><span class=\"toc-text\">预编译SQL处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">事务</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10%E3%80%81%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81\"><span class=\"toc-text\">10、邮件发送</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SMTP%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">SMTP协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%EF%BC%9A\"><span class=\"toc-text\">发送邮件：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#POP3%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">POP3协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E6%94%B6%E9%82%AE%E4%BB%B6%EF%BC%9A\"><span class=\"toc-text\">接收邮件：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%82%AE%E4%BB%B6%E6%94%B6%E5%8F%91%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">邮件收发原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java-%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6\"><span class=\"toc-text\">Java 发送邮件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%91%E9%80%81%E7%BA%AF%E6%96%87%E6%9C%AC%E9%82%AE%E4%BB%B6\"><span class=\"toc-text\">发送纯文本邮件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%A6%E5%9B%BE%E7%89%87%E5%92%8C%E9%99%84%E4%BB%B6%E7%9A%84%E9%82%AE%E4%BB%B6\"><span class=\"toc-text\">带图片和附件的邮件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%AB%99%E6%B3%A8%E5%86%8C%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">网站注册发送邮件实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99Servlet\"><span class=\"toc-text\">编写Servlet</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11%E3%80%81Maven\"><span class=\"toc-text\">11、Maven</span></a></li></ol></li></ol>","author":{"name":"Xoc001","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"MyBatis","date":"2022-02-10T17:38:23.826Z","updated":"2021-09-03T11:14:13.096Z","comments":true,"path":"api/articles/MyBatis.json","keywords":null,"cover":[],"text":"MyBatis1、简介 1.1、什么是 MyBatis？MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"23 mins."},"categories":[],"tags":[],"author":{"name":"Xoc001","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}