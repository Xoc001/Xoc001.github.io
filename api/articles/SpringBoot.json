{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"SpringBoot","date":"2022-02-10T17:38:23.869Z","updated":"2021-09-11T15:35:21.893Z","comments":true,"path":"api/articles/SpringBoot.json","keywords":null,"cover":[],"content":"<h1 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h1><p>2021年8月25日</p>\n<h2 id=\"第一个SpringBoot程序\"><a href=\"#第一个SpringBoot程序\" class=\"headerlink\" title=\"第一个SpringBoot程序\"></a>第一个SpringBoot程序</h2><h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h2 id=\"yaml配置注入\"><a href=\"#yaml配置注入\" class=\"headerlink\" title=\"yaml配置注入\"></a>yaml配置注入</h2><h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>SpringBoot使用一个全局的配置文件，配置文件名称是固定的</p>\n<ul>\n<li>application.properties<ul>\n<li>语法结构：key&#x3D;value</li>\n</ul>\n</li>\n<li>application.yaml<ul>\n<li>语法结构：key:空格value</li>\n</ul>\n</li>\n</ul>\n<p>配置问加你的作用：修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给自动配置好了。例如可以修改Tomcat端口号</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">server.port&#x3D;8082</code></pre>\n\n\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n\tport: 8081</code></pre>\n\n\n\n<h3 id=\"yaml概述\"><a href=\"#yaml概述\" class=\"headerlink\" title=\"yaml概述\"></a>yaml概述</h3><p>YAML是 “YAML Ain’t a Markup Language” （YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</p>\n<p><strong>这种语言以数据作为中心，而不是以标记语言为重点！</strong></p>\n<p>以前的配置文件，大多数都是使用xml来配置；比如一个简单的端口配置，我们来对比下yaml和xml</p>\n<p>xml</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;server&gt;\n\t&lt;port&gt;8081&lt;&#x2F;port&gt;\n&lt;&#x2F;server&gt;</code></pre>\n\n<p>yaml</p>\n<pre class=\"line-numbers language-YAML\" data-language=\"YAML\"><code class=\"language-YAML\">server:\n\tport: 8081</code></pre>\n\n\n\n<p><strong>yaml基础语法</strong></p>\n<ul>\n<li>语法要求严格</li>\n<li>空格不能省略</li>\n<li>以缩进来控制层级关系，做要是左边对齐的一列数据都是同一层次</li>\n<li>属性和值的大小写都是十分敏感的</li>\n</ul>\n<p><strong>字面量：普通的值  [ 数字，布尔值，字符串  ]</strong></p>\n<p>字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">k: v</code></pre>\n\n<p>注意：</p>\n<ul>\n<li><p>“ ” 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；</p>\n<p>比如 ：name: “百度\\n 一下”  输出 ：百度 换行  一下</p>\n</li>\n<li><p>‘’ 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出</p>\n<p>比如 ：name: ‘百度\\n 一下’  输出 ：百度\\n  一下</p>\n</li>\n</ul>\n<p>对象，Map(键值对)</p>\n<pre class=\"line-numbers language-YAML\" data-language=\"YAML\"><code class=\"language-YAML\">\n#对象格式 对象与属性的关系，注意缩进，。\nperson:\n\tname: abc\n\tage: 13\n\tsex: true</code></pre>\n\n<p>List</p>\n<pre class=\"line-numbers language-YAML\" data-language=\"YAML\"><code class=\"language-YAML\">list:\n\t- apple\n\t- banana\n\t- watermelon\n\t\n\t\n\n#行内写法\nlists: [cat,pig,dog]</code></pre>\n\n\n\n<h3 id=\"yaml注入配置文件\"><a href=\"#yaml注入配置文件\" class=\"headerlink\" title=\"yaml注入配置文件\"></a>yaml注入配置文件</h3><p>通过yaml文件对pojo类的属性进行赋值</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@ConfigurationProperties(perfix&#x3D;&quot;person&quot;)\t&#x2F;&#x2F;在pojo类中进行注入，会提示Spingboot配置注解器没有找到\npublic class Person &#123;\n    private String name;\n    private int age;\n    private Date birthday;\n    private List&lt;Object&gt; lists;\n    private Map&lt;String,Object&gt; map;\n    private Dog dog;\n&#125;\n\npublic class Dog&#123;\n    private String name;\n    private int age;\n&#125;</code></pre>\n\n<p>yaml配置</p>\n<pre class=\"line-numbers language-YAML\" data-language=\"YAML\"><code class=\"language-YAML\">person:\n  name: &quot;百度\\n一下&quot;\n  age: 19\n  birthday: 2021&#x2F;08&#x2F;26\n  lists:\n    - apple\n    - banana\n    - watermelon\n  map: &#123;k1: v1,k2: v2&#125;\n  dog:\n    name: &quot;旺财&quot;\n    age: 3</code></pre>\n\n<p><img src=\"/SpringBoot.assets/image-20210826165417872.png\" alt=\"image-20210826165417872\"></p>\n<p>添加依赖</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;\n    &lt;optional&gt;true&lt;&#x2F;optional&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n\n\n<h3 id=\"加载指定配置文件\"><a href=\"#加载指定配置文件\" class=\"headerlink\" title=\"加载指定配置文件\"></a>加载指定配置文件</h3><p>@PropertySource：加载指定的配置文件</p>\n<p>@ConfigurationProperties：默认从全局配置文件中获取值</p>\n<h3 id=\"配置文件占位符\"><a href=\"#配置文件占位符\" class=\"headerlink\" title=\"配置文件占位符\"></a>配置文件占位符</h3><pre class=\"line-numbers language-YAML\" data-language=\"YAML\"><code class=\"language-YAML\">\nperson:\n    name: qinjiang$&#123;random.uuid&#125; # 随机uuid\n    age: $&#123;random.int&#125;  # 随机int\n    birthday: 2021&#x2F;01&#x2F;01\n    maps: &#123;k1: v1,k2: v2&#125;\n    lists:\n      - code\n      - girl\n      - music\n    dog:\n      name: $&#123;person.hello:other&#125;_旺财\n      age: 1</code></pre>\n\n<h3 id=\"对比小结\"><a href=\"#对比小结\" class=\"headerlink\" title=\"对比小结\"></a>对比小结</h3><p>@Value这个使用起来并不友好！我们需要为每个属性单独注解赋值，比较麻烦；我们来看个功能对比图</p>\n<p><img src=\"/SpringBoot.assets/640\" alt=\"图片\"></p>\n<p>1、@ConfigurationProperties只需要写一次即可 ， @Value则需要每个字段都添加</p>\n<p>2、<strong>松散绑定</strong>：这个什么意思呢? 比如我的yml中写的&#x3D;&#x3D;<strong>last-name，这个和lastName是一样的</strong>&#x3D;&#x3D;， - 后面跟着的字母默认是大写的。这就是松散绑定。可以测试一下</p>\n<p>3、JSR303数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性</p>\n<p>4、复杂类型封装，yml中可以封装对象 ， 使用value就不支持</p>\n<p><strong>结论：</strong></p>\n<p>配置yml和配置properties都可以获取到值 ， 强烈推荐 yml；</p>\n<p>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @value；</p>\n<p>如果说，我们专门编写了一个JavaBean来和配置文件进行一一映射，就直接@configurationProperties，不要犹豫！</p>\n<h3 id=\"JSR303数据校验\"><a href=\"#JSR303数据校验\" class=\"headerlink\" title=\"JSR303数据校验\"></a>JSR303数据校验</h3><p><strong>@Validated</strong>来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。</p>\n<p>&#x3D;&#x3D;<strong>使用数据校验，可以保证数据的准确性</strong>&#x3D;&#x3D;</p>\n<p>常用的数据校验参数</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@NotNull(message&#x3D;&quot;名字不能为空&quot;)\nprivate String userName;\n@Max(value&#x3D;120,message&#x3D;&quot;年龄最大不能查过120&quot;)\nprivate int age;\n@Email(message&#x3D;&quot;邮箱格式错误&quot;)\nprivate String email;\n\n空检查\n@Null       验证对象是否为null\n@NotNull    验证对象是否不为null, 无法查检长度为0的字符串\n@NotBlank   检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.\n@NotEmpty   检查约束元素是否为NULL或者是EMPTY.\n    \nBooelan检查\n@AssertTrue     验证 Boolean 对象是否为 true  \n@AssertFalse    验证 Boolean 对象是否为 false  \n    \n长度检查\n@Size(min&#x3D;, max&#x3D;) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  \n@Length(min&#x3D;, max&#x3D;) string is between min and max included.\n\n日期检查\n@Past       验证 Date 和 Calendar 对象是否在当前时间之前  \n@Future     验证 Date 和 Calendar 对象是否在当前时间之后  \n@Pattern    验证 String 对象是否符合正则表达式的规则</code></pre>\n\n\n\n<h2 id=\"自动配置原理\"><a href=\"#自动配置原理\" class=\"headerlink\" title=\"自动配置原理\"></a>自动配置原理</h2><p>根据当前不同条件判断，决定这个配置类是否生效！</p>\n<ul>\n<li>一旦这个配置类生效；这个配置类就会给容器中添加各种组件。</li>\n<li>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的。</li>\n<li>所有在配置文件中能配置的属性都是在XXXproperties类中封装的；</li>\n<li>配置文件能配置什么就可以参照某个功能对应的这个属性类。</li>\n</ul>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">&#x2F;&#x2F;从配置文件中获取指定的值和bean的属性进行绑定\n@ConfigrationProperties(prefix&#x3D;&quot;spring.http&quot;)\npublic class HttpProperties&#123;\n    \n&#125;</code></pre>\n\n<p><strong>这就是自动装配的原理！</strong></p>\n<ol>\n<li>SpringBoot启动会加载大量的自动配置类</li>\n<li>我们看我们需要的功能有没有在SpringBoot默认写好的自动类当中</li>\n<li>我们再来看这个自动配置类中到底配置了哪些组件；</li>\n<li>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；</li>\n</ol>\n<p><strong>xxxAutoConfiguration：自动配置类</strong>；给容器中添加组件</p>\n<p><strong>xxxxProperties：封装配置文件中相关属性。</strong></p>\n<h2 id=\"了解：-Conditional\"><a href=\"#了解：-Conditional\" class=\"headerlink\" title=\"了解：@Conditional\"></a>了解：@Conditional</h2><p>了解完自动装配的原理后，我们来关注一个细节问题，<strong>自动配置类必须在一定的条件下才能生效；</strong></p>\n<p><strong>@Conditional派生注解（Spring注解版原生的@Conditional作用）</strong></p>\n<p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>\n<p><img src=\"/SpringBoot.assets/640\" alt=\"图片\"></p>\n<p><strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。</strong></p>\n<p>我们怎么知道哪些自动配置类生效？</p>\n<p><strong>我们可以通过启用 debug&#x3D;true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#开启springboot的调试类debug&#x3D;true</code></pre>\n\n<p><strong>Positive matches:（自动配置类启用的：正匹配）</strong></p>\n<p><strong>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）</strong></p>\n<p><strong>Unconditional classes: （没有条件的类）</strong></p>\n<h2 id=\"Web开发静态资源处理\"><a href=\"#Web开发静态资源处理\" class=\"headerlink\" title=\"Web开发静态资源处理\"></a>Web开发静态资源处理</h2><p>SpringBoot中，SpringMVC的web配置都在WebMvcAutoConfiguration 这个配置类里面；有一个方法：addResourceHandlers</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Override\npublic void addResourceHandlers(ResourceHandlerRegistry registry) &#123;\n    if (!this.resourceProperties.isAddMappings()) &#123;\n        logger.debug(&quot;Default resource handling disabled&quot;);\n        return;\n    &#125;\n    addResourceHandler(registry, &quot;&#x2F;webjars&#x2F;**&quot;, &quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;webjars&#x2F;&quot;);\n    addResourceHandler(registry, this.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;\n        registration.addResourceLocations(this.resourceProperties.getStaticLocations());\n        if (this.servletContext !&#x3D; null) &#123;\n            ServletContextResource resource &#x3D; new ServletContextResource(this.servletContext, SERVLET_LOCATION);\n            registration.addResourceLocations(resource);\n        &#125;\n    &#125;);\n&#125;</code></pre>\n\n<p>读一下源代码：比如所有的 &#x2F;webjars&#x2F;** ， 都需要去 classpath:&#x2F;META-INF&#x2F;resources&#x2F;webjars&#x2F; 找对应的资源；</p>\n<h3 id=\"什么是webjars-呢？\"><a href=\"#什么是webjars-呢？\" class=\"headerlink\" title=\"什么是webjars 呢？\"></a>什么是webjars 呢？</h3><p>Webjars本质就是以jar包的方式引入我们的静态资源 ， 我们以前要导入一个静态资源文件，直接导入即可。</p>\n<p>使用SpringBoot需要使用Webjars，我们可以去搜索一下：</p>\n<p>网站：<a href=\"https://www.webjars.org/\">https://www.webjars.org</a> </p>\n<p>要使用jQuery，我们只要要引入jQuery对应版本的pom依赖即可！</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.webjars&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;jquery&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.4.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>导入完毕，查看webjars目录结构，并访问Jquery.js文件！</p>\n<p><img src=\"/SpringBoot.assets/image-20210828180010395.png\" alt=\"image-20210828180010395\"></p>\n<p>访问：只要是静态资源，SpringBoot就会去对应的路径寻找资源，我们这里访问：<a href=\"http://localhost:8080/webjars/jquery/3.4.1/jquery.js\">http://localhost:8080/webjars/jquery/3.4.1/jquery.js</a></p>\n<h3 id=\"第二种静态资源映射规则\"><a href=\"#第二种静态资源映射规则\" class=\"headerlink\" title=\"第二种静态资源映射规则\"></a>第二种静态资源映射规则</h3><p><img src=\"/SpringBoot.assets/image-20210828180324455.png\" alt=\"image-20210828180324455\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static class Resources &#123;\n\n    private static final String[] CLASSPATH_RESOURCE_LOCATIONS &#x3D; &#123; &quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;,                           &quot;classpath:&#x2F;resources&#x2F;&quot;, &quot;classpath:&#x2F;static&#x2F;&quot;, &quot;classpath:&#x2F;public&#x2F;&quot; &#125;;\n&#125;\n</code></pre>\n\n<p>结论：以下四个路径存放的静态资源可以被识别。 <strong>优先级分先后</strong></p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;\n&quot;classpath:&#x2F;resources&#x2F;&quot;\n&quot;classpath:&#x2F;static&#x2F;&quot;\n&quot;classpath:&#x2F;public&#x2F;&quot;</code></pre>\n\n<p>我们可以在resources根目录下新建对应的文件夹，都可以存放我们的静态文件；</p>\n<p>比如我们访问 <a href=\"http://localhost:8080/1.js\">http://localhost:8080/1.js</a> , 他就会去这些文件夹中寻找对应的静态资源文件；</p>\n<h2 id=\"首页定制\"><a href=\"#首页定制\" class=\"headerlink\" title=\"首页定制\"></a>首页定制</h2><p>Spirng源码中的欢迎页映射</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Bean\npublic WelcomePageHandlerMapping welcomePageHandlerMapping(ApplicationContext applicationContext,\n                                                           FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider) &#123;\n    WelcomePageHandlerMapping welcomePageHandlerMapping &#x3D; new WelcomePageHandlerMapping(\n        new TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),\n        this.mvcProperties.getStaticPathPattern());\n    welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));\n    welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());\n    return welcomePageHandlerMapping;\n&#125;</code></pre>\n\n<p>进入其中的getWelcomePage()方法</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">private Resource getWelcomePage() &#123;\n    for (String location : this.resourceProperties.getStaticLocations()) &#123;\n        Resource indexHtml &#x3D; getIndexHtml(location);\n        if (indexHtml !&#x3D; null) &#123;\n            return indexHtml;\n        &#125;\n    &#125;\n    ServletContext servletContext &#x3D; getServletContext();\n    if (servletContext !&#x3D; null) &#123;\n        return getIndexHtml(new ServletContextResource(servletContext, SERVLET_LOCATION));\n    &#125;\n    return null;\n&#125;\n\nprivate Resource getIndexHtml(Resource location) &#123;\n    try &#123;\n        Resource resource &#x3D; location.createRelative(&quot;index.html&quot;);\n        if (resource.exists() &amp;&amp; (resource.getURL() !&#x3D; null)) &#123;\n            return resource;\n        &#125;\n    &#125;\n    catch (Exception ex) &#123;\n    &#125;\n    return null;\n&#125;</code></pre>\n\n<p>欢迎页，静态资源文件夹下所有的index.html页面会被 &#x2F;**映射。</p>\n<p>比如我访问  <a href=\"http://localhost:8080/\">http://localhost:8080/</a> ，就会找静态资源文件夹下的 index.html</p>\n<p>新建一个 index.html ，在我们上面的3个目录中任意一个；然后访问测试  <a href=\"http://localhost:8080/\">http://localhost:8080/</a>  看结果！</p>\n<h3 id=\"扩展使用SpringMVC\"><a href=\"#扩展使用SpringMVC\" class=\"headerlink\" title=\"扩展使用SpringMVC\"></a><strong>扩展使用SpringMVC</strong></h3><p>官方文档如下：</p>\n<p>If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.</p>\n<p>我们要做的就是编写一个@Configuration注解类，并且类型要为WebMvcConfigurer，还不能标注@EnableWebMvc注解；我们去自己写一个；我们新建一个包叫config，写一个类MyMvcConfig；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;应为类型要求为WebMvcConfigurer，所以我们实现其接口\n&#x2F;&#x2F;可以使用自定义类扩展MVC的功能\n@Configuration\npublic class MyMvcConfig implements WebMvcConfigurer &#123;\n\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) &#123;\n        &#x2F;&#x2F; 浏览器发送&#x2F;test ， 就会跳转到test页面；\n        registry.addViewController(&quot;&#x2F;test&quot;).setViewName(&quot;test&quot;);\n    &#125;\n&#125;</code></pre>\n\n\n\n\n\n<h2 id=\"页面国际化\"><a href=\"#页面国际化\" class=\"headerlink\" title=\"页面国际化\"></a>页面国际化</h2><p><strong>网站会涉及多语言切换，需要实现国际化。</strong></p>\n<p>需要将IDEA中统一设置properties的编码问题</p>\n<p><img src=\"/SpringBoot.assets/image-20210831184936956.png\" alt=\"image-20210831184936956\"></p>\n<p>编写国际化配置文件，抽取页面需要显示的国际化页面消息。</p>\n<h3 id=\"配置文件编写\"><a href=\"#配置文件编写\" class=\"headerlink\" title=\"配置文件编写\"></a>配置文件编写</h3><ol>\n<li>在resources资源文件夹下创建一个i18n目录，存放国际化配置文件</li>\n<li>建立一个login.properties，还有一个login_zh_CN.properties；发现IDEA自动识别了我们要做国际化操作；文件夹变了</li>\n</ol>\n<p><img src=\"/SpringBoot.assets/image-20210831185254706.png\" alt=\"image-20210831185254706\"></p>\n<ol start=\"3\">\n<li><p>弹出添加页面，添加en_US配置。</p>\n</li>\n<li><p>编写配置，在配置界面有一个Resource Bundle视图</p>\n<img src=\"SpringBoot.assets/image-20210831185422133.png\" alt=\"image-20210831185422133\" style=\"zoom:67%;\" />\n\n<p>在视图中依次添加属性。</p>\n<p><img src=\"/SpringBoot.assets/image-20210831185509910.png\" alt=\"image-20210831185509910\"></p>\n</li>\n</ol>\n<h3 id=\"配置文件生效探究\"><a href=\"#配置文件生效探究\" class=\"headerlink\" title=\"配置文件生效探究\"></a>配置文件生效探究</h3><p>涉及到国际化的类：<strong>MessageSourceAutoConfiguration</strong></p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Bean\n\tpublic MessageSource messageSource(MessageSourceProperties properties) &#123;\n\t\tResourceBundleMessageSource messageSource &#x3D; new ResourceBundleMessageSource();\n\t\tif (StringUtils.hasText(properties.getBasename())) &#123;\n\t\t\tmessageSource.setBasenames(StringUtils\n\t\t\t\t\t.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));\n\t\t&#125;\n\t\tif (properties.getEncoding() !&#x3D; null) &#123;\n\t\t\tmessageSource.setDefaultEncoding(properties.getEncoding().name());\n\t\t&#125;\n\t\tmessageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());\n\t\tDuration cacheDuration &#x3D; properties.getCacheDuration();\n\t\tif (cacheDuration !&#x3D; null) &#123;\n\t\t\tmessageSource.setCacheMillis(cacheDuration.toMillis());\n\t\t&#125;\n\t\tmessageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());\n\t\tmessageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());\n\t\treturn messageSource;\n\t&#125;</code></pre>\n\n<p>由此得：我们需要在application.properties中配置message路径</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">spring.message.basename&#x3D;i18n.login  # 放置在i18n路径下得配置。</code></pre>\n\n\n\n<h3 id=\"配置页面国际化的值\"><a href=\"#配置页面国际化的值\" class=\"headerlink\" title=\"配置页面国际化的值\"></a>配置页面国际化的值</h3><p>使用Thymeleaf模板，找到message取值的操作为#{}。</p>\n<p><img src=\"/SpringBoot.assets/image-20210831190211074.png\" alt=\"image-20210831190211074\"></p>\n<h3 id=\"配置国际化解析\"><a href=\"#配置国际化解析\" class=\"headerlink\" title=\"配置国际化解析\"></a>配置国际化解析</h3><p>在Spring中有一个国际化的Locale(区域信息对象)类，里面有一个<strong>LocaleRosolver</strong>的解析器</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public LocaleResolver localeResolver() &#123;\n    if (this.webProperties.getLocaleResolver() &#x3D;&#x3D; WebProperties.LocaleResolver.FIXED) &#123;\n        return new FixedLocaleResolver(this.webProperties.getLocale());\n    &#125;\n    if (this.mvcProperties.getLocaleResolver() &#x3D;&#x3D; WebMvcProperties.LocaleResolver.FIXED) &#123;\n        return new FixedLocaleResolver(this.mvcProperties.getLocale());\n    &#125;\n    AcceptHeaderLocaleResolver localeResolver &#x3D; new AcceptHeaderLocaleResolver();\n    Locale locale &#x3D; (this.webProperties.getLocale() !&#x3D; null) ? this.webProperties.getLocale()\n        : this.mvcProperties.getLocale();\n    localeResolver.setDefaultLocale(locale);\n    return localeResolver;\n&#125;</code></pre>\n\n<p>AcceptHeaderLocaleResolver中的resolveLocale方法</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public Locale resolveLocale(HttpServletRequest request) &#123;\n     Locale defaultLocale &#x3D; this.getDefaultLocale();\n     if (defaultLocale !&#x3D; null &amp;&amp; request.getHeader(&quot;Accept-Language&quot;) &#x3D;&#x3D; null) &#123;\n         return defaultLocale;\n     &#125; else &#123;\n         Locale requestLocale &#x3D; request.getLocale();\n         List&lt;Locale&gt; supportedLocales &#x3D; this.getSupportedLocales();\n         if (!supportedLocales.isEmpty() &amp;&amp; !supportedLocales.contains(requestLocale)) &#123;\n             Locale supportedLocale &#x3D; this.findSupportedLocale(request, supportedLocales);\n             if (supportedLocale !&#x3D; null) &#123;\n                 return supportedLocale;\n             &#125; else &#123;\n                 return defaultLocale !&#x3D; null ? defaultLocale : requestLocale;\n             &#125;\n         &#125; else &#123;\n             return requestLocale;\n         &#125;\n     &#125;\n &#125;</code></pre>\n\n<p>需要使国际化资源生效，就需要配置我们自己的Locale，使其生效。</p>\n<p>修改前端页面跳转连接。</p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;a class&#x3D;&quot;btn btn-sm&quot; th:href&#x3D;&quot;@&#123;&#x2F;index.html(lang&#x3D;zh_CN)&#125;&quot;&gt;中文&lt;&#x2F;a&gt;\n&lt;a class&#x3D;&quot;btn btn-sm&quot; th:href&#x3D;&quot;@&#123;&#x2F;index.html(lang&#x3D;en_US)&#125;&quot;&gt;English&lt;&#x2F;a&gt;</code></pre>\n\n<p>编写对应处理的组件类</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.config;\n\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.servlet.LocaleResolver;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.util.Locale;\n\npublic class MyLocaleResolver implements LocaleResolver &#123;\n    @Override\n    public Locale resolveLocale(HttpServletRequest httpServletRequest) &#123;\n        String language &#x3D; httpServletRequest.getParameter(&quot;lang&quot;);\n        &#x2F;&#x2F;如果没有就是用默认配置\n        Locale locale &#x3D; Locale.getDefault();\n        if(!StringUtils.hasText(language))&#123;\n\n            &#x2F;&#x2F;ZH_CN\n            String [] split &#x3D; language.split(&quot;_&quot;);\n            &#x2F;&#x2F;分割国家和地区。\n            locale&#x3D; new Locale(split[0],split[1]);\n        &#125;\n        return locale;\n    &#125;\n\n    @Override\n    public void setLocale(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale) &#123;\n\n    &#125;\n&#125;\n</code></pre>\n\n<p>为了使国际化信息能够生效，需要配置这个组件，在自定义的MyMvcConfig类下添加Bean</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Configuration\npublic class MyMvcConfig implements WebMvcConfigurer &#123;\n\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) &#123;\n        registry.addViewController(&quot;&#x2F;&quot;).setViewName(&quot;index&quot;);\n        registry.addViewController(&quot;&#x2F;index.html&quot;).setViewName(&quot;index&quot;);\n    &#125;\n\n    \n    &#x2F;&#x2F;添加国际化。\n    @Bean\n    public LocaleResolver localeResolver()&#123;\n        return new MyLocaleResolver();\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"整合JDBC使用\"><a href=\"#整合JDBC使用\" class=\"headerlink\" title=\"整合JDBC使用\"></a>整合JDBC使用</h2><ol>\n<li>创建测试项目测试数据源</li>\n</ol>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n    &lt;scope&gt;runtime&lt;&#x2F;scope&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n\n\n<ol start=\"2\">\n<li>编写yaml配置文件连接数据库</li>\n</ol>\n<pre class=\"line-numbers language-YAML\" data-language=\"YAML\"><code class=\"language-YAML\">spring:\n  datasource:\n    username: root\n    password:\n    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?useSSL&#x3D;true&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8\n    driver-class-name: com.mysql.cj.jdbc.Driver</code></pre>\n\n\n\n<ol start=\"3\">\n<li><p>测试类进行测试</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package my;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport javax.sql.DataSource;\nimport java.sql.Connection;\nimport java.sql.SQLException;\n\n@SpringBootTest\nclass DemoApplicationTests &#123;\n\n    @Autowired\n    DataSource dataSource;\n    @Test\n    void contextLoads() throws SQLException &#123;\n        System.out.println(dataSource.getClass());\n\n        Connection connection &#x3D; dataSource.getConnection();\n        System.out.println(connection);\n        connection.close();\n\n    &#125;\n\n&#125;\n</code></pre>\n\n<p>结果：我们可以看到他默认给我们配置的数据源为 : class com.zaxxer.hikari.HikariDataSource ， 我们并没有手动配置</p>\n<p>我们来全局搜索一下，找到数据源的所有自动配置都在 ：DataSourceAutoConfiguration文件：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Import(\n    &#123;Hikari.class, Tomcat.class, Dbcp2.class, Generic.class, DataSourceJmxConfiguration.class&#125;\n)\nprotected static class PooledDataSourceConfiguration &#123;\n    protected PooledDataSourceConfiguration() &#123;\n    &#125;\n&#125;</code></pre>\n\n<p>这里导入的类都在 DataSourceConfiguration 配置类下，可以看出 Spring Boot 2.2.5 默认使用HikariDataSource 数据源，而以前版本，如 Spring Boot 1.5 默认使用 org.apache.tomcat.jdbc.pool.DataSource 作为数据源；</p>\n<p>&#x3D;&#x3D;<strong>HikariDataSource 号称 Java WEB 当前速度最快的数据源，相比于传统的 C3P0 、DBCP、Tomcat jdbc 等连接池更加优秀；可以使用 spring.datasource.type 指定自定义的数据源类型，值为 要使用的连接池实现的完全限定名。</strong>&#x3D;&#x3D;</p>\n<p>关于数据源我们并不做介绍，有了数据库连接，显然就可以 CRUD 操作数据库了。但是我们需要先了解一个对象 JdbcTemplate</p>\n<h3 id=\"JDBCTemplate\"><a href=\"#JDBCTemplate\" class=\"headerlink\" title=\"JDBCTemplate\"></a>JDBCTemplate</h3><p>1、有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库；</p>\n<p>2、即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即JdbcTemplate。</p>\n<p>3、数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</p>\n<p>4、Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</p>\n<p>5、JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</p>\n<p><strong>JdbcTemplate主要提供以下几类方法：</strong></p>\n<ul>\n<li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li>\n<li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；</li>\n<li>query方法及queryForXXX方法：用于执行查询相关语句；</li>\n<li>call方法：用于执行存储过程、函数相关语句。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"x3D-x3D-JDBCTemplate-x3D-x3D\"><a href=\"#x3D-x3D-JDBCTemplate-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;JDBCTemplate&#x3D;&#x3D;\"></a>&#x3D;&#x3D;JDBCTemplate&#x3D;&#x3D;</h3><p>1、有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库；</p>\n<p>2、即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即JdbcTemplate。</p>\n<p>3、数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</p>\n<p>4、Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</p>\n<p>5、JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</p>\n<p><strong>JdbcTemplate主要提供以下几类方法：</strong></p>\n<ul>\n<li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li>\n<li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；</li>\n<li>query方法及queryForXXX方法：用于执行查询相关语句；</li>\n<li>call方法：用于执行存储过程、函数相关语句。</li>\n</ul>\n<h2 id=\"整合Druid使用\"><a href=\"#整合Druid使用\" class=\"headerlink\" title=\"整合Druid使用\"></a>整合Druid使用</h2><h3 id=\"Druid简介\"><a href=\"#Druid简介\" class=\"headerlink\" title=\"Druid简介\"></a>Druid简介</h3><p>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</p>\n<p>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。</p>\n<p>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。</p>\n<p>Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。</p>\n<p>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web 上最优秀的数据源，我们来重点介绍 Spring Boot 如何集成 Druid 数据源，如何实现数据库监控。</p>\n<p>Github地址：<a href=\"https://github.com/alibaba/druid/\">https://github.com/alibaba/druid/</a></p>\n<h3 id=\"配置数据源\"><a href=\"#配置数据源\" class=\"headerlink\" title=\"配置数据源\"></a><strong>配置数据源</strong></h3><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.alibaba&#x2F;druid --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.2.6&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h3 id=\"切换数据源\"><a href=\"#切换数据源\" class=\"headerlink\" title=\"切换数据源\"></a><strong>切换数据源</strong></h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  datasource:\n    username: root\n    password:\n    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?useSSL&#x3D;true&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource</code></pre>\n\n<h3 id=\"配置Druid\"><a href=\"#配置Druid\" class=\"headerlink\" title=\"配置Druid\"></a><strong>配置Druid</strong></h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  datasource:\n    username: root\n    password:\n    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?useSSL&#x3D;true&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource\n\n\n    #Spring Boot 默认是不注入这些属性值的，需要自己绑定\n    #druid 数据源专有配置\n    initialSize: 5\n    minIdle: 5\n    maxActive: 20\n    maxWait: 60000\n    timeBetweenEvictionRunsMillis: 60000\n    minEvictableIdleTimeMillis: 300000\n    validationQuery: SELECT 1 FROM DUAL\n    testWhileIdle: true\n    testOnBorrow: false\n    testOnReturn: false\n    poolPreparedStatements: true\n\n    #配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入\n    #如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority\n    #则导入 log4j 依赖即可，Maven 地址：https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;log4j&#x2F;log4j\n    filters: stat,wall,log4j\n    maxPoolPreparedStatementPerConnectionSize: 20\n    useGlobalDataSourceStat: true\n    connectionProperties: druid.stat.mergeSql&#x3D;true;druid.stat.slowSqlMillis&#x3D;500</code></pre>\n\n<h3 id=\"导入Log4j依赖\"><a href=\"#导入Log4j依赖\" class=\"headerlink\" title=\"导入Log4j依赖\"></a><strong>导入Log4j依赖</strong></h3><pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;dependency&gt;\n    &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.2.17&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>为DruidDataSource绑定全局配置文件中的参数，再添加到容器中，而不再使用SpringBoot自动生成，需要添加自己的DruidDataSource组件到容器中，并绑定属性。</p>\n<p>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装 路由器 时，人家也提供了一个默认的 web 页面。</p>\n<p>所以第一步需要设置 Druid 的后台管理页面，比如 登录账号、密码 等；配置后台管理；</p>\n<p>根据需求配置(配置Druid web 监控 filter 过滤器)</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.config;\n\nimport com.alibaba.druid.pool.DruidDataSource;\nimport com.alibaba.druid.support.http.StatViewServlet;\nimport com.alibaba.druid.support.http.WebStatFilter;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport javax.sql.DataSource;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Configuration\npublic class DruidConfig &#123;\n\n    @ConfigurationProperties(prefix &#x3D; &quot;spring.datasource&quot;)\n    @Bean\n    public DataSource druidDataSource()&#123;\n        return new DruidDataSource();\n    &#125;\n\n    &#x2F;&#x2F;配置数据源监控\n    &#x2F;&#x2F;后台监控功能\n    @Bean\n    public ServletRegistrationBean statViewServlet()&#123;\n        ServletRegistrationBean&lt;StatViewServlet&gt; bean &#x3D; new ServletRegistrationBean&lt;&gt;(new StatViewServlet(), &quot;&#x2F;druid&#x2F;*&quot;);\n\n        &#x2F;&#x2F;后台需要有人登录，账号密码设置\n        HashMap&lt;String, String&gt; initParameters &#x3D; new HashMap&lt;&gt;();\n        &#x2F;&#x2F;增加配置\n        initParameters.put(&quot;loginUsername&quot;,&quot;admin&quot;);\n        initParameters.put(&quot;loginPassword&quot;,&quot;123456&quot;);\n        &#x2F;&#x2F;允许访问\n        initParameters.put(&quot;allow&quot;,&quot;&quot;);     &#x2F;&#x2F;全部\n\n        &#x2F;&#x2F;禁止访问\n&#x2F;&#x2F;        initParameters.put(&quot;姓名&quot;,&quot;IP地址&quot;)&#x2F;&#x2F;\n\n        bean.setInitParameters(initParameters);\n\n        return bean;\n    &#125;\n\n    &#x2F;&#x2F;filter\n    @Bean\n    public FilterRegistrationBean webStatFilter()&#123;\n        FilterRegistrationBean bean &#x3D; new FilterRegistrationBean();\n\n        bean.setFilter(new WebStatFilter());\n        &#x2F;&#x2F;过滤请求设置；\n        HashMap&lt;String, String&gt; initParameters &#x3D; new HashMap&lt;&gt;();\n        &#x2F;&#x2F;不进行统计。\n        initParameters.put(&quot;exclusions&quot;,&quot;*.js,*.css,&#x2F;druid&#x2F;*&quot;);\n\n\n        bean.setInitParameters(initParameters);\n\n\n        return bean;\n    &#125;\n\n&#125;\n</code></pre>\n\n<p>配置完毕后可以通过localhost:8080&#x2F;druid&#x2F;</p>\n<p><img src=\"/SpringBoot.assets/image-20210902214938636.png\" alt=\"image-20210902214938636\"></p>\n<p>通过设置的用户名，密码进行登录，进入后台界面.</p>\n<p><img src=\"/SpringBoot.assets/image-20210902215032254.png\" alt=\"image-20210902215032254\"></p>\n<h2 id=\"整合Mybatis\"><a href=\"#整合Mybatis\" class=\"headerlink\" title=\"整合Mybatis\"></a>整合Mybatis</h2><h2 id=\"SpringSecurity\"><a href=\"#SpringSecurity\" class=\"headerlink\" title=\"SpringSecurity\"></a>SpringSecurity</h2><p>&#x3D;&#x3D;集成SpringSecurity&#x3D;&#x3D;</p>\n<h3 id=\"安全简介\"><a href=\"#安全简介\" class=\"headerlink\" title=\"安全简介\"></a>安全简介</h3><p>在 Web 开发中，安全一直是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。如果在应用开发的后期才考虑安全的问题，就可能陷入一个两难的境地：一方面，应用存在严重的安全漏洞，无法满足用户的要求，并可能造成用户的隐私数据被攻击者窃取；另一方面，应用的基本架构已经确定，要修复安全漏洞，可能需要对系统的架构做出比较重大的调整，因而需要更多的开发时间，影响应用的发布进程。因此，从应用开发的第一天就应该把安全相关的因素考虑进来，并在整个应用的开发过程中。</p>\n<p>市面上存在比较有名的：Shiro，Spring Security ！</p>\n<p>这里需要阐述一下的是，每一个框架的出现都是为了解决某一问题而产生了，那么Spring Security框架的出现是为了解决什么问题呢？</p>\n<p>首先我们看下它的官网介绍：Spring Security官网地址</p>\n<p>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.</p>\n<p>Spring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirements</p>\n<p>Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。它实际上是保护基于spring的应用程序的标准。</p>\n<p>Spring Security是一个框架，侧重于为Java应用程序提供身份验证和授权。与所有Spring项目一样，Spring安全性的真正强大之处在于它可以轻松地扩展以满足定制需求</p>\n<p>从官网的介绍中可以知道这是一个权限框架。想我们之前做项目是没有使用框架是怎么控制权限的？对于权限 一般会细分为功能权限，访问权限，和菜单权限。代码会写的非常的繁琐，冗余。</p>\n<p>怎么解决之前写权限代码繁琐，冗余的问题，一些主流框架就应运而生而Spring Scecurity就是其中的一种。</p>\n<p>Spring 是一个非常流行和成功的 Java 应用开发框架。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。一般来说，Web 应用的安全性包括用户认证（Authentication）和用户授权（Authorization）两个部分。用户认证指的是验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。</p>\n<p>对于上面提到的两种应用情景，Spring Security 框架都有很好的支持。在用户认证方面，Spring Security 框架支持主流的认证方式，包括 HTTP 基本认证、HTTP 表单验证、HTTP 摘要认证、OpenID 和 LDAP 等。在用户授权方面，Spring Security 提供了基于角色的访问控制和访问控制列表（Access Control List，ACL），可以对应用中的领域对象进行细粒度的控制。</p>\n<p>测试</p>\n<ol>\n<li><p>创建springboot 项目 添加web，thymeleaf模块。</p>\n</li>\n<li><p>导入静态资源</p>\n</li>\n<li><p>controller跳转</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package my.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class RouterController &#123;\n\n    @RequestMapping(&#123;&quot;&#x2F;&quot;,&quot;&#x2F;index&quot;&#125;)\n    public String index()&#123;\n        return &quot;index&quot;;\n    &#125;\n\n    @RequestMapping(&quot;&#x2F;toLogin&quot;)\n    public String login()&#123;\n        return &quot;views&#x2F;login&quot;;\n    &#125;\n\n    @RequestMapping(&quot;&#x2F;level1&#x2F;&#123;id&#125;&quot;)\n    public String level1(@PathVariable(&quot;id&quot;)int id)&#123;\n        return &quot;views&#x2F;level1&#x2F;&quot;+id;\n    &#125;\n\n    @RequestMapping(&quot;&#x2F;level2&#x2F;&#123;id&#125;&quot;)\n    public String level2(@PathVariable(&quot;id&quot;)int id)&#123;\n        return &quot;views&#x2F;level2&#x2F;&quot;+id;\n    &#125;\n\n    @RequestMapping(&quot;&#x2F;level3&#x2F;&#123;id&#125;&quot;)\n    public String level3(@PathVariable(&quot;id&quot;)int id)&#123;\n        return &quot;views&#x2F;level3&#x2F;&quot;+id;\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li><p>测试实验环境</p>\n</li>\n</ol>\n<h3 id=\"认识SpringSecurity\"><a href=\"#认识SpringSecurity\" class=\"headerlink\" title=\"认识SpringSecurity\"></a>认识SpringSecurity</h3><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入 spring-boot-starter-security 模块，进行少量的配置，即可实现强大的安全管理！</p>\n<p>记住几个类：</p>\n<ul>\n<li>WebSecurityConfigurerAdapter：自定义Security策略</li>\n<li>AuthenticationManagerBuilder：自定义认证策略</li>\n<li>@EnableWebSecurity：开启WebSecurity模式</li>\n</ul>\n<p>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。</p>\n<p><strong>“认证”（Authentication）</strong></p>\n<p>身份验证是关于验证您的凭据，如用户名&#x2F;用户ID和密码，以验证您的身份。</p>\n<p>身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。</p>\n<p> <strong>“授权” （Authorization）</strong></p>\n<p>授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。</p>\n<p>这个概念是通用的，而不是只在Spring Security 中存在。</p>\n<h3 id=\"认证和授权\"><a href=\"#认证和授权\" class=\"headerlink\" title=\"认证和授权\"></a>认证和授权</h3><p>目前，我们的测试环境是谁都可以访问的，我们使用SpringSecurity增加上认证和授权的功能</p>\n<ol>\n<li><p>引入Spring Security模块</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n\n</li>\n<li><p>编写Spring Security配置类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package my.config;\n\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n@EnableWebSecurity\t\t&#x2F;&#x2F;开启WebSecurity模式\npublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123;\n\n    &#x2F;&#x2F;链式编程\n    @Override\n    protected void configure(HttpSecurity http) throws Exception &#123;\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>定制请求的授权规则</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.config;\n\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123;\n\n    &#x2F;&#x2F;链式编程\n    @Override\n    protected void configure(HttpSecurity http) throws Exception &#123;\n        &#x2F;&#x2F;首页所有人可以访问，功能页只对应优先权的人才能访问\n\n        &#x2F;&#x2F;请求授权的规则\n        http.authorizeRequests()\n                .antMatchers(&quot;&#x2F;&quot;).permitAll()\n                .antMatchers(&quot;&#x2F;level1&#x2F;**&quot;).hasRole(&quot;vip1&quot;)\n                .antMatchers(&quot;&#x2F;level2&#x2F;**&quot;).hasRole(&quot;vip2&quot;)\n                .antMatchers(&quot;&#x2F;level3&#x2F;**&quot;).hasRole(&quot;vip3&quot;);\n\n        &#x2F;&#x2F;没有权限，默认跳转到登录页,需要开启登录页面\n        http.formLogin();\n\n\n        http.logout().logoutSuccessUrl(&quot;&#x2F;&quot;);\n    &#125;\n&#125;\n</code></pre>\n\n\n</li>\n<li><p>测试，这时除了首页我们哪里都进不去，因为目前没有登录角色，请求需要登录的角色拥有对应的限权才可以。</p>\n</li>\n<li><p>在configure中添加以下配置，开启自动配置的登录功能</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package my.config;\n\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123;\n\n    &#x2F;&#x2F;链式编程\n    @Override\n    protected void configure(HttpSecurity http) throws Exception &#123;\n        &#x2F;&#x2F;首页所有人可以访问，功能页只对应优先权的人才能访问\n\n        &#x2F;&#x2F;请求授权的规则\n        http.authorizeRequests()\n                .antMatchers(&quot;&#x2F;&quot;).permitAll()\n                .antMatchers(&quot;&#x2F;level1&#x2F;**&quot;).hasRole(&quot;vip1&quot;)\n                .antMatchers(&quot;&#x2F;level2&#x2F;**&quot;).hasRole(&quot;vip2&quot;)\n                .antMatchers(&quot;&#x2F;level3&#x2F;**&quot;).hasRole(&quot;vip3&quot;);\n\n        &#x2F;&#x2F;没有权限，默认跳转到登录页,需要开启登录页面\n        http.formLogin();\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li><p>测试：无限权时会跳转到登录页面。</p>\n<p><img src=\"/SpringBoot.assets/image-20210906165030357.png\" alt=\"image-20210906165030357\"></p>\n</li>\n<li><p>自定义登录规则：需要将&#x3D;&#x3D;<strong>前端传来的密码进行某种方式的加密</strong>&#x3D;&#x3D;，否则就无法登录。</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.config;\n\n        import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n        import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n        import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n        import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n        import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123;\n\n    &#x2F;&#x2F;链式编程\n    @Override\n    protected void configure(HttpSecurity http) throws Exception &#123;\n        &#x2F;&#x2F;首页所有人可以访问，功能页只对应优先权的人才能访问\n\n        &#x2F;&#x2F;请求授权的规则\n        http.authorizeRequests()\n                .antMatchers(&quot;&#x2F;&quot;).permitAll()\n                .antMatchers(&quot;&#x2F;level1&#x2F;**&quot;).hasRole(&quot;vip1&quot;)\n                .antMatchers(&quot;&#x2F;level2&#x2F;**&quot;).hasRole(&quot;vip2&quot;)\n                .antMatchers(&quot;&#x2F;level3&#x2F;**&quot;).hasRole(&quot;vip3&quot;);\n\n        &#x2F;&#x2F;没有权限，默认跳转到登录页,需要开启登录页面\n        http.formLogin();\n\n\n        http.logout().logoutSuccessUrl(&quot;&#x2F;&quot;);\n    &#125;\n\n    &#x2F;&#x2F;认证，SpringBoot 2.1.x可以直接使用\n    &#x2F;&#x2F;密码编码 passwordEncoder\n    &#x2F;&#x2F;在Spring security 5.0+中新增了很多加密方法~\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;\n\n        &#x2F;&#x2F;数据正常从数据库中读\n        auth.inMemoryAuthentication().passwordEncoder(new BCryptPasswordEncoder())\n                .withUser(&quot;xoc001&quot;).password(new BCryptPasswordEncoder().encode(&quot;123456&quot;)).roles(&quot;vip2&quot;,&quot;vip3&quot;)\n                .and()\n                .withUser(&quot;root&quot;).password(new BCryptPasswordEncoder().encode(&quot;123456&quot;)).roles(&quot;vip1&quot;,&quot;vip2&quot;,&quot;vip3&quot;)\n                .and()\n                .withUser(&quot;guest&quot;).password(new BCryptPasswordEncoder().encode(&quot;123456&quot;)).roles(&quot;vip1&quot;);\n    &#125;\n&#125;\n</code></pre></li>\n</ol>\n<h3 id=\"权限控制和注销\"><a href=\"#权限控制和注销\" class=\"headerlink\" title=\"权限控制和注销\"></a>权限控制和注销</h3><ol>\n<li><p>开启自动配置的注销功能</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.config;\n\n        import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n        import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n        import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n        import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n        import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123;\n\n    &#x2F;&#x2F;链式编程\n    @Override\n    protected void configure(HttpSecurity http) throws Exception &#123;\n        &#x2F;&#x2F;首页所有人可以访问，功能页只对应优先权的人才能访问\n\n        &#x2F;&#x2F;请求授权的规则\n        http.authorizeRequests()\n                .antMatchers(&quot;&#x2F;&quot;).permitAll()\n                .antMatchers(&quot;&#x2F;level1&#x2F;**&quot;).hasRole(&quot;vip1&quot;)\n                .antMatchers(&quot;&#x2F;level2&#x2F;**&quot;).hasRole(&quot;vip2&quot;)\n                .antMatchers(&quot;&#x2F;level3&#x2F;**&quot;).hasRole(&quot;vip3&quot;);\n\n        &#x2F;&#x2F;没有权限，默认跳转到登录页,需要开启登录页面\n        http.formLogin();\n\n        &#x2F;&#x2F;开启注销功能。\n        &#x2F;&#x2F;logout注销请求\n        http.logout();\n    &#125;\n\n    &#x2F;&#x2F;认证，SpringBoot 2.1.x可以直接使用\n    &#x2F;&#x2F;密码编码 passwordEncoder\n    &#x2F;&#x2F;在Spring security 5.0+中新增了很多加密方法~\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;\n\n        &#x2F;&#x2F;数据正常从数据库中读\n        auth.inMemoryAuthentication().passwordEncoder(new BCryptPasswordEncoder())\n                .withUser(&quot;xoc001&quot;).password(new BCryptPasswordEncoder().encode(&quot;123456&quot;)).roles(&quot;vip2&quot;,&quot;vip3&quot;)\n                .and()\n                .withUser(&quot;root&quot;).password(new BCryptPasswordEncoder().encode(&quot;123456&quot;)).roles(&quot;vip1&quot;,&quot;vip2&quot;,&quot;vip3&quot;)\n                .and()\n                .withUser(&quot;guest&quot;).password(new BCryptPasswordEncoder().encode(&quot;123456&quot;)).roles(&quot;vip1&quot;);\n    &#125;\n&#125;\n</code></pre>\n\n\n</li>\n<li><p>在前端界面中增加一个注销功能按钮。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!--注销--&gt;\n&lt;a class&#x3D;&quot;item&quot; th:href&#x3D;&quot;@&#123;&#x2F;logout&#125;&quot;&gt;\n    &lt;i class&#x3D;&quot;sign-out card icon&quot;&gt;&lt;&#x2F;i&gt; 注销\n&lt;&#x2F;a&gt;</code></pre>\n\n\n</li>\n<li><p>测试完成后，发现注销后会跳转到登录页面。思考：注销完如何跳转到首页</p>\n</li>\n<li><p>添加配置，使注销完跳转到首页</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">http.logut().logoutSuccessUrl(&quot;&#x2F;&quot;);</code></pre>\n</li>\n<li><p>测试：发现注销完，跳转到首页。</p>\n</li>\n<li><p>需求：用户没有登录的时候，首页显示登录按钮。用户登录后，显示用户的名字和权限以及注销操作。以及显示对应用户可操作限权的功能。没有限权的共嫩不予显示。</p>\n<p>&#x3D;&#x3D;要结合thymeleaf中的一些功能&#x3D;&#x3D;    <strong>sec:authorize&#x3D;”isAuthenticated()“ 是否认证登录，来显示不同的页面。</strong></p>\n<p>导入Maven依赖</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.thymeleaf.extras&#x2F;thymeleaf-extras-springsecurity5 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.thymeleaf.extras&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;thymeleaf-extras-springsecurity5&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.0.4.RELEASE&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n\n</li>\n<li><p>修改前端页面，导入命名空间 </p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;html xmlns:sec&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&#x2F;thymeleaf-extras-springsecurity5&quot;&gt;&lt;&#x2F;html&gt;</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\n\n&lt;!--登录注销--&gt;\n&lt;div class&#x3D;&quot;right menu&quot;&gt;\n    &lt;!--未登录--&gt;\n    &lt;div sec:authorize&#x3D;&quot;!isAuthenticated()&quot;&gt;\n        &lt;a class&#x3D;&quot;item&quot; th:href&#x3D;&quot;@&#123;&#x2F;toLogin&#125;&quot;&gt;\n            &lt;i class&#x3D;&quot;address card icon&quot;&gt;&lt;&#x2F;i&gt; 登录\n        &lt;&#x2F;a&gt;\n    &lt;&#x2F;div&gt;\n\n    &lt;div sec:authorize&#x3D;&quot;isAuthenticated()&quot;&gt;\n        &lt;!--注销--&gt;\n        &lt;a class&#x3D;&quot;item&quot;&gt;\n            用户名：&lt;span sec:authentication&#x3D;&quot;name&quot;&gt;&lt;&#x2F;span&gt;\n            级别：&lt;span sec:authentication&#x3D;&quot;principal.authorities&quot;&gt;&lt;&#x2F;span&gt;\n        &lt;&#x2F;a&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div sec:authorize&#x3D;&quot;isAuthenticated()&quot;&gt;\n        &lt;!--注销--&gt;\n        &lt;a class&#x3D;&quot;item&quot; th:href&#x3D;&quot;@&#123;&#x2F;logout&#125;&quot;&gt;\n            &lt;i class&#x3D;&quot;sign-out card icon&quot;&gt;&lt;&#x2F;i&gt; 注销\n        &lt;&#x2F;a&gt;\n    &lt;&#x2F;div&gt;\n    &lt;!--已登录\n&lt;a th:href&#x3D;&quot;@&#123;&#x2F;usr&#x2F;toUserCenter&#125;&quot;&gt;\n&lt;i class&#x3D;&quot;address card icon&quot;&gt;&lt;&#x2F;i&gt; admin\n&lt;&#x2F;a&gt;\n--&gt;\n&lt;&#x2F;div&gt;\n</code></pre>\n</li>\n<li><p>如果注销了以后显示404，就是因为它默认方式csrf跨站请求伪造，因为会产生安全问题，我们可以将请求改为post表单提交，或者在spring security中关闭csrf功能； <strong>跨站请求伪造</strong>（英语：Cross-site request forgery）</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">http.csrf().disable();\t\t&#x2F;&#x2F;关闭csrf功能：跨站请求伪造，默认只能通过post方式提交logout请求。</code></pre>\n\n\n</li>\n<li><p>完成角色认证模块</p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;div&gt;\n    &lt;br&gt;\n    &lt;div class&#x3D;&quot;ui three column stackable grid&quot;&gt;\n        &lt;div class&#x3D;&quot;column&quot; sec:authorize&#x3D;&quot;hasRole(&#39;vip1&#39;)&quot;&gt;\n            &lt;div class&#x3D;&quot;ui raised segment&quot;&gt;\n                &lt;div class&#x3D;&quot;ui&quot;&gt;\n                    &lt;div class&#x3D;&quot;content&quot;&gt;\n                        &lt;h5 class&#x3D;&quot;content&quot;&gt;Level 1&lt;&#x2F;h5&gt;\n                        &lt;hr&gt;\n                        &lt;div&gt;&lt;a th:href&#x3D;&quot;@&#123;&#x2F;level1&#x2F;1&#125;&quot;&gt;&lt;i class&#x3D;&quot;bullhorn icon&quot;&gt;&lt;&#x2F;i&gt; Level-1-1&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;\n                        &lt;div&gt;&lt;a th:href&#x3D;&quot;@&#123;&#x2F;level1&#x2F;2&#125;&quot;&gt;&lt;i class&#x3D;&quot;bullhorn icon&quot;&gt;&lt;&#x2F;i&gt; Level-1-2&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;\n                        &lt;div&gt;&lt;a th:href&#x3D;&quot;@&#123;&#x2F;level1&#x2F;3&#125;&quot;&gt;&lt;i class&#x3D;&quot;bullhorn icon&quot;&gt;&lt;&#x2F;i&gt; Level-1-3&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;\n                    &lt;&#x2F;div&gt;\n                &lt;&#x2F;div&gt;\n            &lt;&#x2F;div&gt;\n        &lt;&#x2F;div&gt;\n\n        &lt;div class&#x3D;&quot;column&quot; sec:authorize&#x3D;&quot;hasRole(&#39;vip2&#39;)&quot;&gt;\n            &lt;div class&#x3D;&quot;ui raised segment&quot;&gt;\n                &lt;div class&#x3D;&quot;ui&quot;&gt;\n                    &lt;div class&#x3D;&quot;content&quot;&gt;\n                        &lt;h5 class&#x3D;&quot;content&quot;&gt;Level 2&lt;&#x2F;h5&gt;\n                        &lt;hr&gt;\n                        &lt;div&gt;&lt;a th:href&#x3D;&quot;@&#123;&#x2F;level2&#x2F;1&#125;&quot;&gt;&lt;i class&#x3D;&quot;bullhorn icon&quot;&gt;&lt;&#x2F;i&gt; Level-2-1&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;\n                        &lt;div&gt;&lt;a th:href&#x3D;&quot;@&#123;&#x2F;level2&#x2F;2&#125;&quot;&gt;&lt;i class&#x3D;&quot;bullhorn icon&quot;&gt;&lt;&#x2F;i&gt; Level-2-2&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;\n                        &lt;div&gt;&lt;a th:href&#x3D;&quot;@&#123;&#x2F;level2&#x2F;3&#125;&quot;&gt;&lt;i class&#x3D;&quot;bullhorn icon&quot;&gt;&lt;&#x2F;i&gt; Level-2-3&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;\n                    &lt;&#x2F;div&gt;\n                &lt;&#x2F;div&gt;\n            &lt;&#x2F;div&gt;\n        &lt;&#x2F;div&gt;\n\n        &lt;div class&#x3D;&quot;column&quot; sec:authorize&#x3D;&quot;hasRole(&#39;vip3&#39;)&quot;&gt;\n            &lt;div class&#x3D;&quot;ui raised segment&quot;&gt;\n                &lt;div class&#x3D;&quot;ui&quot;&gt;\n                    &lt;div class&#x3D;&quot;content&quot;&gt;\n                        &lt;h5 class&#x3D;&quot;content&quot;&gt;Level 3&lt;&#x2F;h5&gt;\n                        &lt;hr&gt;\n                        &lt;div&gt;&lt;a th:href&#x3D;&quot;@&#123;&#x2F;level3&#x2F;1&#125;&quot;&gt;&lt;i class&#x3D;&quot;bullhorn icon&quot;&gt;&lt;&#x2F;i&gt; Level-3-1&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;\n                        &lt;div&gt;&lt;a th:href&#x3D;&quot;@&#123;&#x2F;level3&#x2F;2&#125;&quot;&gt;&lt;i class&#x3D;&quot;bullhorn icon&quot;&gt;&lt;&#x2F;i&gt; Level-3-2&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;\n                        &lt;div&gt;&lt;a th:href&#x3D;&quot;@&#123;&#x2F;level3&#x2F;3&#125;&quot;&gt;&lt;i class&#x3D;&quot;bullhorn icon&quot;&gt;&lt;&#x2F;i&gt; Level-3-3&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;\n                    &lt;&#x2F;div&gt;\n                &lt;&#x2F;div&gt;\n            &lt;&#x2F;div&gt;\n        &lt;&#x2F;div&gt;\n\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n\n</li>\n<li><p>权限控制和注销搞定！</p>\n</li>\n</ol>\n<h3 id=\"记住我\"><a href=\"#记住我\" class=\"headerlink\" title=\"记住我\"></a>记住我</h3><p>实现浏览器中记住账号密码的功能</p>\n<ol>\n<li><p>开启记住我功能</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.config;\n\n        import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n        import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n        import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n        import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n        import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123;\n\n    &#x2F;&#x2F;链式编程\n    @Override\n    protected void configure(HttpSecurity http) throws Exception &#123;\n        &#x2F;&#x2F;首页所有人可以访问，功能页只对应优先权的人才能访问\n\n        &#x2F;&#x2F;请求授权的规则\n        http.authorizeRequests()\n                .antMatchers(&quot;&#x2F;&quot;).permitAll()\n                .antMatchers(&quot;&#x2F;level1&#x2F;**&quot;).hasRole(&quot;vip1&quot;)\n                .antMatchers(&quot;&#x2F;level2&#x2F;**&quot;).hasRole(&quot;vip2&quot;)\n                .antMatchers(&quot;&#x2F;level3&#x2F;**&quot;).hasRole(&quot;vip3&quot;);\n\n        &#x2F;&#x2F;没有权限，默认跳转到登录页,需要开启登录页面\n        http.formLogin();\n        \n        \n        &#x2F;&#x2F;关闭请求跨域。\n        http.csrf().disable();\n        http.logout().logoutSuccessUrl(&quot;&#x2F;&quot;);\n        \n        &#x2F;&#x2F;记住我\n        http.rememberMe();\n        \n    &#125;\n\n    &#x2F;&#x2F;认证，SpringBoot 2.1.x可以直接使用\n    &#x2F;&#x2F;密码编码 passwordEncoder\n    &#x2F;&#x2F;在Spring security 5.0+中新增了很多加密方法~\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;\n\n        &#x2F;&#x2F;数据正常从数据库中读\n        auth.inMemoryAuthentication().passwordEncoder(new BCryptPasswordEncoder())\n                .withUser(&quot;xoc001&quot;).password(new BCryptPasswordEncoder().encode(&quot;123456&quot;)).roles(&quot;vip2&quot;,&quot;vip3&quot;)\n                .and()\n                .withUser(&quot;root&quot;).password(new BCryptPasswordEncoder().encode(&quot;123456&quot;)).roles(&quot;vip1&quot;,&quot;vip2&quot;,&quot;vip3&quot;)\n                .and()\n                .withUser(&quot;guest&quot;).password(new BCryptPasswordEncoder().encode(&quot;123456&quot;)).roles(&quot;vip1&quot;);\n    &#125;\n&#125;\n</code></pre>\n\n\n</li>\n<li><p>测试，登录i页中多了一个记住我功能，勾选后关闭浏览器，重新打开，用户依旧存在。</p>\n<p><img src=\"/SpringBoot.assets/image-20210906173544503.png\" alt=\"image-20210906173544503\"></p>\n</li>\n<li><p>注销时，Spring Security会自动删除这个cookie。</p>\n</li>\n</ol>\n<h3 id=\"定制登录页\"><a href=\"#定制登录页\" class=\"headerlink\" title=\"定制登录页\"></a>定制登录页</h3><p>上述使用的登录页面是Spring Security默认的，怎样才能使用我们自定义的登录页面呢？</p>\n<ol>\n<li><p>在之前的登录页配置后面添加配置</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">&#x2F;&#x2F;没有权限，默认跳转到登录页,需要开启登录页面\nhttp.formLogin().loginPage(&quot;&#x2F;toLogin&quot;);</code></pre>\n\n\n</li>\n<li><p>前端也指向我们自定义的toLogin请求。</p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!--未登录--&gt;\n&lt;div sec:authorize&#x3D;&quot;!isAuthenticated()&quot;&gt;\n    &lt;a class&#x3D;&quot;item&quot; th:href&#x3D;&quot;@&#123;&#x2F;toLogin&#125;&quot;&gt;\n        &lt;i class&#x3D;&quot;address card icon&quot;&gt;&lt;&#x2F;i&gt; 登录\n    &lt;&#x2F;a&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n\n</li>\n<li><p>登陆时，需要将这些数据发送到哪里，也需要我们手动配置，login.html配置请求及方式必须为post</p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;form th:action&#x3D;&quot;@&#123;&#x2F;index&#125;&quot; method&#x3D;&quot;post&quot;&gt;\n    &lt;div class&#x3D;&quot;field&quot;&gt;\n        &lt;label&gt;Username&lt;&#x2F;label&gt;\n        &lt;div class&#x3D;&quot;ui left icon input&quot;&gt;\n            &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Username&quot; name&#x3D;&quot;username&quot;&gt;\n            &lt;i class&#x3D;&quot;user icon&quot;&gt;&lt;&#x2F;i&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;field&quot;&gt;\n        &lt;label&gt;Password&lt;&#x2F;label&gt;\n        &lt;div class&#x3D;&quot;ui left icon input&quot;&gt;\n            &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt;\n            &lt;i class&#x3D;&quot;lock icon&quot;&gt;&lt;&#x2F;i&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n    &lt;input type&#x3D;&quot;submit&quot; class&#x3D;&quot;ui blue submit button&quot;&#x2F;&gt;\n&lt;&#x2F;form&gt;A</code></pre>\n\n\n</li>\n<li><p>请求提交后，需要验证处理。配置接收登录的用户名和密码参数！</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">&#x2F;&#x2F;没有权限，默认跳转到登录页,需要开启登录页面\n    http.formLogin().usernameParameter(&quot;username&quot;).passwordParameter(&quot;password&quot;).loginPage(&quot;&#x2F;toLogin&quot;).loginProcessingUrl(&quot;&#x2F;&quot;);</code></pre>\n</li>\n<li><p>在登录页面添加记住我的单选框</p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;remember&quot;&gt; 记住我</code></pre>\n</li>\n<li><p>后端验证处理</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">&#x2F;&#x2F;定制记住我的参数！\nhttp.rememberMe().rememberMeParameter(&quot;remember&quot;);</code></pre></li>\n</ol>\n<h2 id=\"Shiro\"><a href=\"#Shiro\" class=\"headerlink\" title=\"Shiro\"></a>Shiro</h2><h3 id=\"什么是Shiro？\"><a href=\"#什么是Shiro？\" class=\"headerlink\" title=\"什么是Shiro？\"></a>什么是Shiro？</h3><p>Apache Shiro 是 Java 的一个安全框架。目前，使用 Apache Shiro 的人越来越多，因为它相当简单，对比 Spring Security，可能没有 Spring Security 做的功能强大，但是在实际工作时 可能并不需要那么复杂的东西，所以使用小而简单的 Shiro 就足够了。对于它俩到底哪个好，这个不必纠结，能更简单的解决项目问题就好了。</p>\n<ul>\n<li>Apache Shiro 是一个Java安全(限权)框架</li>\n<li>Shiro可以非常容易地开发出足够好的应用，其不仅可以用在JavaSE环境，也可以运行在JavaEE环境。</li>\n<li>Shiro可以完成：认证，授权，加密，会话管理，Web继承，缓存等。</li>\n<li>地址：<a href=\"http://shiro.apache.org/index.html\">Apache Shiro | Simple. Java. Security.</a></li>\n</ul>\n<h3 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h3><p><img src=\"/SpringBoot.assets/image-20210906223730945.png\" alt=\"image-20210906223730945\"></p>\n<p><strong>Authentication</strong>：身份认证&#x2F;登录，验证用户是不是拥有相应的身份； </p>\n<p><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用 户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用 户对某个资源是否具有某个权限； </p>\n<p><strong>Session Manager</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信 息都在会话中；会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的；</p>\n<p> <strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储； Web Support：Web 支持，可以非常容易的集成到 Web 环境； </p>\n<p><strong>Caching</strong>：缓存，比如用户登录后，其用户信息、拥有的角色&#x2F;权限不必每次去查，这样可以提高效率；</p>\n<p><strong>Concurrency</strong>：shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能 把权限自动传播过去； </p>\n<p><strong>Testing</strong>：提供测试支持； </p>\n<p><strong>Run As</strong>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问； </p>\n<p><strong>Remember Me</strong>：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录 了。</p>\n<h3 id=\"Shiro架构架构-外部\"><a href=\"#Shiro架构架构-外部\" class=\"headerlink\" title=\"Shiro架构架构(外部)\"></a>Shiro架构架构(外部)</h3><p><img src=\"/SpringBoot.assets/image-20210906223954798.png\" alt=\"image-20210906223954798\"></p>\n<p>可以看到：应用代码直接交互的对象是Subject。也就是说Shrio对外的API核心就是Subject；</p>\n<p>API含义</p>\n<p><strong>Subject</strong>：主体，代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互 的任何东西都是 Subject，如网络爬虫，机器人等；即一个抽象概念；所有 Subject 都绑定 到 SecurityManager，与 Subject 的所有交互都会委托给 SecurityManager；可以把 Subject 认 为是一个门面；SecurityManager 才是实际的执行者；</p>\n<h2 id=\"Swagger\"><a href=\"#Swagger\" class=\"headerlink\" title=\"Swagger\"></a>Swagger</h2><ol>\n<li><p>新建SpringBoot 项目</p>\n</li>\n<li><p>导入相关依赖</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;io.springfox&#x2F;springfox-swagger2 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.9.2&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;io.springfox&#x2F;springfox-swagger-ui --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.9.2&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n\n</li>\n<li><p>编写HelloWorld工程</p>\n</li>\n<li><p>配置Swagger  &#x3D;&gt; Config</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n@Configuration\n&#x2F;&#x2F;开启Swagger2\n@EnableSwagger2\npublic class SwaggerConfig &#123;\n\n\n&#125;</code></pre>\n\n\n</li>\n<li><p>测试运行</p>\n</li>\n</ol>\n<p><img src=\"/SpringBoot.assets/image-20210907221147946.png\" alt=\"image-20210907221147946\"></p>\n<h3 id=\"配置Swagger\"><a href=\"#配置Swagger\" class=\"headerlink\" title=\"配置Swagger\"></a>配置Swagger</h3><p>Swagger配置实例 docket</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Configuration\n&#x2F;&#x2F;开启Swagger2\n@EnableSwagger2\npublic class SwaggerConfig &#123;\n\n    @Bean\n    public Docket docket()&#123;\n        return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo());\n    &#125;\n\n    private ApiInfo apiInfo()&#123;\n        Contact contact &#x3D; new Contact(&quot;Xoc001&quot;,&quot;http:&#x2F;&#x2F;www.baidu.com&quot;,&quot;635996171@qq.com&quot;);\n        return  new ApiInfo(&quot;Xoc001 文档测试&quot;\n                , &quot;ABCDEFG&quot;\n                , &quot;v1.0&quot;\n                , &quot;Xoc001&quot;\n                , contact\n                , &quot;Apache 2.0&quot;\n                , &quot;http:&#x2F;&#x2F;www.baidu.com&quot;\n                , new ArrayList()\n        );\n    &#125;\n&#125;</code></pre>\n\n\n\n<h3 id=\"Swagger配置扫描接口\"><a href=\"#Swagger配置扫描接口\" class=\"headerlink\" title=\"Swagger配置扫描接口\"></a>Swagger配置扫描接口</h3><h3 id=\"Swagger分组的接口\"><a href=\"#Swagger分组的接口\" class=\"headerlink\" title=\"Swagger分组的接口\"></a>Swagger分组的接口</h3><p>@Api()</p>\n<p>@ApiModel()</p>\n<p>@ApiModelproperty()</p>\n<p>@ApiOperation()</p>\n<h2 id=\"异步任务\"><a href=\"#异步任务\" class=\"headerlink\" title=\"异步任务\"></a>异步任务</h2><h2 id=\"邮件任务\"><a href=\"#邮件任务\" class=\"headerlink\" title=\"邮件任务\"></a>邮件任务</h2><pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-mail&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n\n\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">spring.mail.username&#x3D;635996171@qq.com\nspring.mail.password&#x3D; &#x2F;&#x2F;授权码\nspring.mail.host&#x3D;smtp.qq.com</code></pre>\n\n\n\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my;\n\n@SpringBootTest\nclass Springboot10AsyncApplicationTests &#123;\n\n    @Autowired\n    JavaMailSender mailSender;\n\n    @Test\n    void contextLoads() &#123;\n        SimpleMailMessage mailMessage &#x3D; new SimpleMailMessage();\n        mailMessage.setSubject(&quot;联盟紧急通知&quot;);\n        mailMessage.setText(&quot;上号！&quot;);\n\n        mailMessage.setFrom(&quot;635996171@qq.com&quot;);\n        mailMessage.setTo(&quot;635996171@qq.com&quot;);\n\n        mailSender.send(mailMessage);\n    &#125;\n\n    @Test\n    void contextLoads1() throws MessagingException &#123;\n\n        MimeMessage mimeMessage &#x3D; mailSender.createMimeMessage();\n\n        MimeMessageHelper helper &#x3D; new MimeMessageHelper(mimeMessage, true);\n\n        helper.addAttachment(&quot;1.jpg&quot;,new File(&quot;C:\\\\Users\\\\Xoc001\\\\Desktop\\\\图片素材\\\\0.jpg&quot;));\n\n        helper.setSubject(&quot;通知通知通知！&quot;);\n        helper.setText(&quot;&lt;h1 style&#x3D;&#39;color:red&#39;&gt;银河战争!&lt;&#x2F;h1&gt;&quot;,true);\n\n        helper.setFrom(&quot;635996171@qq.com&quot;);\n        helper.setTo(&quot;635996171@qq.com&quot;);\n\n        mailSender.send(mimeMessage);\n\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h2><p>crom</p>\n<p>计划任务，是任务在约定的时间执行已经计划好的工作，这是表面的意思。在Linux中，我们经常用到 cron 服务器来完成这项工作。cron服务器可以根据配置文件约定的时间来执行特定的任务。</p>\n<p>表达式 </p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">&#x2F;&#x2F;表达式： 秒 分 时 日 月 星期 年\n@Scheduled(cron &#x3D;&quot;0 * * * * * * &quot;)</code></pre>\n\n<p>使用：启动类上表明<code>@EnableScheduling</code></p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@SpringBootApplication\n@EnableAsync\t\t&#x2F;&#x2F;开启异步注解\n@EnableScheduling\t\t&#x2F;&#x2F;开启定时任务注解\npublic class Springboot10AsyncApplication &#123;\n\n    public static void main(String[] args) &#123;\n        SpringApplication.run(Springboot10AsyncApplication.class, args);\n    &#125;\n\n&#125;</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package my.service;\n\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Service;\n\n@Service\t&#x2F;&#x2F;@Service注解\npublic class ScheduledService &#123;\n\n    &#x2F;&#x2F;计划注解\n    @Scheduled(cron &#x3D; &quot;0&#x2F;5 34 21 * * ?&quot;)\n    public void hello()&#123;\n        System.out.println(&quot;hello world&quot;);\n    &#125;\n&#125;\n</code></pre>\n\n\n\n\n\n\n\n<h2 id=\"Dubbo-ZooKepper-集成\"><a href=\"#Dubbo-ZooKepper-集成\" class=\"headerlink\" title=\"Dubbo+ZooKepper 集成\"></a>Dubbo+ZooKepper 集成</h2><h3 id=\"分布式理论\"><a href=\"#分布式理论\" class=\"headerlink\" title=\"分布式理论\"></a>分布式理论</h3><h4 id=\"什么是分布式系统？\"><a href=\"#什么是分布式系统？\" class=\"headerlink\" title=\"什么是分布式系统？\"></a><strong>什么是分布式系统？</strong></h4><p>在《分布式系统原理与范型》一书中有如下定义：“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”；</p>\n<p>分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是<strong>利用更多的机器，处理更多的数据</strong>。</p>\n<p>分布式系统（distributed system）是建立在网络之上的软件系统。</p>\n<p>首先需要明确的是，只有当单个节点的处理能力无法满足日益增长的计算、存储任务的时候，且硬件的提升（加内存、加磁盘、使用更好的CPU）高昂到得不偿失的时候，应用程序也不能进一步优化的时候，我们才需要考虑分布式系统。因为，分布式系统要解决的问题本身就是和单机系统一样的，而由于分布式系统多节点、通过网络通信的拓扑结构，会引入很多单机系统没有的问题，为了解决这些问题又会引入更多的机制、协议，带来更多的问题。。。</p>\n<h4 id=\"Dubbo文档\"><a href=\"#Dubbo文档\" class=\"headerlink\" title=\"Dubbo文档\"></a><strong>Dubbo文档</strong></h4><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，急需<strong>一个治理系统</strong>确保架构有条不紊的演进。</p>\n<p>在Dubbo的官网文档有这样一张图</p>\n<p><img src=\"/SpringBoot.assets/640\" alt=\"图片\"></p>\n<h4 id=\"单一应用架构\"><a href=\"#单一应用架构\" class=\"headerlink\" title=\"单一应用架构\"></a><strong>单一应用架构</strong></h4><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p>\n<p><img src=\"/SpringBoot.assets/640\" alt=\"图片\"></p>\n<p>适用于小型网站，小型管理系统，将所有功能都部署到一个功能里，简单易用。</p>\n<p><strong>缺点：</strong></p>\n<p>1、性能扩展比较难</p>\n<p>2、协同开发问题</p>\n<p>3、不利于升级维护</p>\n<h4 id=\"垂直应用架构\"><a href=\"#垂直应用架构\" class=\"headerlink\" title=\"垂直应用架构\"></a><strong>垂直应用架构</strong></h4><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p>\n<p><img src=\"/SpringBoot.assets/640\" alt=\"图片\"></p>\n<p>通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。</p>\n<p>缺点：公用模块无法重复利用，开发性的浪费</p>\n<h4 id=\"分布式服务架构\"><a href=\"#分布式服务架构\" class=\"headerlink\" title=\"分布式服务架构\"></a><strong>分布式服务架构</strong></h4><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的**分布式服务框架(RPC)**是关键。</p>\n<p><img src=\"/SpringBoot.assets/640\" alt=\"图片\"></p>\n<h4 id=\"流动计算架构\"><a href=\"#流动计算架构\" class=\"headerlink\" title=\"流动计算架构\"></a><strong>流动计算架构</strong></h4><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于<strong>提高机器利用率的资源调度和治理中心</strong>(SOA)[ Service Oriented Architecture]是关键。</p>\n<p><img src=\"/SpringBoot.assets/640\" alt=\"图片\"></p>\n<h3 id=\"什么是RPC\"><a href=\"#什么是RPC\" class=\"headerlink\" title=\"什么是RPC\"></a>什么是RPC</h3><p>RPC【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p>\n<p>也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数&#x2F;方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。为什么要用RPC呢？就是无法在一个进程内，甚至一个计算机内通过本地调用的方式完成的需求，比如不同的系统间的通讯，甚至不同的组织间的通讯，由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用。RPC就是要像调用本地的函数一样去调远程函数；</p>\n<p>推荐阅读文章：<a href=\"https://www.jianshu.com/p/2accc2840a1b\">https://www.jianshu.com/p/2accc2840a1b</a></p>\n<p><strong>RPC基本原理</strong></p>\n<p><img src=\"/SpringBoot.assets/640\" alt=\"图片\"></p>\n<p><strong>步骤解析：</strong></p>\n<p><img src=\"/SpringBoot.assets/640\" alt=\"图片\"></p>\n<p>RPC两个核心模块：通讯，序列化。</p>\n<h3 id=\"测试环境搭建\"><a href=\"#测试环境搭建\" class=\"headerlink\" title=\"测试环境搭建\"></a>测试环境搭建</h3><h4 id=\"Dubbo：\"><a href=\"#Dubbo：\" class=\"headerlink\" title=\"Dubbo：\"></a>Dubbo：</h4><p>Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p>\n<p>dubbo官网 <a href=\"http://dubbo.apache.org/zh-cn/index.html\">http://dubbo.apache.org/zh-cn/index.html</a></p>\n<p>1.了解Dubbo的特性</p>\n<p>2.查看官方文档</p>\n<h5 id=\"Dubbo基本概念\"><a href=\"#Dubbo基本概念\" class=\"headerlink\" title=\"Dubbo基本概念\"></a><strong>Dubbo基本概念</strong></h5><p><img src=\"/SpringBoot.assets/architecture.png\" alt=\"//imgs/architecture.png\"></p>\n<p><strong>服务提供者</strong>（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p>\n<p><strong>服务消费者</strong>（Consumer）：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p>\n<p><strong>注册中心</strong>（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p>\n<p><strong>监控中心</strong>（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p>\n<p><strong>调用关系说明</strong></p>\n<ul>\n<li><p>服务容器负责启动，加载，运行服务提供者。</p>\n</li>\n<li><p>服务提供者在启动时，向注册中心注册自己提供的服务。</p>\n</li>\n<li><p>服务消费者在启动时，向注册中心订阅自己所需的服务。</p>\n</li>\n<li><p>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p>\n</li>\n<li><p>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p>\n</li>\n<li><p>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p>\n</li>\n</ul>\n<h5 id=\"Dubbo环境搭建\"><a href=\"#Dubbo环境搭建\" class=\"headerlink\" title=\"Dubbo环境搭建\"></a>Dubbo环境搭建</h5><p>推荐使用&#x3D;&#x3D;<strong>ZooKeeper</strong>&#x3D;&#x3D;注册中心</p>\n<p>Zookeeper官方文档：<a href=\"https://dubbo.apache.org/zh/docs/references/registry/zookeeper/\">Zookeeper 注册中心 | Apache Dubbo</a></p>\n<h5 id=\"Windows安装zookeeper\"><a href=\"#Windows安装zookeeper\" class=\"headerlink\" title=\"Windows安装zookeeper\"></a>Windows安装zookeeper</h5><ol>\n<li><p>下载zookeeper：<a href=\"https://downloads.apache.org/zookeeper/\">Index of &#x2F;zookeeper (apache.org)</a></p>\n<p>这里解压到D盘根目录下。</p>\n</li>\n<li><p>运行文件：D:\\apache-zookeeper-3.7.0-bin\\bin\\zkServer.cmd。</p>\n<p>可能会发生的问题：闪退！</p>\n<p>解决方法：在<code>zkServer.cmd</code>文件末尾添加pause。这样运行出错后，就不会闪退。</p>\n<p><img src=\"/SpringBoot.assets/image-20210911231755410.png\" alt=\"image-20210911231755410\"></p>\n</li>\n<li><p>报错</p>\n<p><img src=\"/SpringBoot.assets/image-20210911231921512.png\" alt=\"image-20210911231921512\"></p>\n<p>解决办法：在<code>D:\\apache-zookeeper-3.7.0-bin\\conf</code>目录下添加zoo.cfg文件。</p>\n<p><img src=\"/SpringBoot.assets/image-20210911232009177.png\" alt=\"image-20210911232009177\"></p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">tickTime&#x3D;2000\ninitLimit&#x3D;10\nsyncLimit&#x3D;5\n#临时数据存储目录\ndataDir&#x3D;&#x2F;tmp&#x2F;zookeeper\n#zookeeper的端口号\nclientPort&#x3D;2181\n\n</code></pre>\n\n\n</li>\n<li><p>修改完成后，重新运行zkServer.cmd</p>\n<p><img src=\"/SpringBoot.assets/image-20210911232246778.png\" alt=\"image-20210911232246778\"></p>\n<p>使用zkCli.cmd测试：</p>\n<p>&#x3D;&#x3D;<code>ls / </code> ：查看节点&#x3D;&#x3D;</p>\n<p><img src=\"/SpringBoot.assets/image-20210911232420282.png\" alt=\"image-20210911232420282\"></p>\n<p>&#x3D;&#x3D;<code>create -e /xoc001 123</code> ：创建一个xoc001的节点，值为123&#x3D;&#x3D;</p>\n<p><img src=\"/SpringBoot.assets/image-20210911232558722.png\" alt=\"image-20210911232558722\"></p>\n<p>&#x3D;&#x3D;<code>get /xoc001</code> ：获取&#x2F;xoc001节点的值。&#x3D;&#x3D;</p>\n<p><img src=\"/SpringBoot.assets/image-20210911232612387.png\" alt=\"image-20210911232612387\"></p>\n</li>\n</ol>\n<h5 id=\"Windows安装Dubbo-admin\"><a href=\"#Windows安装Dubbo-admin\" class=\"headerlink\" title=\"Windows安装Dubbo-admin\"></a>Windows安装Dubbo-admin</h5><ol>\n<li><p>下载地址：<a href=\"https://github.com/apache/dubbo-admin/tree/master-0.2.0\">apache&#x2F;dubbo-admin at master-0.2.0 (github.com)</a></p>\n</li>\n<li><p>进入解压目录：D:\\dubbo-admin-master-0.2.0\\dubbo-admin\\src\\main\\resources\\application.properties 指定zookeeper地址</p>\n<pre><code class=\"properties\">server.port=7001\nspring.velocity.cache=false\nspring.velocity.charset=UTF-8\nspring.velocity.layout-url=/templates/default.vm\nspring.messages.fallback-to-system-locale=false\nspring.messages.basename=i18n/message\nspring.root.password=root\nspring.guest.password=guest\n\n#注册中心地址\ndubbo.registry.address=zookeeper://127.0.0.1:2181\n</code></pre>\n</li>\n<li><p>在项目目录下打包 dubbo-admin</p>\n<p>&#x3D;&#x3D;<code>mvn clean package -Dmaven.test.skip=true</code>&#x3D;&#x3D;</p>\n</li>\n<li><p>执行<code>D:\\dubbo-admin-master-0.2.0\\dubbo-admin\\target\\dubbo-admin-0.0.1-SNAPSHOT.jar</code>文件。</p>\n</li>\n<li><p>注意：zookeeper的服务器一定要打开。</p>\n<p><img src=\"/SpringBoot.assets/image-20210911233307989.png\" alt=\"image-20210911233307989\"></p>\n</li>\n<li><p>运行完毕，进入页面测试</p>\n<p><img src=\"/SpringBoot.assets/image-20210911233352836.png\" alt=\"image-20210911233352836\"></p>\n</li>\n<li><p>执行完毕，我们去访问一下 <a href=\"http://localhost:7001/\">http://localhost:7001/</a> ， 这时候我们需要输入登录账户和密码，我们都是默认的root-root；登陆成功，查看页面。</p>\n<p><img src=\"/SpringBoot.assets/image-20210911233509771.png\" alt=\"image-20210911233509771\"></p>\n</li>\n<li><p>安装完成。</p>\n</li>\n</ol>\n","feature":true,"text":"SpringBoot2021年8月25日 第一个SpringBoot程序原理yaml配置注入配置文件SpringBoot使用一个全局的配置文件，配置文件名称是固定的 application.properties 语法结构：key&#x3D;value application.ya...","link":"","photos":[],"count_time":{"symbolsCount":"54k","symbolsTime":"49 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SpringBoot\"><span class=\"toc-text\">SpringBoot</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AASpringBoot%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">第一个SpringBoot程序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#yaml%E9%85%8D%E7%BD%AE%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">yaml配置注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#yaml%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">yaml概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#yaml%E6%B3%A8%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">yaml注入配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BD%E6%8C%87%E5%AE%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">加载指定配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8D%A0%E4%BD%8D%E7%AC%A6\"><span class=\"toc-text\">配置文件占位符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%AF%94%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">对比小结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JSR303%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C\"><span class=\"toc-text\">JSR303数据校验</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">自动配置原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%86%E8%A7%A3%EF%BC%9A-Conditional\"><span class=\"toc-text\">了解：@Conditional</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Web%E5%BC%80%E5%8F%91%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86\"><span class=\"toc-text\">Web开发静态资源处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFwebjars-%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\">什么是webjars 呢？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E7%A7%8D%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84%E8%A7%84%E5%88%99\"><span class=\"toc-text\">第二种静态资源映射规则</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A6%96%E9%A1%B5%E5%AE%9A%E5%88%B6\"><span class=\"toc-text\">首页定制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%A9%E5%B1%95%E4%BD%BF%E7%94%A8SpringMVC\"><span class=\"toc-text\">扩展使用SpringMVC</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B5%E9%9D%A2%E5%9B%BD%E9%99%85%E5%8C%96\"><span class=\"toc-text\">页面国际化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99\"><span class=\"toc-text\">配置文件编写</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%94%9F%E6%95%88%E6%8E%A2%E7%A9%B6\"><span class=\"toc-text\">配置文件生效探究</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E9%A1%B5%E9%9D%A2%E5%9B%BD%E9%99%85%E5%8C%96%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">配置页面国际化的值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E5%9B%BD%E9%99%85%E5%8C%96%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">配置国际化解析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E5%90%88JDBC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">整合JDBC使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JDBCTemplate\"><span class=\"toc-text\">JDBCTemplate</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#x3D-x3D-JDBCTemplate-x3D-x3D\"><span class=\"toc-text\">&#x3D;&#x3D;JDBCTemplate&#x3D;&#x3D;</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E5%90%88Druid%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">整合Druid使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Druid%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">Druid简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90\"><span class=\"toc-text\">配置数据源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%87%E6%8D%A2%E6%95%B0%E6%8D%AE%E6%BA%90\"><span class=\"toc-text\">切换数据源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AEDruid\"><span class=\"toc-text\">配置Druid</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5Log4j%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">导入Log4j依赖</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E5%90%88Mybatis\"><span class=\"toc-text\">整合Mybatis</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SpringSecurity\"><span class=\"toc-text\">SpringSecurity</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E5%85%A8%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">安全简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A4%E8%AF%86SpringSecurity\"><span class=\"toc-text\">认识SpringSecurity</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83\"><span class=\"toc-text\">认证和授权</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E5%92%8C%E6%B3%A8%E9%94%80\"><span class=\"toc-text\">权限控制和注销</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%B0%E4%BD%8F%E6%88%91\"><span class=\"toc-text\">记住我</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E5%88%B6%E7%99%BB%E5%BD%95%E9%A1%B5\"><span class=\"toc-text\">定制登录页</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Shiro\"><span class=\"toc-text\">Shiro</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFShiro%EF%BC%9F\"><span class=\"toc-text\">什么是Shiro？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">基本功能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Shiro%E6%9E%B6%E6%9E%84%E6%9E%B6%E6%9E%84-%E5%A4%96%E9%83%A8\"><span class=\"toc-text\">Shiro架构架构(外部)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Swagger\"><span class=\"toc-text\">Swagger</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AESwagger\"><span class=\"toc-text\">配置Swagger</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Swagger%E9%85%8D%E7%BD%AE%E6%89%AB%E6%8F%8F%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">Swagger配置扫描接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Swagger%E5%88%86%E7%BB%84%E7%9A%84%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">Swagger分组的接口</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">异步任务</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%82%AE%E4%BB%B6%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">邮件任务</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">定时任务</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Dubbo-ZooKepper-%E9%9B%86%E6%88%90\"><span class=\"toc-text\">Dubbo+ZooKepper 集成</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA\"><span class=\"toc-text\">分布式理论</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%9F\"><span class=\"toc-text\">什么是分布式系统？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Dubbo%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">Dubbo文档</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%B8%80%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">单一应用架构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9E%82%E7%9B%B4%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">垂直应用架构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">分布式服务架构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%81%E5%8A%A8%E8%AE%A1%E7%AE%97%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">流动计算架构</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFRPC\"><span class=\"toc-text\">什么是RPC</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">测试环境搭建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Dubbo%EF%BC%9A\"><span class=\"toc-text\">Dubbo：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Dubbo%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">Dubbo基本概念</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Dubbo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">Dubbo环境搭建</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Windows%E5%AE%89%E8%A3%85zookeeper\"><span class=\"toc-text\">Windows安装zookeeper</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Windows%E5%AE%89%E8%A3%85Dubbo-admin\"><span class=\"toc-text\">Windows安装Dubbo-admin</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Xoc001","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"SpringMVC","date":"2022-02-10T17:38:23.903Z","updated":"2021-08-31T14:52:26.768Z","comments":true,"path":"api/articles/SpringMVC.json","keywords":null,"cover":[],"text":"SpringMVC2021年8月15日 ssm:mybatis+Spring + SpringMVC MVC三层架构 1、MVC1.1、什么是MVC MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。 是将业务逻辑、数据、显示...","link":"","photos":[],"count_time":{"symbolsCount":"74k","symbolsTime":"1:07"},"categories":[],"tags":[],"author":{"name":"Xoc001","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Spring","date":"2022-02-10T17:38:23.861Z","updated":"2022-02-09T16:01:28.922Z","comments":true,"path":"api/articles/Spring.json","keywords":null,"cover":[],"text":"Spring21.8.7 1、Spring1.1、简介&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-webmvc --&gt; &lt;...","link":"","photos":[],"count_time":{"symbolsCount":"32k","symbolsTime":"29 mins."},"categories":[],"tags":[],"author":{"name":"Xoc001","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}