{"title":"Spring","uid":"946249c65165e1a3d66f50e0cb6e89e7","slug":"Spring","date":"2022-02-27T13:43:09.039Z","updated":"2022-02-27T14:25:36.557Z","comments":true,"path":"api/articles/Spring.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/Xoc001/photo/202202272154.jpg","content":"<h1 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h1><p><strong>21.8.7</strong></p>\n<h2 id=\"1、Spring\"><a href=\"#1、Spring\" class=\"headerlink\" title=\"1、Spring\"></a>1、Spring</h2><h3 id=\"1-1、简介\"><a href=\"#1-1、简介\" class=\"headerlink\" title=\"1.1、简介\"></a>1.1、简介</h3><p>Spring是一个开源框架，它由Rod Johnson创建。它是为了解决企业应用开发的复杂性而创建的。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-webmvc --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;5.3.9&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-webmvc --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;5.3.9&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\n</code></pre>\n\n<h3 id=\"1-2、优点\"><a href=\"#1-2、优点\" class=\"headerlink\" title=\"1.2、优点\"></a>1.2、优点</h3><ul>\n<li>Spring 是一个开源的免费的框架</li>\n<li>Spring是一个轻量级的、非入侵式的框架</li>\n<li>控制反转(IOC)、面向切面编程(AOP)</li>\n<li>支持事务的处理，对框架整合的支持。</li>\n</ul>\n<p>总结：Spring就是一个轻量级的控制反转(IOC)和面向切面编程(AOP)框架</p>\n<h3 id=\"1-3、组成\"><a href=\"#1-3、组成\" class=\"headerlink\" title=\"1.3、组成\"></a>1.3、组成</h3><p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20210807152134529.png\" alt=\"image-20210807152134529\"></p>\n<h3 id=\"1-4、拓展\"><a href=\"#1-4、拓展\" class=\"headerlink\" title=\"1.4、拓展\"></a>1.4、拓展</h3><ul>\n<li>Spring  Boot <ul>\n<li>一个快速开发的框架</li>\n<li>基于SpringBoot可以快速的开发单个微服务</li>\n<li>约定大于配置！</li>\n</ul>\n</li>\n<li>Spring Cloud<ul>\n<li>Spring Cloud是基于SpringBoot实现的</li>\n</ul>\n</li>\n</ul>\n<p>学习SpringBoot的前提，需要完全掌握Spring及SpringMVC！</p>\n<h2 id=\"2、IOC理论推导\"><a href=\"#2、IOC理论推导\" class=\"headerlink\" title=\"2、IOC理论推导\"></a>2、IOC理论推导</h2><ol>\n<li><p>UserDao 接口</p>\n</li>\n<li><p>UserDaoImpl 实现类</p>\n</li>\n<li><p>UserService 业务接口</p>\n</li>\n<li><p>UserServiceImpl 业务实现类</p>\n</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20210807171906883.png\" alt=\"image-20210807171906883\"></p>\n<p>在之前的业务中，用户的需求可能会影响我们原来的代码，我们需要根据用户的需求修改原代码！如果代码量大，修改一次的成本十分昂贵</p>\n<ul>\n<li>利用Set接口实现</li>\n</ul>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">    private UserDao userDao;\n\n&#x2F;&#x2F;利用set进行动态实现值的注入！\n    public void setUserDao(UserDao userDao) &#123;\n        this.userDao &#x3D; userDao;\n    &#125;</code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20210807171928711.png\" alt=\"image-20210807171928711\"></p>\n<p><strong>之前是程序主动创建对象，控制权在程序员手中！</strong></p>\n<p><strong>利用set注入后，程序不再具有主动性，变成被动的接收对象。</strong></p>\n<p>这种思想从本质上解决了问题，使得程序员不用去管理对象的创建。系统的耦合性大大降低，使得程序员专注业务的实现。 <strong>这是IOC原型</strong></p>\n<h3 id=\"IOC本质\"><a href=\"#IOC本质\" class=\"headerlink\" title=\"IOC本质\"></a>IOC本质</h3><p><strong>控制反转IOC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IOC的一种方法</strong>。没有IOC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓的控制反转就是：获取依赖对象的方式反转了。 </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20210807172742211.png\" alt=\"image-20210807172742211\"></p>\n<p>IOC是Spring的核心内容，使用多种方式完美的实现了IOC,可以使用XML配置，也可以使用注解，新版本的Spring可以零配置实现IOC。</p>\n<ul>\n<li>对象是由Spring创建的</li>\n<li>对象的属性是由Spring容器设置的</li>\n</ul>\n<p>&#x3D;&#x3D;<strong>这个过程就叫控制反转：</strong>&#x3D;&#x3D;</p>\n<ul>\n<li>控制：谁来控制对象的创建，传统应用程序的对象是由程序本身控制创建的，使用Spring后，对象是由Spring来创建的。</li>\n<li>反转：程序本身不创建对象，而变成被动接收对象。</li>\n<li>依赖注入：就是<strong>利用&#x3D;&#x3D;set&#x3D;&#x3D;方法</strong>来进行注入。</li>\n</ul>\n<p>&#x3D;&#x3D;<strong>IOC是一种编程思想，由主动的创建变成被动的接收</strong>&#x3D;&#x3D;</p>\n<p>&#x3D;&#x3D;<strong>对象由Spring创建，管理，装配！</strong>&#x3D;&#x3D;</p>\n<h2 id=\"3、IOC创建对象的方式\"><a href=\"#3、IOC创建对象的方式\" class=\"headerlink\" title=\"3、IOC创建对象的方式\"></a>3、IOC创建对象的方式</h2><h3 id=\"使用Spring方式从创建对象\"><a href=\"#使用Spring方式从创建对象\" class=\"headerlink\" title=\"使用Spring方式从创建对象\"></a>使用Spring方式从创建对象</h3><p><strong>xml配置</strong></p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;\n    &lt;!-- id &#x3D; 变量名，class&#x3D; new的对象 --&gt;\n    &lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;my.pojo.Student&quot;&gt;\n        &lt;!-- property name 是类中属性的名称 ref 元素是指另一个bean定义的名称，value是具体值，基本数据类型。 对类中的属性进行赋值--&gt;\n        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;百度&quot;&gt;&lt;&#x2F;property&gt;\n        &lt;property name&#x3D;&quot;id&quot; value&#x3D;&quot;2022&quot;&gt;&lt;&#x2F;property&gt;\n    &lt;&#x2F;bean&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n<p><strong>在运行类中</strong></p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my;\n\nimport my.pojo.Student;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class MyTest &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F;获取Spring的上下文对象\n        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);\n        &#x2F;&#x2F;需要的对象已经被spring接管，需要什么值从上下文对象中取\n        Student student &#x3D; (Student) context.getBean(&quot;student&quot;);\n        System.out.println(student.toString());\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<ol>\n<li><h4 id=\"使用无参构造创建对象，默认！\"><a href=\"#使用无参构造创建对象，默认！\" class=\"headerlink\" title=\"使用无参构造创建对象，默认！\"></a>使用无参构造创建对象，默认！</h4></li>\n<li><h4 id=\"使用有参构造创建对象。\"><a href=\"#使用有参构造创建对象。\" class=\"headerlink\" title=\"使用有参构造创建对象。\"></a>使用有参构造创建对象。</h4><ol>\n<li><p>下标赋值</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--    1.下标赋值--&gt;\n    &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;my.pojo.User&quot;&gt;\n        &lt;constructor-arg index&#x3D;&quot;0&quot; value&#x3D;&quot;BAIDU&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;</code></pre>\n</li>\n<li><p>类型赋值</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--    2.使用类型赋值，一般不建议使用(两个String 无法识别)--&gt;\n    &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;my.pojo.User&quot;&gt;\n        &lt;constructor-arg type&#x3D;&quot;java.lang.String&quot; value&#x3D;&quot;afjklaksldfj&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;</code></pre>\n\n<ol start=\"3\">\n<li>直接通过参数名设置</li>\n</ol>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--    3.使用参数名赋值--&gt;\n    &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;my.pojo.User&quot;&gt;\n        &lt;constructor-arg name&#x3D;&quot;name&quot; value&#x3D;&quot;阿富汗的&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;</code></pre></li>\n</ol>\n<p>&#x3D;&#x3D;<strong>在配置文件加载时，容器中管理的对象就被实例化了。内存中只有一份实例。</strong>&#x3D;&#x3D;</p>\n<h2 id=\"4、Spring配置\"><a href=\"#4、Spring配置\" class=\"headerlink\" title=\"4、Spring配置\"></a>4、Spring配置</h2><h3 id=\"4-1、别名\"><a href=\"#4-1、别名\" class=\"headerlink\" title=\"4.1、别名\"></a>4.1、别名</h3><pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;alias name&#x3D;&quot;user&quot; alias&#x3D;&quot;asdfadfadfa&quot;&#x2F;&gt;</code></pre>\n\n\n\n<h3 id=\"4-2、Bean的配置\"><a href=\"#4-2、Bean的配置\" class=\"headerlink\" title=\"4.2、Bean的配置\"></a>4.2、Bean的配置</h3><pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!-- id: bean的唯一标识符，也就是对象名\n    class：bean对象所对应的全限定名：包名+类型\n    name：别名，可以接收多个别名\n\n--&gt;\n    &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;my.pojo.User&quot; name&#x3D;&quot;user2 user1123,123;xoc&quot;&gt;\n        &lt;constructor-arg name&#x3D;&quot;name&quot; value&#x3D;&quot;ABCCC&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;</code></pre>\n\n\n\n<h3 id=\"4-3、import\"><a href=\"#4-3、import\" class=\"headerlink\" title=\"4.3、import\"></a>4.3、import</h3><p>可以用import将所有人的beans.xml合并为一个</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;import resource&#x3D;&quot;beans1.xml&quot;&#x2F;&gt;\n&lt;import resource&#x3D;&quot;beans2.xml&quot;&#x2F;&gt;\n&lt;import resource&#x3D;&quot;beans3.xml&quot;&#x2F;&gt;\n </code></pre>\n\n\n\n<h2 id=\"5、依赖注入\"><a href=\"#5、依赖注入\" class=\"headerlink\" title=\"5、依赖注入\"></a>5、依赖注入</h2><h3 id=\"5-1、构造器注入\"><a href=\"#5-1、构造器注入\" class=\"headerlink\" title=\"5.1、构造器注入\"></a>5.1、构造器注入</h3><pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;constructor-arg &#x2F;&gt;\n\t&lt;constructor-arg name&#x3D;&quot;name&quot; value&#x3D;&quot;阿富汗的&quot;&#x2F;&gt;</code></pre>\n\n\n\n<h3 id=\"5-2、Set方式注入【重点】\"><a href=\"#5-2、Set方式注入【重点】\" class=\"headerlink\" title=\"5.2、Set方式注入【重点】\"></a>5.2、Set方式注入【重点】</h3><ul>\n<li>依赖注入：Set注入<ul>\n<li>依赖：bean对象的创建依赖于容器！</li>\n<li>注入：bean对象中的所有属性，都由容器来注入！</li>\n</ul>\n</li>\n</ul>\n<p>【环境搭建】</p>\n<ol>\n<li>复杂类型</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Address &#123;\n    private String address;\n\n    public String getAddress() &#123;\n        return address;\n    &#125;\n\n    public void setAddress(String address) &#123;\n        this.address &#x3D; address;\n    &#125;\n&#125;</code></pre>\n\n<ol start=\"2\">\n<li>真实测试对象</li>\n</ol>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.pojo;\n\nimport java.util.*;\n\npublic class Student &#123;\n    private String name;\n    private Address address;\n    private String[] books;\n    private List&lt;String&gt; hobbys;\n    private Map&lt;String,String&gt; card;\n    private Set&lt;String&gt; games;\n    private String wife;\n    private Properties info;\n&#125;\n</code></pre>\n\n<ol start=\"3\">\n<li>beans.xml</li>\n</ol>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;\n\n    &lt;bean id&#x3D;&quot;address&quot; class&#x3D;&quot;my.pojo.Address&quot;&gt;\n        &lt;property name&#x3D;&quot;address&quot; value&#x3D;&quot;邢台&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\n    &lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;my.pojo.Student&quot;&gt;\n        &lt;!--    第一种，普通值直接value 赋值 --&gt;\n        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;百度一下你就知道&quot;&#x2F;&gt;\n        &lt;!--    bean 注入，ref   --&gt;\n        &lt;property name&#x3D;&quot;address&quot; ref&#x3D;&quot;address&quot;&#x2F;&gt;\n        &lt;!--   数组注入     --&gt;\n        &lt;property name&#x3D;&quot;books&quot;&gt;\n            &lt;array&gt;\n                &lt;value&gt;红楼梦&lt;&#x2F;value&gt;\n                &lt;value&gt;三国演义&lt;&#x2F;value&gt;\n                &lt;value&gt;水浒传&lt;&#x2F;value&gt;\n                &lt;value&gt;西游记&lt;&#x2F;value&gt;\n            &lt;&#x2F;array&gt;\n        &lt;&#x2F;property&gt;\n\n&lt;!--      List  --&gt;\n        &lt;property name&#x3D;&quot;hobbys&quot;&gt;\n            &lt;list&gt;\n                &lt;value&gt;篮球&lt;&#x2F;value&gt;\n                &lt;value&gt;足球&lt;&#x2F;value&gt;\n                &lt;value&gt;听歌&lt;&#x2F;value&gt;\n            &lt;&#x2F;list&gt;\n        &lt;&#x2F;property&gt;\n\n&lt;!--        Map--&gt;\n        &lt;property name&#x3D;&quot;card&quot;&gt;\n            &lt;map&gt;\n                &lt;entry key&#x3D;&quot;身份证&quot; value&#x3D;&quot;130100101010010101&quot;&gt;&lt;&#x2F;entry&gt;\n                &lt;entry key&#x3D;&quot;银行卡&quot; value&#x3D;&quot;1231231234990&quot;&gt;&lt;&#x2F;entry&gt;\n            &lt;&#x2F;map&gt;\n        &lt;&#x2F;property&gt;\n\n&lt;!--        Set--&gt;\n        &lt;property name&#x3D;&quot;games&quot;&gt;\n            &lt;set&gt;\n                &lt;value&gt;LOL&lt;&#x2F;value&gt;\n                &lt;value&gt;COC&lt;&#x2F;value&gt;\n                &lt;value&gt;CF&lt;&#x2F;value&gt;\n            &lt;&#x2F;set&gt;\n        &lt;&#x2F;property&gt;\n\n&lt;!--        String--&gt;\n        &lt;property name&#x3D;&quot;wife&quot;&gt;\n            &lt;null&#x2F;&gt;\n        &lt;&#x2F;property&gt;\n\n        &lt;property name&#x3D;&quot;info&quot;&gt;\n            &lt;props&gt;\n                &lt;prop key&#x3D;&quot;学号&quot;&gt;20210001&lt;&#x2F;prop&gt;\n                &lt;prop key&#x3D;&quot;phone&quot;&gt;13800012345&lt;&#x2F;prop&gt;\n                &lt;prop key&#x3D;&quot;password&quot;&gt;123456&lt;&#x2F;prop&gt;\n            &lt;&#x2F;props&gt;\n        &lt;&#x2F;property&gt;\n    &lt;&#x2F;bean&gt;\n\n\n&lt;&#x2F;beans&gt;</code></pre>\n\n<p>&#x3D;&#x3D;<strong>结果</strong>&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;*\n* Student&#123;\n* name&#x3D;&#39;百度一下你就知道&#39;,\n* address&#x3D;Address&#123;address&#x3D;&#39;邢台&#39;&#125;,\n* books&#x3D;[红楼梦, 三国演义, 水浒传, 西游记],\n* hobbys&#x3D;[篮球, 足球, 听歌],\n* card&#x3D;&#123;身份证&#x3D;130100101010010101, 银行卡&#x3D;1231231234990&#125;,\n* games&#x3D;[LOL, COC, CF],\n* wife&#x3D;&#39;null&#39;,\n* info&#x3D;&#123;学号&#x3D;20210001, phone&#x3D;13800012345, password&#x3D;123456&#125;&#125;\n*&#x2F;</code></pre>\n\n\n\n<h3 id=\"5-3、拓展方式注入\"><a href=\"#5-3、拓展方式注入\" class=\"headerlink\" title=\"5.3、拓展方式注入\"></a>5.3、拓展方式注入</h3><p>p命名空间和c命名空间进行注入。(不能直接使用，需要导入xml约束)！</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot;\nxmlns:c&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;c&quot;</code></pre>\n\n<p><strong>环境</strong></p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.pojo;\n\npublic class User &#123;\n    private int age;\n    private String name;\n\n    public User() &#123;\n    &#125;\n\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age &#x3D; age;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name &#x3D; name;\n    &#125;\n\n    public User(int age, String name) &#123;\n        this.age &#x3D; age;\n        this.name &#x3D; name;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;User&#123;&quot; +\n                &quot;age&#x3D;&quot; + age +\n                &quot;, name&#x3D;&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<p><strong>配置：</strong></p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot;\n       xmlns:c&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;c&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;\n\t&lt;!-- p命名空间注入，可以直接注入属性的值：property--&gt;\n    &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;my.pojo.User&quot; p:age&#x3D;&quot;18&quot; p:name&#x3D;&quot;abc&quot;&#x2F;&gt;\n    &lt;!-- c命名空间注入，通过构造器注入：construct-args --&gt;\n    &lt;bean id&#x3D;&quot;user2&quot; class&#x3D;&quot;my.pojo.User&quot; c:age&#x3D;&quot;19&quot; c:name&#x3D;&quot;askdfk&quot;&#x2F;&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n<p><strong>测试</strong> </p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class Test &#123;\n    public static void main(String[] args) &#123;\n        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);\n        User user &#x3D; context.getBean(&quot;user&quot;, User.class);\n         System.out.println(user);\n        User user2 &#x3D; context.getBean(&quot;user2&quot;, User.class);\n        System.out.println(user2);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"5-4、bean的作用域\"><a href=\"#5-4、bean的作用域\" class=\"headerlink\" title=\"5.4、bean的作用域\"></a>5.4、bean的作用域</h3><p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20210808175304042.png\" alt=\"image-20210808175304042\"></p>\n<ol>\n<li><p>单例模式(Spring 默认机制)</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220203203007085.png\" alt=\"image-20220203203007085\"></p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;my.pojo.User&quot; p:age&#x3D;&quot;18&quot; p:name&#x3D;&quot;abc&quot; scope&#x3D;&quot;singleton&quot;&#x2F;&gt;</code></pre>\n</li>\n<li><p>原型模式：每次从容器中get的时候，都会从产生一个新的对象！</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220203203016943.png\" alt=\"image-20220203203016943\"></p>\n</li>\n</ol>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;my.pojo.User&quot; p:age&#x3D;&quot;18&quot; p:name&#x3D;&quot;abc&quot; scope&#x3D;&quot;prototype&quot;&#x2F;&gt;</code></pre>\n\n<ol start=\"3\">\n<li>request、session、application、websocket 在web 中使用。</li>\n</ol>\n<h2 id=\"6、Bean自动装配\"><a href=\"#6、Bean自动装配\" class=\"headerlink\" title=\"6、Bean自动装配\"></a>6、Bean自动装配</h2><ul>\n<li>自动装配是Spring满足bean依赖的一种方式！</li>\n<li>Spring会在上下文中自动寻找，并自动给bean装配属性！</li>\n</ul>\n<h3 id=\"6-1、测试\"><a href=\"#6-1、测试\" class=\"headerlink\" title=\"6.1、测试\"></a>6.1、测试</h3><h3 id=\"6-2、ByName-自动装配\"><a href=\"#6-2、ByName-自动装配\" class=\"headerlink\" title=\"6.2、ByName 自动装配\"></a>6.2、ByName 自动装配</h3><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--\n       byName：会自动在容器上下文中查找 和自己对象set方法名一样的 beanId\n       byType：会自动在容器上下文中查找 和自己对象属性相同的 bean\n\n--&gt;\n\n\t&lt;bean id&#x3D;&quot;cat&quot; class&#x3D;&quot;my.pojo.Cat&quot;&#x2F;&gt;\n    &lt;bean id&#x3D;&quot;dog&quot; class&#x3D;&quot;my.pojo.Dog&quot;&#x2F;&gt;\n\n\t&lt;bean id&#x3D;&quot;people&quot; class&#x3D;&quot;my.pojo.People&quot; autowire&#x3D;&quot;byName&quot;&gt;\n        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;abc&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;</code></pre>\n\n\n\n<h3 id=\"6-3、ByType自动装配\"><a href=\"#6-3、ByType自动装配\" class=\"headerlink\" title=\"6.3、ByType自动装配\"></a>6.3、ByType自动装配</h3><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--\n       byName：会自动在容器上下文中查找 和自己对象set方法名一样的 beanId\n       byType：会自动在容器上下文中查找 和自己对象属性相同的 bean\n\n--&gt;\n\t&lt;bean id&#x3D;&quot;cat&quot; class&#x3D;&quot;my.pojo.Cat&quot;&#x2F;&gt;\n    &lt;bean id&#x3D;&quot;dog111&quot; class&#x3D;&quot;my.pojo.Dog&quot;&#x2F;&gt;\n\n    &lt;bean id&#x3D;&quot;people&quot; class&#x3D;&quot;my.pojo.People&quot; autowire&#x3D;&quot;byType&quot;&gt;\n        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;abc&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;</code></pre>\n\n<h3 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h3><ul>\n<li>&#x3D;&#x3D;byName 时，需要保证所有bean的id 唯一，并且这个bean需要和自动注入的属性的set方法的名称一致！&#x3D;&#x3D;</li>\n<li>&#x3D;&#x3D;byType时，需要保证所有bean的class 唯一，并且这个bean需要和自动注入的set方法参数的类型一致！&#x3D;&#x3D;</li>\n</ul>\n<h3 id=\"6-4、使用注解实现自动装配\"><a href=\"#6-4、使用注解实现自动装配\" class=\"headerlink\" title=\"6.4、使用注解实现自动装配\"></a>6.4、使用注解实现自动装配</h3><p>使用注解须知：</p>\n<ol>\n<li>导入约束：context约束</li>\n<li>配置注解的约束：&#x3D;&#x3D;<a href=\"context:annotation-config/\">context:annotation-config/</a>&#x3D;&#x3D;</li>\n</ol>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n    xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;\n    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\n        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context\n        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;\n\n    &lt;context:annotation-config&#x2F;&gt;\n\n&lt;&#x2F;beans&gt;</code></pre>\n\n<p><strong>@Autowird</strong></p>\n<p>在属性上使用即可！也可以在set方式上使用</p>\n<p>使用Autowird 可以不用编写set方法，前提是自动装配的属性在IOC(Spring)容器中存在，且符合类型byType</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Nullable  这个字段可以为null\n@AutoWired(required &#x3D;false)</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public @interface Autowired &#123;\n    boolean required() default true;\n&#125;</code></pre>\n\n<p>测试代码</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class People &#123;\n    private String name;\n    @Autowired\n    private Cat cat;\n    @Autowired\n    private Dog dog;\n&#125;</code></pre>\n\n\n\n<p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解【@Autowired】完成的时候、我们可以使用@Qualifier(value&#x3D;”xxx”)去配置@Autowired的使用，指定一个唯一的bean对象注入</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class People &#123;\n    private String name;\n    @Autowired\n    private Cat cat;\n    @Autowired\n    @Qualifier(value &#x3D; &quot;dog222&quot;)\n    private Dog dog;\n&#125;</code></pre>\n\n<p>&#x3D;&#x3D;<strong>@Autowire 先使用byType，如果唯一则注入，否则用byName查找。</strong>&#x3D;&#x3D;</p>\n<p>@Resource注解</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class People &#123;\n    private String name;\n    @Resource\n    private Cat cat;\n\n    @Resource\n    private Dog dog;\n&#125;</code></pre>\n\n\n\n<p>小结：@Resource和@Autowired的区别</p>\n<ul>\n<li>都可以放在属性字段上，用来自动装配</li>\n<li>&#x3D;&#x3D;<strong>@Autowired 先使用byType，如果唯一则注入，否则用byName查找。</strong>&#x3D;&#x3D;</li>\n<li>&#x3D;&#x3D;<strong>@Resource 默认通过byName方式实现，如果找不到名字，则通过byType方式实现， 如果两个都找不到则报错。</strong>&#x3D;&#x3D;</li>\n</ul>\n<h2 id=\"7、使用注解开发\"><a href=\"#7、使用注解开发\" class=\"headerlink\" title=\"7、使用注解开发\"></a>7、使用注解开发</h2><p>在Spring4之后，要使用注解开发，必须要保证aop的包导入。使用注解需要导入context约束，增加注解支持</p>\n<ol>\n<li><p>bean</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class User &#123;\n    public String name;\n&#125;</code></pre>\n\n\n</li>\n<li><p>属性如何注入</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class User &#123;\n    @Value(&quot;百度一下，你就知道&quot;)\n    public String name;\n&#125;</code></pre>\n\n\n</li>\n<li><p>衍生的注解</p>\n<p>@Component 有几个衍生注解，在web开发中，会按照mvc三层架构分层</p>\n<ul>\n<li><p>Dao层：@Repository</p>\n</li>\n<li><p>Service层：@Service</p>\n</li>\n<li><p>controller层：@Controller</p>\n<p>&#x3D;&#x3D;这四个注解功能都是一样的，都是将代表某个类注册到Spring中，装配Bean&#x3D;&#x3D;</p>\n</li>\n</ul>\n</li>\n<li><p>自动装配</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Autowired ： 通过类型、名字，自动装配对象\n@Nullable：字段标记注解，说明这个字段可以为null\n@Resource： 通过名字、类型，自动装配对象\n    </code></pre>\n</li>\n<li><p>作用域</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Scope(&quot; &quot;) singleton单例模式，  prototype多例</code></pre>\n</li>\n<li><p>小结</p>\n</li>\n</ol>\n<p>xml与注解</p>\n<ul>\n<li>xml更万能，适用于任何场合！维护方便</li>\n<li>注解 不是自己的类使用不了，维护相对复杂！</li>\n</ul>\n<p>xml与注解的最佳实践：</p>\n<ul>\n<li>xml用来管理bean；</li>\n<li>注解只负责完成属性的注入；</li>\n<li>在使用过程中，只需要注意一个问题，必须让注解生效， 就需要开启注解的支持</li>\n</ul>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--    指定要扫描的包，包下的注解就会生效--&gt;\n    &lt;context:component-scan base-package&#x3D;&quot;my.pojo&quot;&#x2F;&gt;\n    &lt;context:annotation-config&#x2F;&gt;\n</code></pre>\n\n\n\n\n\n<p><strong>注解说明</strong></p>\n<ul>\n<li><p>@Autowired ： 通过类型、名字，自动装配对象</p>\n</li>\n<li><p>@Nullable：字段标记注解，说明这个字段可以为null</p>\n</li>\n<li><p>@Resource： 通过名字、类型，自动装配对象</p>\n</li>\n<li><p>@Component：组件，放在类上，说明Spring 被管理了，就是bean</p>\n</li>\n</ul>\n<h2 id=\"8、使用Java的方式配置Spring\"><a href=\"#8、使用Java的方式配置Spring\" class=\"headerlink\" title=\"8、使用Java的方式配置Spring\"></a>8、使用Java的方式配置Spring</h2><p>不使用xml配置，全权交给java来做！</p>\n<h3 id=\"实体类\"><a href=\"#实体类\" class=\"headerlink\" title=\"实体类\"></a>实体类</h3><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.pojo;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class User &#123;\n    private String name;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    @Value(&quot;ajkdjaklj&quot;)\n    public void setName(String name) &#123;\n        this.name &#x3D; name;\n    &#125;\n&#125;\n</code></pre>\n\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package my.config;\n\nimport my.pojo.User;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n&#x2F;&#x2F;会被Spring 容器托管，注册到容器中，本身就是一个 @Component\n&#x2F;&#x2F;@Configuration代表一个配置类，相当于applicationContext.xml\n\n@Configuration\npublic class MyConfig &#123;\n\n    &#x2F;&#x2F;相当于&lt;bean id&#x3D;&quot;getUser&quot; class&#x3D;&quot;my.pojo.User&#x2F;&gt;\n    &#x2F;&#x2F;这个方法中的名字，就相当于bean标签中的ID，\n    &#x2F;&#x2F; 方法中的返回值相当于bean标签中的class属性。\n\n    @Bean\n    public User getuser()&#123;\n        return new User();      &#x2F;&#x2F;返回要注入到bean的对象\n    &#125;\n&#125;\n</code></pre>\n\n<h3 id=\"测试类\"><a href=\"#测试类\" class=\"headerlink\" title=\"测试类\"></a>测试类</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package my;\n\nimport my.config.MyConfig;\nimport my.pojo.User;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\npublic class MyTest &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F;如果完全使用了配置类方式去做，我们就只能通过AnnotationConfig 上下文来获取容器，通过配置类的Class对象加载！\n        ApplicationContext context &#x3D; new AnnotationConfigApplicationContext(MyConfig.class);\n        &#x2F;*\n        *    使用Configuration注解，代表这是一个配置类。相当于applicationContext.xml\n        *    使用@Bean注解在配置类中声明在方法上后，getBean时调用方法名，即可获取对象。  @Bean就是相当于xml中的一个bean标签。，方法名字就是id属性，返回值就是class属性\n        *    使用@Component注解，在注解类中添加@ComponentScan(类路径),getBean时调用类名(小写)，即可获取对象\n        *\n        *\n        *&#x2F;\n        User user &#x3D; (User) context.getBean(&quot;user&quot;);\n        User user1 &#x3D; (User)context.getBean(&quot;getUser&quot;);\n\n        System.out.println(user&#x3D;&#x3D;user1);\n    &#125;\n&#125;\n</code></pre>\n\n<p>&#x3D;&#x3D;<strong>纯Java的配置方式，在SpringBoot中随处可见！</strong>&#x3D;&#x3D;</p>\n<p>使用@Configuration声明配置类时，两种方法来生成Bean：</p>\n<ul>\n<li>在配置类中定义一个方法，用@Bean来注解声明</li>\n<li>在User类上用@Component注解，并在配置类上@ComponentScan(“User类的路径”),这样会自动扫描包，getBean的时候使用的id就是类名的小写。</li>\n</ul>\n<h2 id=\"9、代理模式\"><a href=\"#9、代理模式\" class=\"headerlink\" title=\"9、代理模式\"></a>9、代理模式</h2><p>代理模式，SpringAOP底层。</p>\n<p>代理模式的分类：</p>\n<ul>\n<li>静态代理</li>\n<li>动态代理</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20210809211333532.png\" alt=\"image-20210809211333532\"></p>\n<h3 id=\"9-1、静态代理\"><a href=\"#9-1、静态代理\" class=\"headerlink\" title=\"9.1、静态代理\"></a>9.1、静态代理</h3><p>角色分析：</p>\n<ul>\n<li>抽象角色：一般会使用接口或者抽象类来解决。</li>\n<li>真实角色：被代理的角色</li>\n<li>代理角色：代理真实角色，代理真实角色后，做一些附属操作。</li>\n<li>客服：访问代理对象的人。</li>\n</ul>\n<p>代码步骤：</p>\n<ol>\n<li><p>接口</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public interface Rent&#123;\n    void rent();\n&#125;</code></pre>\n\n\n</li>\n<li><p>真实角色</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class Host implements Rent &#123;\n    public void rent()&#123;\n        System.out.println(&quot;房东要出租房子&quot;);\n    &#125;\n&#125;</code></pre>\n\n\n</li>\n<li><p>代理角色</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.demo01;\n\npublic class Proxy &#123;\n    private Host host;\n\n    public Proxy() &#123;\n    &#125;\n\n    public Proxy(Host host) &#123;\n        this.host &#x3D; host;\n    &#125;\n\n    &#x2F;&#x2F;代理中介转租房子\n    public void rent()&#123;\n        seeHouse();\n        host.rent();\n        contract();\n        fee();\n    &#125;\n\n    &#x2F;&#x2F;添加额外服务\n    private void fee()&#123;\n        System.out.println(&quot;中介收取中介费&quot;);\n    &#125;\n\n    private void seeHouse()&#123;\n        System.out.println(&quot;中介带领看房。&quot;);\n    &#125;\n\n    private void contract()&#123;\n        System.out.println(&quot;签订合同&quot;);\n    &#125;\n&#125;\n</code></pre>\n\n\n</li>\n<li><p>客户端访问代理角色</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.demo01;\n\npublic class Client &#123;\n    public static void main(String[]args)&#123;\n        \n     \t &#x2F;&#x2F;房东出租房子\n        Host host &#x3D; new Host();\n        &#x2F;&#x2F;代理，中介帮房东出租房子，并附加额外操作\n        Proxy proxy &#x3D; new Proxy(host);\n\n       &#x2F;&#x2F;面向中介租房\n        proxy.rent();\n    &#125;\n&#125;</code></pre></li>\n</ol>\n<p><strong>代理模式的好处：</strong></p>\n<ul>\n<li>可以使真实的角色的操作更加纯粹！不用关注一些公共业务</li>\n<li>公共业务交给代理角色，实现业务分工</li>\n<li>公共业务发生扩展时，方便集中管理</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>一个真实角色就会产生一个代理角色，代码量增加，开发效率变低。</li>\n</ul>\n<p>在不破坏原有代码的基础上，利用”织入“的模式来实现代码的动态设置</p>\n<p>&#x3D;&#x3D;<strong>AOP(面向切面编程)</strong>&#x3D;&#x3D;</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20210809231700107.png\" alt=\"image-20210809231700107\"></p>\n<h3 id=\"9-2、动态代理\"><a href=\"#9-2、动态代理\" class=\"headerlink\" title=\"9.2、动态代理\"></a>9.2、动态代理</h3><ul>\n<li>动态代理和静态代理角色一样。<ul>\n<li>抽象角色：一般会使用接口或者抽象类来解决。</li>\n<li>真实角色：被代理的角色</li>\n<li>代理角色：代理真实角色，代理真实角色后，做一些附属操作。</li>\n<li>客服：访问代理对象的人。</li>\n</ul>\n</li>\n<li>动态代理的代理类是动态生成的，不是我们直接写好的。</li>\n<li>动态代理分为两大类：&#x3D;&#x3D;<strong>基于接口的动态代理，基于类的动态代理</strong>&#x3D;&#x3D;<ul>\n<li>基于接口 —JDK动态代理</li>\n<li>基于类：cglib</li>\n<li>java字节码实现： &#x3D;&#x3D;<strong>JAVAssist</strong>&#x3D;&#x3D;</li>\n</ul>\n</li>\n</ul>\n<p>Proxy：生成动态代理实例</p>\n<p>InvocationHandler： 调用处理程序并返回结果</p>\n<p><strong>动态代理的好处</strong></p>\n<ul>\n<li>可以使真实的角色的操作更加纯粹！不用关注一些公共业务</li>\n<li>公共业务交给代理角色，实现业务分工</li>\n<li>公共业务发生扩展时，方便集中管理</li>\n<li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li>\n<li>一个动态代理类可以代理多个类，只要是实现了同一个接口</li>\n</ul>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.demo04;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\npublic class ProxyInvocationHandler implements InvocationHandler &#123;\n\n    private Object target;\n\n    public void setTarget(Object target) &#123;\n        this.target &#x3D; target;\n    &#125;\n\n    public Object getProxy() &#123;\n        return Proxy.newProxyInstance(this.getClass().getClassLoader(), target.getClass().getInterfaces(), this);\n    &#125;\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;\n        log(method.getName());\n        Object invoke &#x3D; method.invoke(target, args);\n        return invoke;\n    &#125;\n\n    public void log(String msg)&#123;\n        System.out.println(&quot;执行了&quot; + msg + &quot;方法&quot;);\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package my.demo04;\n\nimport my.demo02.UserService;\nimport my.demo02.UserServiceImpl;\n\npublic class Client &#123;\n    public static void main(String[] args) &#123;\n        UserServiceImpl userService &#x3D; new UserServiceImpl();\n\n        ProxyInvocationHandler pih &#x3D; new ProxyInvocationHandler();\n        pih.setTarget(userService);\n        UserService proxy &#x3D; (UserService) pih.getProxy();\n\n        proxy.add();\n    &#125;\n&#125;\n</code></pre>\n\n\n\n\n\n<h2 id=\"10、AOP\"><a href=\"#10、AOP\" class=\"headerlink\" title=\"10、AOP\"></a>10、AOP</h2><h3 id=\"10-1、什么是AOP\"><a href=\"#10-1、什么是AOP\" class=\"headerlink\" title=\"10.1、什么是AOP\"></a>10.1、什么是AOP</h3><p>AOP（Aspect Oriented Prigramming）面向切面编程，通过预编译方式和运行期间动态代理实现程序功能的统一维护的一种技术，AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生泛型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可用性，同时提高了开发效率。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20210811144332273.png\" alt=\"image-20210811144332273\"></p>\n<h3 id=\"10-2、AOP在Spring中的作用\"><a href=\"#10-2、AOP在Spring中的作用\" class=\"headerlink\" title=\"10.2、AOP在Spring中的作用\"></a>10.2、AOP在Spring中的作用</h3><p>&#x3D;&#x3D;提供声明式事务；允许用户自定义切面&#x3D;&#x3D;</p>\n<ul>\n<li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志，安全，缓存，事务等等…</li>\n<li>切面(Aspect) ：横切关注点 被模块化的特殊对象，即，它是一个类</li>\n<li>通知(Adivce)：切面必须要完成的工作。即，它是类中的一个方法。</li>\n<li>目标(Target)：被通知对象</li>\n<li>代理(Proxy)：向目标对象应用通知之后创建的对象</li>\n<li>切入点(PointCut) ：切面通知执行的”地点”的定义</li>\n<li>连接点(JointPoint)：与切入点匹配的执行点。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20210811180649952.png\" alt=\"image-20210811180649952\"></p>\n<h3 id=\"10-3、在Spring中使用AOP\"><a href=\"#10-3、在Spring中使用AOP\" class=\"headerlink\" title=\"10.3、在Spring中使用AOP\"></a>10.3、在Spring中使用AOP</h3><p><strong>使用AOP织入，需要导入依赖包</strong></p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;1.9.4&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n\n\n<h4 id=\"方式一：使用Spring-API-接口【SpringAPI接口实现】\"><a href=\"#方式一：使用Spring-API-接口【SpringAPI接口实现】\" class=\"headerlink\" title=\"方式一：使用Spring API 接口【SpringAPI接口实现】\"></a>方式一：使用Spring API 接口【SpringAPI接口实现】</h4><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.demo01;\n\nimport org.springframework.aop.MethodBeforeAdvice;\n\nimport java.lang.reflect.Method;\n\npublic class log implements MethodBeforeAdvice &#123;\n    @Override\n    public void before(Method method, Object[] objects, Object o) throws Throwable &#123;\n        System.out.println(o.getClass().getName() + &quot;的&quot; + method.getName() + &quot;被执行了&quot;);\n    &#125;\n&#125;\n\n</code></pre>\n\n\n\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.demo01;\n\nimport org.springframework.aop.AfterReturningAdvice;\n\nimport java.lang.reflect.Method;\n\npublic class AfterLog implements AfterReturningAdvice &#123;\n    @Override\n    public void afterReturning(Object o, Method method, Object[] objects, Object o1) throws Throwable &#123;\n        System.out.println(&quot;执行了&quot; + method.getName() + &quot;方法，返回结果为&quot; + o);\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--    方式一：使用原生SPring API接口--&gt;\n&lt;!--    需要导入aop约束--&gt;\n&lt;aop:config&gt;\n&lt;!--    切入点，expression:表达式，execution(要执行的位置！* * * * * )   修饰词 返回值 类名 方法名 参数--&gt;\n    &lt;aop:pointcut id&#x3D;&quot;pointCut&quot; expression&#x3D;&quot;execution(* my.service.UserServiceImpl.*(..))&quot;&#x2F;&gt;\n\n&lt;!--        执行环绕增加--&gt;\n    &lt;aop:advisor advice-ref&#x3D;&quot;log&quot; pointcut-ref&#x3D;&quot;pointCut&quot;&#x2F;&gt;\n    &lt;aop:advisor advice-ref&#x3D;&quot;afterLog&quot; pointcut-ref&#x3D;&quot;pointCut&quot;&#x2F;&gt;\n&lt;&#x2F;aop:config&gt;</code></pre>\n\n\n\n<h4 id=\"方式二：自定义类来实现AOP【切面定义】\"><a href=\"#方式二：自定义类来实现AOP【切面定义】\" class=\"headerlink\" title=\"方式二：自定义类来实现AOP【切面定义】\"></a>方式二：自定义类来实现AOP【切面定义】</h4><pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--    方式2：自定义类--&gt;\n    &lt;bean id&#x3D;&quot;diy&quot; class&#x3D;&quot;my.diy.DiyPointCut&quot;&#x2F;&gt;\n    &lt;aop:config&gt;\n        &lt;!-- 自定义切面，ref要引用的类--&gt;\n        &lt;aop:aspect ref&#x3D;&quot;diy&quot;&gt;\n            &lt;aop:pointcut id&#x3D;&quot;point&quot; expression&#x3D;&quot;execution(* my.service.UserServiceImpl.*(..))&quot;&#x2F;&gt;\n            &lt;aop:before method&#x3D;&quot;before&quot; pointcut-ref&#x3D;&quot;point&quot;&#x2F;&gt;\n            &lt;aop:after method&#x3D;&quot;after&quot; pointcut-ref&#x3D;&quot;point&quot;&#x2F;&gt;\n        &lt;&#x2F;aop:aspect&gt;\n    &lt;&#x2F;aop:config&gt;</code></pre>\n\n<h4 id=\"方式三：使用注解实现\"><a href=\"#方式三：使用注解实现\" class=\"headerlink\" title=\"方式三：使用注解实现\"></a>方式三：使用注解实现</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--    使用注解--&gt;\n    &lt;bean id&#x3D;&quot;annotation&quot; class&#x3D;&quot;my.diy.AnnotationPointcut&quot;&#x2F;&gt;\n&lt;!--开启注解支持！ JDK默认 (proxy-target-class&#x3D;&quot;false&quot;) cglib  proxy-target-class&#x3D;&quot;true&quot;--&gt;\n    &lt;aop:aspectj-autoproxy&#x2F;&gt;</code></pre>\n\n\n\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.diy;\n\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.Signature;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\n\n@Aspect\npublic class AnnotationPointcut &#123;\n\n    @Before(&quot;execution(* my.demo01.UserServiceImpl.*(..))&quot;)\n    public void before()&#123;\n        System.out.println(&quot;方法执行前&quot;);\n    &#125;\n    @After(&quot;execution(* my.demo01.UserServiceImpl.*(..))&quot;)\n    public void after()&#123;\n        System.out.println(&quot;方法执行后&quot;);\n    &#125;\n\n    &#x2F;&#x2F;在环绕增强中，给定一个参数，代表我们要获取处理切入的点\n    @Around(&quot;execution(* my.demo01.UserServiceImpl.*(..))&quot;)\n    public void around(ProceedingJoinPoint joinPoint) throws Throwable &#123;\n        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;环绕前&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n\n        &#x2F;&#x2F;获得签名\n        Signature signature &#x3D; joinPoint.getSignature();\n        System.out.println(signature);\n        &#x2F;&#x2F;执行方法\n        Object proceed &#x3D; joinPoint.proceed();\n\n        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;环绕后&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n    &#125;\n\n\n&#125;\n</code></pre>\n\n<p><strong>运行结果</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220212230901101.png\" alt=\"image-20220212230901101\"></p>\n<h2 id=\"11、整合Mybatis\"><a href=\"#11、整合Mybatis\" class=\"headerlink\" title=\"11、整合Mybatis\"></a>11、整合Mybatis</h2><ol>\n<li>导入相关jar包</li>\n</ol>\n<ul>\n<li>junit</li>\n<li>mysql</li>\n<li>spring-webmvc</li>\n<li>spring-jdbc</li>\n<li>aop织入</li>\n<li>mybatis-spring【new】</li>\n</ul>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;5.1.47&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;1.9.4&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;3.5.2&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;2.0.6&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;5.3.9&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;5.3.9&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;</code></pre>\n\n<h3 id=\"11-1回顾Mybatis\"><a href=\"#11-1回顾Mybatis\" class=\"headerlink\" title=\"11.1回顾Mybatis\"></a>11.1回顾Mybatis</h3><p>配置Mybatis-config.xml</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE configuration\n        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;\n        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;\n&lt;configuration&gt;\n    &lt;typeAliases&gt;\n        &lt;package name&#x3D;&quot;my.pojo&quot;&#x2F;&gt;\n    &lt;&#x2F;typeAliases&gt;\n    &lt;environments default&#x3D;&quot;development&quot;&gt;\n        &lt;environment id&#x3D;&quot;development&quot;&gt;\n            &lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;\n            &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;\n                &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;\n                &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test?useSSL&#x3D;true&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&quot;&#x2F;&gt;\n                &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;\n                &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot;&#x2F;&gt;\n            &lt;&#x2F;dataSource&gt;\n        &lt;&#x2F;environment&gt;\n    &lt;&#x2F;environments&gt;\n    &lt;mappers&gt;\n        &lt;mapper class&#x3D;&quot;my.mapper.UserMapper&quot;&#x2F;&gt;\n    &lt;&#x2F;mappers&gt;\n&lt;&#x2F;configuration&gt;</code></pre>\n\n\n\n<p>Pojo类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package my.pojo;\n\npublic class User &#123;\n    private int id;\n    private String name;\n    private String password;\n\n    public User() &#123;\n    &#125;\n\n    public User(int id, String name, String password) &#123;\n        this.id &#x3D; id;\n        this.name &#x3D; name;\n        this.password &#x3D; password;\n    &#125;\n\n    public int getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(int id) &#123;\n        this.id &#x3D; id;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name &#x3D; name;\n    &#125;\n\n    public String getPassword() &#123;\n        return password;\n    &#125;\n\n    public void setPassword(String password) &#123;\n        this.password &#x3D; password;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;User&#123;&quot; +\n                &quot;id&#x3D;&quot; + id +\n                &quot;, name&#x3D;&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &quot;, password&#x3D;&#39;&quot; + password + &#39;\\&#39;&#39; +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<p>Mapper</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.mapper;\n\nimport my.pojo.User;\n\nimport java.util.List;\n\npublic interface UserMapper &#123;\n    List&lt;User&gt; selectUser();\n\n&#125;\n</code></pre>\n\n<p>Mapper.xml</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;\n        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace&#x3D;&quot;my.mapper.UserMapper&quot;&gt;\n    &lt;select id&#x3D;&quot;selectUser&quot; resultType&#x3D;&quot;user&quot;&gt;\n         select * from user;\n    &lt;&#x2F;select&gt;\n&lt;&#x2F;mapper&gt;</code></pre>\n\n<p>在mybatis-config.xml中配置mapper</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;mappers&gt;\n    &lt;mapper class&#x3D;&quot;my.mapper.UserMapper&quot;&#x2F;&gt;\n&lt;&#x2F;mappers&gt;</code></pre>\n\n\n\n<p>Test测试类</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">import my.mapper.UserMapper;\nimport my.pojo.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\npublic class Test1 &#123;\n    public static void main(String[] args) throws IOException &#123;\n        String resources &#x3D; &quot;mybatis-config.xml&quot;;\n        InputStream stream &#x3D; Resources.getResourceAsStream(resources);\n        SqlSessionFactory build &#x3D; new SqlSessionFactoryBuilder().build(stream);\n        SqlSession sqlSession &#x3D; build.openSession();\n        UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);\n        List&lt;User&gt; users &#x3D; mapper.selectUser();\n        for (User user: users) &#123;\n            System.out.println(user);\n        &#125;\n\n    &#125;\n&#125;\n</code></pre>\n\n<p>执行结果</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220225172511245.png\" alt=\"image-20220225172509576\"></p>\n<h3 id=\"11-2Mybatis-Spring\"><a href=\"#11-2Mybatis-Spring\" class=\"headerlink\" title=\"11.2Mybatis-Spring\"></a>11.2Mybatis-Spring</h3><pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;\n\n&lt;!--    编写数据源配置--&gt;\n    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;\n        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test?useSSL&#x3D;true&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n&lt;!--    编写sqlSessionFactory--&gt;\n    &lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;\n        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;\n&lt;!--        绑定Mybatis配置文件--&gt;\n        &lt;property name&#x3D;&quot;configLocation&quot; value&#x3D;&quot;classpath:mybatis-config.xml&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;mapperLocations&quot; value&#x3D;&quot;classpath:my&#x2F;mapper&#x2F;*.xml&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\n&lt;!--    没有set方法使用构造方法注入--&gt;\n    &lt;bean id&#x3D;&quot;sqlSession&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;\n        &lt;constructor-arg index&#x3D;&quot;0&quot; ref&#x3D;&quot;sqlSessionFactory&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\n    &lt;bean id&#x3D;&quot;userMapper&quot; class&#x3D;&quot;my.mapper.UserMapperImpl&quot;&gt;\n        &lt;property name&#x3D;&quot;sqlSessionTemplate&quot; ref&#x3D;&quot;sqlSession&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n\n\n<ol>\n<li><p>编写数据源配置</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--    DataSource：使用Spring的数据源替换Mybatis的位置 c3p0 dbcp druid\n        这里使用Spring 提供的JDBC org.springframework.jdbc.datasource.DriverManagerDataSource\n--&gt;\n    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;\n        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?useSSL&#x3D;true&amp;useUncode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n</code></pre>\n\n\n</li>\n<li><p>sqlSessionFactory</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--    sqlSessionFactory--&gt;\n    &lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;\n        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;\n        &lt;!--        绑定Mybatis 配置文件--&gt;\n        &lt;property name&#x3D;&quot;configLocation&quot; value&#x3D;&quot;classpath:mybatis-config.xml&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;mapperLocations&quot; value&#x3D;&quot;classpath:my&#x2F;mapper&#x2F;*.xml&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;</code></pre>\n\n\n</li>\n<li><p>sqlSessionTemplate</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--    SqlSessionTemplate 就是SqlSession--&gt;\n    &lt;bean id&#x3D;&quot;sqlSession&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;\n        &lt;constructor-arg index&#x3D;&quot;0&quot; ref&#x3D;&quot;sqlSessionFactory&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;</code></pre>\n\n\n</li>\n<li><p>给接口加实现类</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class UserMapperImpl implements UserMapper &#123;\n\n    private SqlSessionTemplate sqlSession;\n\n    public void setSqlSession(SqlSessionTemplate sqlSession) &#123;\n        this.sqlSession &#x3D; sqlSession;\n    &#125;\n\n    public List&lt;User&gt; selectUser() &#123;\n        UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);\n        return mapper.selectUser();\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>注册bean</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;bean id&#x3D;&quot;userMapper&quot; class&#x3D;&quot;my.mapper.UserMapperImpl&quot;&gt;\n    &lt;property name&#x3D;&quot;sqlSessionTemplate&quot; ref&#x3D;&quot;sqlSession&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n\n</li>\n<li><p>测试</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class Test &#123;\n    public static void main(String[] args) &#123;\n        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n        UserMapper userMapper &#x3D; context.getBean(&quot;userMapper&quot;, UserMapper.class);\n        List&lt;User&gt; userList &#x3D; userMapper.selectUser();\n        for (User user : userList) &#123;\n            System.out.println(user);\n        &#125;\n    &#125;\n&#125;</code></pre></li>\n</ol>\n<h4 id=\"方式二：SqlSessionDaoSupport\"><a href=\"#方式二：SqlSessionDaoSupport\" class=\"headerlink\" title=\"方式二：SqlSessionDaoSupport\"></a>方式二：SqlSessionDaoSupport</h4><ol>\n<li><p>Spring 配置</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;\n\n    &lt;!--    编写数据源配置--&gt;\n    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;\n        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;url&quot;\n                  value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test?useSSL&#x3D;true&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n    &lt;!--    编写sqlSessionFactory--&gt;\n    &lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;\n        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;\n        &lt;!--        绑定Mybatis配置文件--&gt;\n        &lt;property name&#x3D;&quot;configLocation&quot; value&#x3D;&quot;classpath:mybatis-config.xml&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;mapperLocations&quot; value&#x3D;&quot;classpath:my&#x2F;mapper&#x2F;*.xml&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\n    &lt;!--    没有set方法使用构造方法注入--&gt;\n    &lt;bean id&#x3D;&quot;sqlSession&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;\n        &lt;constructor-arg index&#x3D;&quot;0&quot; ref&#x3D;&quot;sqlSessionFactory&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n    &lt;!-- 注册Bean--&gt;\n    &lt;bean id&#x3D;&quot;userMapper&quot; class&#x3D;&quot;my.mapper.UserMapperImpl&quot;&gt;\n        &lt;property name&#x3D;&quot;sqlSessionTemplate&quot; ref&#x3D;&quot;sqlSession&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\n    &lt;!-- SqlSessionDaoSupport注册Bean--&gt;\n    &lt;bean id&#x3D;&quot;userMapper2&quot; class&#x3D;&quot;my.mapper.UserMapperImpl2&quot;&gt;\n&lt;!--        需要注入sqlSessionFactory--&gt;\n        &lt;property name&#x3D;&quot;sqlSessionFactory&quot; ref&#x3D;&quot;sqlSessionFactory&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n</li>\n<li><p>sqlSessionDaoSupport</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package my.mapper;\n\nimport my.pojo.User;\nimport org.mybatis.spring.support.SqlSessionDaoSupport;\n\nimport java.util.List;\n\npublic class UserMapperImpl2 extends SqlSessionDaoSupport implements UserMapper &#123;\n    public List&lt;User&gt; selectUser() &#123;\n        return getSqlSession().getMapper(UserMapper.class).selectUser();\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li><p>测试</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class Test &#123;\n    public static void main(String[] args) &#123;\n        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n        UserMapper userMapper &#x3D; context.getBean(&quot;userMapper2&quot;, UserMapper.class);\n        List&lt;User&gt; userList &#x3D; userMapper.selectUser();\n        for (User user : userList) &#123;\n            System.out.println(user);\n        &#125;\n    &#125;\n&#125;\n</code></pre></li>\n</ol>\n<h2 id=\"12、声明式事务\"><a href=\"#12、声明式事务\" class=\"headerlink\" title=\"12、声明式事务\"></a>12、声明式事务</h2><h3 id=\"1、回顾事务\"><a href=\"#1、回顾事务\" class=\"headerlink\" title=\"1、回顾事务\"></a>1、回顾事务</h3><ul>\n<li>把一组业务当成一个业务来做；要么都成功，要么都失败</li>\n<li>事务在项目开发中，十分的重要，涉及到数据的一致性问题，不能马虎！</li>\n<li>确保完整性和一致性！</li>\n</ul>\n<p>&#x3D;&#x3D;<strong>事务ACID原则：</strong>&#x3D;&#x3D;</p>\n<ul>\n<li>原子性</li>\n<li>一致性</li>\n<li>隔离性<ul>\n<li>多个业务操作同一个资源，防止数据损坏。</li>\n</ul>\n</li>\n<li>持久性<ul>\n<li>一旦提交，无论系统发生什么问题，结果都不会被影响，被持久化的写到存储器中。</li>\n</ul>\n</li>\n</ul>\n<p>2、Spring中的事务管理</p>\n<ul>\n<li>声明式事务：AOP</li>\n<li>编程式事务：需要在代码中，进行事务的管理。</li>\n</ul>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--    配置声明式事务--&gt;\n    &lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;\n       &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\n    &lt;!--  配置事务通知  --&gt;\n    &lt;tx:advice id&#x3D;&quot;transaction&quot; transaction-manager&#x3D;&quot;transactionManager&quot;&gt;\n        &lt;tx:attributes&gt;\n            &lt;!-- name名字需要和mapper中的方法名一致--&gt;\n            &lt;tx:method name&#x3D;&quot;add&quot; propagation&#x3D;&quot;REQUIRED&quot;&#x2F;&gt;\n            &lt;tx:method name&#x3D;&quot;delete&quot; propagation&#x3D;&quot;REQUIRED&quot;&#x2F;&gt;\n            &lt;tx:method name&#x3D;&quot;update&quot; propagation&#x3D;&quot;REQUIRED&quot;&#x2F;&gt;\n            &lt;tx:method name&#x3D;&quot;query&quot; read-only&#x3D;&quot;true&quot;&#x2F;&gt;\n            &lt;tx:method name&#x3D;&quot;*&quot; propagation&#x3D;&quot;REQUIRED&quot;&#x2F;&gt;\n        &lt;&#x2F;tx:attributes&gt;\n    &lt;&#x2F;tx:advice&gt;\n\n&lt;!--    结合AOP 实现事务织入--&gt;\n    &lt;aop:config&gt;\n        &lt;aop:pointcut id&#x3D;&quot;transactionPointCut&quot; expression&#x3D;&quot;execution(* my.mapper.*.*(..))&quot;&#x2F;&gt;\n        &lt;aop:advisor advice-ref&#x3D;&quot;transaction&quot; pointcut-ref&#x3D;&quot;transactionPointCut&quot;&#x2F;&gt;\n    &lt;&#x2F;aop:config&gt;\n</code></pre>\n\n\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-2022011021200296.png\" alt=\"image-2022011021200296\"></p>\n<p>&#x3D;&#x3D;<strong>为什么需要事务</strong>&#x3D;&#x3D;</p>\n<ul>\n<li>如果不配置事务，可能存在数据提交不一致的情况</li>\n<li>如果不在Spring中配置声明式事务，就需要在代码中手动配置事务</li>\n<li>事务在醒目开发中十分重要，涉及到数据的一致性和完整性问题，不容马虎！</li>\n</ul>\n","text":"Spring21.8.7 1、Spring1.1、简介Spring是一个开源框架，它由Rod Johnson创建。它是为了解决企业应用开发的复杂性而创建的。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。Spring是一个轻量级的控制反转(IoC)和面向...","link":"","photos":[],"count_time":{"symbolsCount":"43k","symbolsTime":"39 mins."},"categories":[],"tags":[{"name":"Spring框架","slug":"Spring框架","count":3,"path":"api/tags/Spring框架.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Spring\"><span class=\"toc-text\">Spring</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81Spring\"><span class=\"toc-text\">1、Spring</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1.1、简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2%E3%80%81%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">1.2、优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3%E3%80%81%E7%BB%84%E6%88%90\"><span class=\"toc-text\">1.3、组成</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4%E3%80%81%E6%8B%93%E5%B1%95\"><span class=\"toc-text\">1.4、拓展</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81IOC%E7%90%86%E8%AE%BA%E6%8E%A8%E5%AF%BC\"><span class=\"toc-text\">2、IOC理论推导</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IOC%E6%9C%AC%E8%B4%A8\"><span class=\"toc-text\">IOC本质</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81IOC%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3、IOC创建对象的方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8Spring%E6%96%B9%E5%BC%8F%E4%BB%8E%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">使用Spring方式从创建对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%97%A0%E5%8F%82%E6%9E%84%E9%80%A0%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E9%BB%98%E8%AE%A4%EF%BC%81\"><span class=\"toc-text\">使用无参构造创建对象，默认！</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%9C%89%E5%8F%82%E6%9E%84%E9%80%A0%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E3%80%82\"><span class=\"toc-text\">使用有参构造创建对象。</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81Spring%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">4、Spring配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1%E3%80%81%E5%88%AB%E5%90%8D\"><span class=\"toc-text\">4.1、别名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2%E3%80%81Bean%E7%9A%84%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">4.2、Bean的配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3%E3%80%81import\"><span class=\"toc-text\">4.3、import</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">5、依赖注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">5.1、构造器注入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2%E3%80%81Set%E6%96%B9%E5%BC%8F%E6%B3%A8%E5%85%A5%E3%80%90%E9%87%8D%E7%82%B9%E3%80%91\"><span class=\"toc-text\">5.2、Set方式注入【重点】</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3%E3%80%81%E6%8B%93%E5%B1%95%E6%96%B9%E5%BC%8F%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">5.3、拓展方式注入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4%E3%80%81bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">5.4、bean的作用域</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81Bean%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D\"><span class=\"toc-text\">6、Bean自动装配</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1%E3%80%81%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">6.1、测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2%E3%80%81ByName-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D\"><span class=\"toc-text\">6.2、ByName 自动装配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-3%E3%80%81ByType%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D\"><span class=\"toc-text\">6.3、ByType自动装配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">小结：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-4%E3%80%81%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D\"><span class=\"toc-text\">6.4、使用注解实现自动装配</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">7、使用注解开发</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8%E3%80%81%E4%BD%BF%E7%94%A8Java%E7%9A%84%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AESpring\"><span class=\"toc-text\">8、使用Java的方式配置Spring</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BD%93%E7%B1%BB\"><span class=\"toc-text\">实体类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E7%B1%BB\"><span class=\"toc-text\">测试类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9%E3%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">9、代理模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-1%E3%80%81%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">9.1、静态代理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-2%E3%80%81%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">9.2、动态代理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10%E3%80%81AOP\"><span class=\"toc-text\">10、AOP</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFAOP\"><span class=\"toc-text\">10.1、什么是AOP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-2%E3%80%81AOP%E5%9C%A8Spring%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">10.2、AOP在Spring中的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-3%E3%80%81%E5%9C%A8Spring%E4%B8%AD%E4%BD%BF%E7%94%A8AOP\"><span class=\"toc-text\">10.3、在Spring中使用AOP</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E5%BC%8F%E4%B8%80%EF%BC%9A%E4%BD%BF%E7%94%A8Spring-API-%E6%8E%A5%E5%8F%A3%E3%80%90SpringAPI%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E3%80%91\"><span class=\"toc-text\">方式一：使用Spring API 接口【SpringAPI接口实现】</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E5%BC%8F%E4%BA%8C%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E6%9D%A5%E5%AE%9E%E7%8E%B0AOP%E3%80%90%E5%88%87%E9%9D%A2%E5%AE%9A%E4%B9%89%E3%80%91\"><span class=\"toc-text\">方式二：自定义类来实现AOP【切面定义】</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E5%BC%8F%E4%B8%89%EF%BC%9A%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">方式三：使用注解实现</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11%E3%80%81%E6%95%B4%E5%90%88Mybatis\"><span class=\"toc-text\">11、整合Mybatis</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-1%E5%9B%9E%E9%A1%BEMybatis\"><span class=\"toc-text\">11.1回顾Mybatis</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-2Mybatis-Spring\"><span class=\"toc-text\">11.2Mybatis-Spring</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E5%BC%8F%E4%BA%8C%EF%BC%9ASqlSessionDaoSupport\"><span class=\"toc-text\">方式二：SqlSessionDaoSupport</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12%E3%80%81%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">12、声明式事务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%9B%9E%E9%A1%BE%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">1、回顾事务</span></a></li></ol></li></ol></li></ol>","author":{"name":"Xoc001","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Xoc001/photo/photo.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"环境配置","uid":"b2824fba14847a426bc9d7e1d1d4d928","slug":"环境搭建","date":"2022-02-27T14:16:57.243Z","updated":"2022-02-27T14:16:52.207Z","comments":true,"path":"api/articles/环境搭建.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/Xoc001/photo/pexels-photo-546819.jpeg","text":"Node.js安装 创建两个文件夹目录 说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"环境","slug":"环境","count":1,"path":"api/tags/环境.json"}],"author":{"name":"Xoc001","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Xoc001/photo/photo.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}