{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"MyBatis","date":"2022-02-10T17:38:23.826Z","updated":"2021-09-03T11:14:13.096Z","comments":true,"path":"api/articles/MyBatis.json","keywords":null,"cover":[],"content":"<h1 id=\"MyBatis\"><a href=\"#MyBatis\" class=\"headerlink\" title=\"MyBatis\"></a>MyBatis</h1><h2 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h2><p><img src=\"/MyBatis.assets/image-20210730164636709.png\" alt=\"image-20210730164636709\"></p>\n<h3 id=\"1-1、什么是-MyBatis？\"><a href=\"#1-1、什么是-MyBatis？\" class=\"headerlink\" title=\"1.1、什么是 MyBatis？\"></a>1.1、什么是 MyBatis？</h3><p>MyBatis 是一款优秀的<strong>持久层框架</strong>，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>\n<p>Github：<a href=\"https://github.com/mybatis/mybatis-3\">mybatis&#x2F;mybatis-3: MyBatis SQL mapper framework for Java (github.com)</a></p>\n<p>文档：<a href=\"https://mybatis.org/mybatis-3/zh/getting-started.html\">mybatis – MyBatis 3 | 入门</a></p>\n<h3 id=\"1-2、持久化\"><a href=\"#1-2、持久化\" class=\"headerlink\" title=\"1.2、持久化\"></a>1.2、持久化</h3><p>数据持久化</p>\n<ul>\n<li><p>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</p>\n</li>\n<li><p>内存：<strong>断电即失</strong></p>\n</li>\n<li><p>数据库(JDBC)，IO持久化。</p>\n</li>\n</ul>\n<h3 id=\"1-3、持久层\"><a href=\"#1-3、持久层\" class=\"headerlink\" title=\"1.3、持久层\"></a>1.3、持久层</h3><ul>\n<li>完成持久化工作的代码块</li>\n<li>层界限十分明显。</li>\n</ul>\n<h3 id=\"1-4为什么需要Mybatis？\"><a href=\"#1-4为什么需要Mybatis？\" class=\"headerlink\" title=\"1.4为什么需要Mybatis？\"></a>1.4为什么需要Mybatis？</h3><ul>\n<li>帮助程序员将数据存入数据库中。</li>\n<li>方便</li>\n<li>传统JDBC代码太复杂。简化。框架。自动化</li>\n</ul>\n<h2 id=\"2、第一个Mybatis程序\"><a href=\"#2、第一个Mybatis程序\" class=\"headerlink\" title=\"2、第一个Mybatis程序\"></a>2、第一个Mybatis程序</h2><h3 id=\"2-1搭建环境\"><a href=\"#2-1搭建环境\" class=\"headerlink\" title=\"2.1搭建环境\"></a>2.1搭建环境</h3><p>搭建数据库</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">CREATE DATABASE &#96;mybatis&#96;;\n\nUSE &#96;mybatis&#96;;\n\nCREATE TABLE &#96;user&#96;(\n&#96;id&#96; INT(20) NOT NULL PRIMARY KEY,\n&#96;name&#96; VARCHAR(30) DEFAULT NULL,\n&#96;password&#96; VARCHAR(30) DEFAULT NULL\n)ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8;\n\nINSERT INTO &#96;user&#96;(&#96;id&#96;,&#96;name&#96;,&#96;password&#96;) VALUES(1,&#39;a&#39;,&#39;123456&#39;),(2,&#39;b&#39;,&#39;123456&#39;),(3,&#39;c&#39;,&#39;12344&#39;)</code></pre>\n\n\n\n<h3 id=\"2-2创建模块\"><a href=\"#2-2创建模块\" class=\"headerlink\" title=\"2.2创建模块\"></a>2.2创建模块</h3><p>mapper.xml</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n  PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;\n  &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace&#x3D;&quot;org.mybatis.example.BlogMapper&quot;&gt;\n  &lt;select id&#x3D;&quot;selectBlog&quot; resultType&#x3D;&quot;Blog&quot;&gt;\n    select * from Blog where id &#x3D; #&#123;id&#125;\n  &lt;&#x2F;select&gt;\n&lt;&#x2F;mapper&gt;</code></pre>\n\n\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package my.utils;\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class Mybatis &#123;\n    private static SqlSessionFactory sqlSessionFactory;\n\n    static &#123;\n        try &#123;\n            String resource &#x3D; &quot;mybatis-config.xml&quot;;\n            InputStream inputStream &#x3D; Resources.getResourceAsStream(resource);\n            sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder().build(inputStream);\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F;既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。\n    &#x2F;&#x2F; SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。例如：\n    public static SqlSession getSqlSession()&#123;\n        return sqlSessionFactory.openSession();\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"2-3测试\"><a href=\"#2-3测试\" class=\"headerlink\" title=\"2.3测试\"></a>2.3测试</h3><p>核心配置文件中注册Mappers</p>\n<ul>\n<li>Junit测试</li>\n</ul>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Test\npublic void test()&#123;\n    &#x2F;&#x2F;获取Session 对象\n    SqlSession session &#x3D; Mybatis.getSqlSession();\n\n    &#x2F;&#x2F;\n    UserMapper mapper &#x3D; session.getMapper(UserMapper.class);\n    List&lt;User&gt; userList &#x3D; mapper.getUserList();\n\n    for (User user:userList) &#123;\n        System.out.println(user);\n    &#125;\n\n    session.close();\n&#125;</code></pre>\n\n\n\n\n\n\n\n<h2 id=\"3、CURD\"><a href=\"#3、CURD\" class=\"headerlink\" title=\"3、CURD\"></a>3、CURD</h2><h3 id=\"1、namespace\"><a href=\"#1、namespace\" class=\"headerlink\" title=\"1、namespace\"></a>1、namespace</h3><p>namespace中的包名要和Dao中的Mapper接口的包名一致！</p>\n<h3 id=\"2、select\"><a href=\"#2、select\" class=\"headerlink\" title=\"2、select\"></a>2、select</h3><h4 id=\"1、编写接口\"><a href=\"#1、编写接口\" class=\"headerlink\" title=\"1、编写接口\"></a>1、编写接口</h4><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">&#x2F;&#x2F;查\nList&lt;User&gt; getUserList();\n&#x2F;&#x2F;查\nUser getUserById(int id);</code></pre>\n\n<h4 id=\"2、编写Mapper中对应的xml语句\"><a href=\"#2、编写Mapper中对应的xml语句\" class=\"headerlink\" title=\"2、编写Mapper中对应的xml语句\"></a>2、编写Mapper中对应的xml语句</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;select id&#x3D;&quot;getUserList&quot; resultType&#x3D;&quot;my.pojo.User&quot;&gt;\n    select * from &#96;user&#96;\n&lt;&#x2F;select&gt;\n    \n&lt;select id&#x3D;&quot;getUserById&quot; resultType&#x3D;&quot;my.pojo.User&quot; parameterType&#x3D;&quot;int&quot;&gt;\n    select * from &#96;user&#96; where id&#x3D;#&#123;id&#125;\n&lt;&#x2F;select&gt;</code></pre>\n\n<h4 id=\"3、测试\"><a href=\"#3、测试\" class=\"headerlink\" title=\"3、测试\"></a>3、测试</h4><h3 id=\"3、update\"><a href=\"#3、update\" class=\"headerlink\" title=\"3、update\"></a>3、update</h3><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;update id&#x3D;&quot;updateUser&quot; parameterType&#x3D;&quot;my.pojo.User&quot;&gt;\n   update &#96;user&#96; set name&#x3D;#&#123;name&#125;, password&#x3D;#&#123;password&#125; where id&#x3D;#&#123;id&#125;\n&lt;&#x2F;update&gt;\n</code></pre>\n\n\n\n<h3 id=\"4、delete\"><a href=\"#4、delete\" class=\"headerlink\" title=\"4、delete\"></a>4、delete</h3><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;delete id&#x3D;&quot;deleteUser&quot; parameterType&#x3D;&quot;int&quot;&gt;\n    delete from &#96;user&#96; where id&#x3D;#&#123;id&#125;\n&lt;&#x2F;delete&gt;</code></pre>\n\n\n\n<h3 id=\"5、insert\"><a href=\"#5、insert\" class=\"headerlink\" title=\"5、insert\"></a>5、insert</h3><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;insert id&#x3D;&quot;addUser&quot; parameterType&#x3D;&quot;my.pojo.User&quot;&gt;\ninsert into &#96;user&#96; (&#96;id&#96;,&#96;name&#96;,&#96;password&#96;) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)\n&lt;&#x2F;insert&gt;</code></pre>\n\n\n\n<h3 id=\"6、Map\"><a href=\"#6、Map\" class=\"headerlink\" title=\"6、Map\"></a>6、Map</h3><p>实体类，或者数据库中的表，字段或参数过多可以使用Map</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;insert id&#x3D;&quot;addUser&quot; parameterType&#x3D;&quot;map&quot;&gt;\n\tinsert into &#96;user&#96;(&#96;id&#96;,&#96;name&#96;,&#96;password&#96;) values(#&#123;userId&#125;,#&#123;userName&#125;,#&#123;passWord&#125;)\n&lt;&#x2F;insert&gt;</code></pre>\n\n<p>Map传递参数，直接在sql中取出key即可！ parameterType&#x3D;”map”</p>\n<p>对象传递参数，直接在sql中取出对象即可！parameterType&#x3D;”Object”</p>\n<p>只有一个基本类型参数，可以直接在sql中取到！</p>\n<p>多个参数用Map，<strong>或者注解！</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n public void addUser1()&#123;\n     SqlSession sqlSession &#x3D; Mybatis.getSqlSession();\n     UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);\n     Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;String, Object&gt;();\n     map.put(&quot;userId&quot;,6);\n     map.put(&quot;userName&quot;,&quot;aabab&quot;);\n     mapper.addUser1(map);\n     sqlSession.commit();\n     sqlSession.close();\n &#125;</code></pre>\n\n\n\n<h3 id=\"7、注意\"><a href=\"#7、注意\" class=\"headerlink\" title=\"7、注意\"></a>7、注意</h3><p>模糊查询</p>\n<p>1、Java代码执行的时候，传递通配符%%</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">List&lt;User&gt;userList &#x3D; mapper.getUserList(&quot;%李%&quot;);</code></pre>\n\n<p>2、在sql拼接中使用通配符</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">select * from user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;</code></pre>\n\n\n\n<h2 id=\"4、配置解析\"><a href=\"#4、配置解析\" class=\"headerlink\" title=\"4、配置解析\"></a>4、配置解析</h2><h3 id=\"1、核心配置文件\"><a href=\"#1、核心配置文件\" class=\"headerlink\" title=\"1、核心配置文件\"></a>1、核心配置文件</h3><ul>\n<li>mybatis-config.xml</li>\n<li>Mybatis的配置文件包含了会深深影响Mybatis行为的设置和属性信息</li>\n</ul>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">configuration（配置）\nproperties（属性）\nsettings（设置）\ntypeAliases（类型别名）\ntypeHandlers（类型处理器）\nobjectFactory（对象工厂）\nplugins（插件）\nenvironments（环境配置）\nenvironment（环境变量）\ntransactionManager（事务管理器）\ndataSource（数据源）\ndatabaseIdProvider（数据库厂商标识）\nmappers（映射器）</code></pre>\n\n\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;\n&lt;build&gt;\n    &lt;resources&gt;\n        &lt;resource&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n            &lt;includes&gt;\n                &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;\n                &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;\n            &lt;&#x2F;includes&gt;\n            &lt;filtering&gt;true&lt;&#x2F;filtering&gt;\n        &lt;&#x2F;resource&gt;\n        &lt;resource&gt;\n            &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;\n            &lt;includes&gt;\n                &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;\n                &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;\n            &lt;&#x2F;includes&gt;\n            &lt;filtering&gt;true&lt;&#x2F;filtering&gt;\n        &lt;&#x2F;resource&gt;\n    &lt;&#x2F;resources&gt;\n&lt;&#x2F;build&gt;</code></pre>\n\n\n\n\n\n\n\n<h3 id=\"2、环境配置（environments）\"><a href=\"#2、环境配置（environments）\" class=\"headerlink\" title=\"2、环境配置（environments）\"></a>2、环境配置（environments）</h3><p>Mybatis可以配置成适应多种环境</p>\n<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong>    </p>\n<h3 id=\"3、属性（properties）\"><a href=\"#3、属性（properties）\" class=\"headerlink\" title=\"3、属性（properties）\"></a>3、属性（properties）</h3><p><img src=\"/MyBatis.assets/image-20210731171308601.png\" alt=\"image-20210731171308601\"></p>\n<p>属性可以在外部配置，并可以进行动态替换。</p>\n<p>你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">driver&#x3D;com.mysql.jdbc.Driver\nurl&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?useSSL&#x3D;true&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8\nusername&#x3D;root\npassword&#x3D;</code></pre>\n\n<p>设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;\n  &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;driver&#125;&quot;&#x2F;&gt;\n  &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;url&#125;&quot;&#x2F;&gt;\n  &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;username&#125;&quot;&#x2F;&gt;\n  &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;password&#125;&quot;&#x2F;&gt;\n&lt;&#x2F;dataSource&gt;</code></pre>\n\n<p>引入外部文件</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;properties resource&#x3D;&quot;org&#x2F;mybatis&#x2F;example&#x2F;config.properties&quot;&gt;\n  &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;dev_user&quot;&#x2F;&gt;\n  &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;F2Fa3!33TYyg&quot;&#x2F;&gt;\n&lt;&#x2F;properties&gt;</code></pre>\n\n<ul>\n<li>可以直接引入外部文件</li>\n<li>可以在其中添加一些属性，配置</li>\n<li>如果两个文件有同一个字段，优先使用外部文件配置。</li>\n</ul>\n<h3 id=\"4、类型别名（typeAliases）\"><a href=\"#4、类型别名（typeAliases）\" class=\"headerlink\" title=\"4、类型别名（typeAliases）\"></a>4、类型别名（typeAliases）</h3><ul>\n<li>类型别名可为 Java 类型设置一个缩写名字。</li>\n<li>它仅用于 XML 配置，意在降低冗余的全限定类名书写。</li>\n</ul>\n<p><strong>类型别名可为 Java 类型设置一个缩写名字。</strong> </p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;typeAliases&gt;\n       &lt;typeAlias type&#x3D;&quot;my.pojo.User&quot; alias&#x3D;&quot;User&quot;&#x2F;&gt;\n&lt;&#x2F;typeAliases&gt;</code></pre>\n\n<p>**也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 **</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;typeAliases&gt;\n    &lt;package name&#x3D;&quot;my.pojo&quot;&#x2F;&gt;\n&lt;&#x2F;typeAliases&gt;</code></pre>\n\n<p>在实体类比较少时，使用缩写。</p>\n<p>在实体类比较多时，使用包名。</p>\n<p>缩写可以DIY别名，包名则需要注解起别名</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import org.apache.ibatis.type.Alias;\n\n@Alias(&quot;user&quot;)</code></pre>\n\n\n\n<h3 id=\"5、设置\"><a href=\"#5、设置\" class=\"headerlink\" title=\"5、设置\"></a>5、设置</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;settings&gt;\n  &lt;setting name&#x3D;&quot;cacheEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;\n  &lt;setting name&#x3D;&quot;lazyLoadingEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;\n  &lt;setting name&#x3D;&quot;multipleResultSetsEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;\n  &lt;setting name&#x3D;&quot;useColumnLabel&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;\n  &lt;setting name&#x3D;&quot;useGeneratedKeys&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;\n  &lt;setting name&#x3D;&quot;autoMappingBehavior&quot; value&#x3D;&quot;PARTIAL&quot;&#x2F;&gt;\n  &lt;setting name&#x3D;&quot;autoMappingUnknownColumnBehavior&quot; value&#x3D;&quot;WARNING&quot;&#x2F;&gt;\n  &lt;setting name&#x3D;&quot;defaultExecutorType&quot; value&#x3D;&quot;SIMPLE&quot;&#x2F;&gt;\n  &lt;setting name&#x3D;&quot;defaultStatementTimeout&quot; value&#x3D;&quot;25&quot;&#x2F;&gt;\n  &lt;setting name&#x3D;&quot;defaultFetchSize&quot; value&#x3D;&quot;100&quot;&#x2F;&gt;\n  &lt;setting name&#x3D;&quot;safeRowBoundsEnabled&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;\n  &lt;setting name&#x3D;&quot;mapUnderscoreToCamelCase&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;\n  &lt;setting name&#x3D;&quot;localCacheScope&quot; value&#x3D;&quot;SESSION&quot;&#x2F;&gt;\n  &lt;setting name&#x3D;&quot;jdbcTypeForNull&quot; value&#x3D;&quot;OTHER&quot;&#x2F;&gt;\n  &lt;setting name&#x3D;&quot;lazyLoadTriggerMethods&quot; value&#x3D;&quot;equals,clone,hashCode,toString&quot;&#x2F;&gt;\n&lt;&#x2F;settings&gt;</code></pre>\n\n<h3 id=\"6、映射器\"><a href=\"#6、映射器\" class=\"headerlink\" title=\"6、映射器\"></a>6、映射器</h3><p>MapperRegistry:注册绑定我们的Mapper文件；</p>\n<p>方式一：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;mappers&gt;\n       &lt;mapper resource&#x3D;&quot;my&#x2F;dao&#x2F;UserMapper.xml&quot;&gt;&lt;&#x2F;mapper&gt;\n   &lt;&#x2F;mappers&gt;</code></pre>\n\n<p>方式二：使用class文件绑定注册</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;mappers&gt;\n    &lt;mapper class&#x3D;&quot;my.dao.UserMapper&quot;&#x2F;&gt;\n&lt;&#x2F;mappers&gt;</code></pre>\n\n<p><strong>注意点</strong></p>\n<ul>\n<li>接口和他的Mapper配置文件必须同名</li>\n<li>接口和他的Mapper配置文件必须在同一个包下</li>\n</ul>\n<h3 id=\"7、生命周期和作用域\"><a href=\"#7、生命周期和作用域\" class=\"headerlink\" title=\"7、生命周期和作用域\"></a>7、生命周期和作用域</h3><p><img src=\"/MyBatis.assets/image-20210801155804854.png\" alt=\"image-20210801155804854\"></p>\n<p>生命周期，和作用域，是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong></p>\n<p><strong>SqlSessionFactoryBuilder:</strong></p>\n<ul>\n<li>一旦创建了SqlSessionFactoryBuilder，就不再需要它。</li>\n<li>局部变量</li>\n</ul>\n<p><strong>SqlSessionFactory:</strong></p>\n<ul>\n<li>想象为：数据库连接池</li>\n<li>SqlSessionFactory一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃或重新创建另一个实例。</strong></li>\n<li>因此SqlSessionFactory的最佳作用域是应用作用域</li>\n<li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式</li>\n</ul>\n<p><strong>SqlSession</strong></p>\n<ul>\n<li>连接到连接池的一个请求！</li>\n<li>SqlSession的实例不是线程安全的，因此是不能被共享的，多以他的最佳的作用域是请求或方法作用域。</li>\n<li>用完之后关闭，否则资源被占用！</li>\n<li><img src=\"/MyBatis.assets/image-20210801161510278.png\" alt=\"image-20210801161510278\"></li>\n</ul>\n<p>每一个Mapper，就代表一个业务。</p>\n<h2 id=\"5、解决属性名和字段名不一致的问题\"><a href=\"#5、解决属性名和字段名不一致的问题\" class=\"headerlink\" title=\"5、解决属性名和字段名不一致的问题\"></a>5、解决属性名和字段名不一致的问题</h2><ul>\n<li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。</li>\n<li>ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</li>\n</ul>\n<p>使用显式使用外部resultMap配置，解决列名不匹配</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;resultMap id&#x3D;&quot;UserMap&quot; type&#x3D;&quot;User&quot;&gt;\n      &lt;result column&#x3D;&quot;password&quot; property&#x3D;&quot;pwd&quot;&gt;&lt;&#x2F;result&gt;\n  &lt;&#x2F;resultMap&gt;\n  &lt;select id&#x3D;&quot;getUserList&quot; resultMap&#x3D;&quot;UserMap&quot;&gt;\n  select * from &#96;user&#96;\n  &lt;&#x2F;select&gt;</code></pre>\n\n<h2 id=\"6、日志\"><a href=\"#6、日志\" class=\"headerlink\" title=\"6、日志\"></a>6、日志</h2><p>​    Mybatis 通过使用内置的日志工厂提供日志功能。内置日志工厂将会把日志工作委托给下面的实现之一：</p>\n<ul>\n<li>SLF4J</li>\n<li>LOG4J</li>\n<li>LOG4J2</li>\n<li>JDK_LOGGING </li>\n<li>COMMONS_LOGGING</li>\n<li>STDOUT_LOGGING </li>\n<li>NO_LOGGING</li>\n</ul>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;settings&gt;\n       &lt;setting name&#x3D;&quot;logImpl&quot; value&#x3D;&quot;STDOUT_LOGGING&quot;&#x2F;&gt;\n   &lt;&#x2F;settings&gt;</code></pre>\n\n\n\n<h3 id=\"LOG4J\"><a href=\"#LOG4J\" class=\"headerlink\" title=\"LOG4J\"></a>LOG4J</h3><p>1.导入log4j的包</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;dependency&gt;\n         &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;\n         &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;\n         &lt;version&gt;1.2.17&lt;&#x2F;version&gt;\n     &lt;&#x2F;dependency&gt;</code></pre>\n\n<p>2.添加log4.properties文件</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码\nlog4j.rootLogger&#x3D;DEBUG,console,file\n\n#控制台输出的相关设置\nlog4j.appender.console &#x3D; org.apache.log4j.ConsoleAppender\nlog4j.appender.console.Target &#x3D; System.out\nlog4j.appender.console.Threshold&#x3D;DEBUG\nlog4j.appender.console.layout &#x3D; org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern&#x3D;[%c]-%m%n\n\n#文件输出的相关设置\nlog4j.appender.file &#x3D; org.apache.log4j.RollingFileAppender\nlog4j.appender.file.File&#x3D;.&#x2F;log&#x2F;test.log\nlog4j.appender.file.MaxFileSize&#x3D;10mb\nlog4j.appender.file.Threshold&#x3D;DEBUG\nlog4j.appender.file.layout&#x3D;org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern&#x3D;[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n\n\n#日志输出级别\nlog4j.logger.org.mybatis&#x3D;DEBUG\nlog4j.logger.java.sql&#x3D;DEBUG\nlog4j.logger.java.sql.Statement&#x3D;DEBUG\nlog4j.logger.java.sql.ResultSet&#x3D;DEBUG\nlog4j.logger.java.sql.PreparedStatement&#x3D;DEBUG</code></pre>\n\n<p>3.配置log4j为日志的实现</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;settings&gt;\n    &lt;setting name&#x3D;&quot;logImpl&quot; value&#x3D;&quot;LOG4J&quot;&#x2F;&gt;\n&lt;&#x2F;settings&gt;</code></pre>\n\n\n\n<h2 id=\"7、分页\"><a href=\"#7、分页\" class=\"headerlink\" title=\"7、分页\"></a>7、分页</h2><h3 id=\"为什么分页？\"><a href=\"#为什么分页？\" class=\"headerlink\" title=\"为什么分页？\"></a>为什么分页？</h3><ul>\n<li>减少数据的处理量</li>\n</ul>\n<h3 id=\"7-1、使用LIMIT分页\"><a href=\"#7-1、使用LIMIT分页\" class=\"headerlink\" title=\"7.1、使用LIMIT分页\"></a>7.1、使用LIMIT分页</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">语法：select * from &#96;user&#96; limit startIndex,pageSize\nselect * from &#96;user&#96;limit 3  #[0,n-1]</code></pre>\n\n<h3 id=\"使用Mybatis实现分页，核心SQL\"><a href=\"#使用Mybatis实现分页，核心SQL\" class=\"headerlink\" title=\"使用Mybatis实现分页，核心SQL\"></a>使用Mybatis实现分页，核心SQL</h3><h4 id=\"1-接口\"><a href=\"#1-接口\" class=\"headerlink\" title=\"1.接口\"></a>1.接口</h4><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">&#x2F;&#x2F;查\nList&lt;User&gt; getUserList(Map&lt;String,Object&gt;map);</code></pre>\n\n<h4 id=\"2-Mapper-xml\"><a href=\"#2-Mapper-xml\" class=\"headerlink\" title=\"2.Mapper.xml\"></a>2.Mapper.xml</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;select id&#x3D;&quot;getUserList&quot; parameterType&#x3D;&quot;map&quot;  resultType&#x3D;&quot;user&quot;&gt;\n select * from &#96;user&#96; limit #&#123;startIndex&#125;,#&#123;pageSize&#125;\n &lt;&#x2F;select&gt;</code></pre>\n\n\n\n<h4 id=\"7-2、RowBounds分页\"><a href=\"#7-2、RowBounds分页\" class=\"headerlink\" title=\"7.2、RowBounds分页\"></a>7.2、RowBounds分页</h4><p>不再使用SQL实现分页</p>\n<p>1.接口</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">List&lt;User&gt;getUserByRowBounds();</code></pre>\n\n<p>2.Mapper.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;select id&#x3D;&quot;getUserListByRowBounds&quot; resultType&#x3D;&quot;user&quot;&gt;\n    select * from &#96;user&#96;\n&lt;&#x2F;select&gt;</code></pre>\n\n\n\n<p>3.测试</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\npublic void getUserByRowBounds() &#123;\n    SqlSession sqlSession &#x3D; Mybatis.getSqlSession();\n\n    &#x2F;&#x2F;创建RowBounds分页\n    RowBounds rowBounds &#x3D; new RowBounds(1, 2);\n    &#x2F;&#x2F;通过Java代码层面实现分页\n    List&lt;User&gt; userList &#x3D; sqlSession.selectList(&quot;my.dao.UserMapper.getUserListByRowBounds&quot;, null, rowBounds);\n    for (User user : userList) &#123;\n        System.out.println(user);\n    &#125;\n    sqlSession.close();\n&#125;</code></pre>\n\n<h4 id=\"7-3、分页插件\"><a href=\"#7-3、分页插件\" class=\"headerlink\" title=\"7.3、分页插件\"></a>7.3、分页插件</h4><h2 id=\"8、使用注解开发\"><a href=\"#8、使用注解开发\" class=\"headerlink\" title=\"8、使用注解开发\"></a>8、使用注解开发</h2><h3 id=\"8-1、面向接口编程\"><a href=\"#8-1、面向接口编程\" class=\"headerlink\" title=\"8.1、面向接口编程\"></a>8.1、面向接口编程</h3><p>大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程<br>- <strong>根本原因 :  &#x3D;&#x3D;解耦&#x3D;&#x3D; , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准 , 使得开发变得容易 , 规范性更好</strong><br>- 在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了；<br>- 而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p>\n<p><strong>关于接口的理解</strong></p>\n<p>- 接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。<br>- 接口的本身反映了系统设计人员对系统的抽象理解。<br>- 接口应有两类：<br>  - 第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)；<br>  - 第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）；<br>- 一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p>\n<p><strong>三个面向区别</strong></p>\n<p>- 面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法 .<br>- 面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现 .<br>- 接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题.更多的体现就是对系统整体的架构</p>\n<h3 id=\"MyBatis流程\"><a href=\"#MyBatis流程\" class=\"headerlink\" title=\"MyBatis流程\"></a>MyBatis流程</h3><p><img src=\"/MyBatis.assets/Temp.png\" alt=\"Temp\"></p>\n<h3 id=\"8-2、使用注解开发\"><a href=\"#8-2、使用注解开发\" class=\"headerlink\" title=\"8.2、使用注解开发\"></a>8.2、使用注解开发</h3><p>1.注解在接口上实现</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Select(&quot;select * from &#96;user&#96;&quot;)\nList&lt;User&gt; getUserList();</code></pre>\n\n<p>2.需要在核心配置文件中绑定接口！</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;mappers&gt;\n    &lt;mapper class&#x3D;&quot;my.dao.UserMapper&quot;&#x2F;&gt;\n&lt;&#x2F;mappers&gt;</code></pre>\n\n<p>3.测试</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Test\npublic void test()\n&#123;\n    SqlSession sqlSession &#x3D; Mybatis.getSqlSession();\n    UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);\n    List&lt;User&gt; userList &#x3D; mapper.getUserList();\n    for (User user : userList) &#123;\n        System.out.println(user);\n    &#125;\n    sqlSession.close();\n&#125;</code></pre>\n\n<p>本质：反射机制实现</p>\n<p>底层：动态代理！</p>\n<h3 id=\"8-3、CURD\"><a href=\"#8-3、CURD\" class=\"headerlink\" title=\"8.3、CURD\"></a>8.3、CURD</h3><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Select(&quot;select * from &#96;user&#96;&quot;)\n  List&lt;User&gt; getUserList();\n\n  @Select(&quot;select * from user where id&#x3D;#&#123;id&#125;&quot;)\n  User getUser(@Param(&quot;id&quot;) int id);\n\n  @Insert(&quot;insert into &#96;user&#96;(id,name,password) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)&quot;)\n  int addUser(User user);\n\n  @Update(&quot;update user set name&#x3D;#&#123;name&#125;,password&#x3D;#&#123;pwd&#125; where id&#x3D;#&#123;id&#125;&quot;)\n  int updateUser(User user);\n\n  @Delete(&quot;delete from user where id&#x3D;#&#123;id&#125;&quot;)\n  int deleteUser(int id);</code></pre>\n\n\n\n<h3 id=\"关于-Param-注解\"><a href=\"#关于-Param-注解\" class=\"headerlink\" title=\"关于@Param()注解\"></a>关于@Param()注解</h3><ul>\n<li>基本类型的参数或者String 类型，需要加上</li>\n<li>引用类型不需要加。</li>\n<li>如果只有一个基本类型，可不加。</li>\n<li>我们在SQL中引用的就是@Param()中设定的属性名。</li>\n</ul>\n<h4 id=\"和-的区别：-更安全，防止SQL注入，自动加上””-双引号-。\"><a href=\"#和-的区别：-更安全，防止SQL注入，自动加上””-双引号-。\" class=\"headerlink\" title=\"#{}和${}的区别：#{}更安全，防止SQL注入，自动加上””(双引号)。\"></a>#{}和${}的区别：#{}更安全，防止SQL注入，自动加上””(双引号)。</h4><h2 id=\"9、多对一\"><a href=\"#9、多对一\" class=\"headerlink\" title=\"9、多对一\"></a>9、多对一</h2><p><img src=\"/MyBatis.assets/image-20210803175840904.png\" alt=\"image-20210803175840904\"></p>\n<h3 id=\"按照查询嵌套处理\"><a href=\"#按照查询嵌套处理\" class=\"headerlink\" title=\"按照查询嵌套处理\"></a>按照查询嵌套处理</h3><pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;select id&#x3D;&quot;getStudentList&quot; resultMap&#x3D;&quot;StudentTeacher&quot;&gt;\n    select * from &#96;student&#96;\n&lt;&#x2F;select&gt;\n\n&lt;resultMap id&#x3D;&quot;StudentTeacher&quot; type&#x3D;&quot;Student&quot;&gt;\n    &lt;result property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;\n    &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;\n    &lt;association property&#x3D;&quot;teacher&quot; column&#x3D;&quot;tid&quot; javaType&#x3D;&quot;Teacher&quot; select&#x3D;&quot;getTeacher&quot;&#x2F;&gt;\n&lt;&#x2F;resultMap&gt;\n\n&lt;select id&#x3D;&quot;getTeacher&quot; resultType&#x3D;&quot;Teacher&quot;&gt;\n    select * from &#96;teacher&#96; where id&#x3D;#&#123;id&#125;\n&lt;&#x2F;select&gt;</code></pre>\n\n<h3 id=\"按照结果查询处理\"><a href=\"#按照结果查询处理\" class=\"headerlink\" title=\"按照结果查询处理\"></a>按照结果查询处理</h3><pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--按照结果查询处理--&gt;\n    &lt;select id&#x3D;&quot;getStudentList2&quot; resultMap&#x3D;&quot;getStudent2&quot;&gt;\n        select s.id sid,s.name sname,t.name tname from student s,teacher t where s.tid&#x3D;t.id;\n    &lt;&#x2F;select&gt;\n    &lt;resultMap id&#x3D;&quot;getStudent2&quot; type&#x3D;&quot;Student&quot;&gt;\n        &lt;result property&#x3D;&quot;id&quot; column&#x3D;&quot;sid&quot;&#x2F;&gt;\n        &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;sname&quot;&#x2F;&gt;\n        &lt;association property&#x3D;&quot;teacher&quot; javaType&#x3D;&quot;Teacher&quot;&gt;\n            &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;tname&quot;&#x2F;&gt;\n        &lt;&#x2F;association&gt;\n    &lt;&#x2F;resultMap&gt;</code></pre>\n\n<h3 id=\"MySql多对一查询方式\"><a href=\"#MySql多对一查询方式\" class=\"headerlink\" title=\"MySql多对一查询方式\"></a>MySql多对一查询方式</h3><ul>\n<li>子查询</li>\n<li>联表查询</li>\n</ul>\n<h2 id=\"10、一对多查询\"><a href=\"#10、一对多查询\" class=\"headerlink\" title=\"10、一对多查询\"></a>10、一对多查询</h2><p>一个老师拥有多个学生！</p>\n<h3 id=\"按结果嵌套处理\"><a href=\"#按结果嵌套处理\" class=\"headerlink\" title=\"按结果嵌套处理\"></a>按结果嵌套处理</h3><pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;select id&#x3D;&quot;getTeacher&quot; resultMap&#x3D;&quot;TeacherStudent&quot;&gt;\n    select s.id sid,s.name sname,t.id tid,t.name tname from student s,teacher t where s.tid &#x3D;t.id and t.id&#x3D;#&#123;tid&#125;\n&lt;&#x2F;select&gt;\n&lt;resultMap id&#x3D;&quot;TeacherStudent&quot; type&#x3D;&quot;Teacher&quot;&gt;\n    &lt;result property&#x3D;&quot;id&quot; column&#x3D;&quot;tid&quot;&#x2F;&gt;\n    &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;tname&quot;&#x2F;&gt;\n\n    &lt;collection property&#x3D;&quot;students&quot; ofType&#x3D;&quot;Student&quot;&gt;\n        &lt;result property&#x3D;&quot;id&quot; column&#x3D;&quot;sid&quot;&#x2F;&gt;\n        &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;sname&quot;&#x2F;&gt;\n        &lt;result property&#x3D;&quot;tid&quot; column&#x3D;&quot;tid&quot;&#x2F;&gt;\n    &lt;&#x2F;collection&gt;\n&lt;&#x2F;resultMap&gt;</code></pre>\n\n<h3 id=\"按查询嵌套处理\"><a href=\"#按查询嵌套处理\" class=\"headerlink\" title=\"按查询嵌套处理\"></a>按查询嵌套处理</h3><pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--    按照查询嵌套处理--&gt;\n\n    &lt;select id&#x3D;&quot;getTeacher2&quot; resultMap&#x3D;&quot;TeacherStudent2&quot;&gt;\n        select * from &#96;teacher&#96; where id&#x3D;#&#123;tid&#125;\n    &lt;&#x2F;select&gt;\n    &lt;resultMap id&#x3D;&quot;TeacherStudent2&quot; type&#x3D;&quot;Teacher&quot;&gt;\n        &lt;!--      List&lt;Student&gt; students 是一个集合 使用collection--&gt;\n        &lt;result property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;\n        &lt;collection property&#x3D;&quot;students&quot; javaType&#x3D;&quot;ArrayList&quot; ofType&#x3D;&quot;Student&quot; select&#x3D;&quot;getStudentByTeacherId&quot; column&#x3D;&quot;id&quot;&gt;&lt;&#x2F;collection&gt;\n    &lt;&#x2F;resultMap&gt;\n    &lt;select id&#x3D;&quot;getStudentByTeacherId&quot; resultType&#x3D;&quot;Student&quot;&gt;\n        select * from &#96;student&#96; where tid &#x3D;#&#123;tid&#125;\n    &lt;&#x2F;select&gt;</code></pre>\n\n\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ol>\n<li><p>关联 - association  【多对一】</p>\n</li>\n<li><p>集合 - collection     【一对多】</p>\n</li>\n<li><p>javaType &amp; ofType</p>\n<ol>\n<li>JavaType 用来指定实体类中的某个类型</li>\n<li>ofType 用来指定映射到List或者集合中的POJO类型，泛型中的约束类型！</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"注意点：\"><a href=\"#注意点：\" class=\"headerlink\" title=\"注意点：\"></a>注意点：</h3><ul>\n<li>保证SQL的可读性</li>\n<li>注意一对多和多对一中，属性名和字段的问题！</li>\n<li>如果问题不好排查错误，可以使用日志，建议使用log4j</li>\n</ul>\n<h3 id=\"面试高频\"><a href=\"#面试高频\" class=\"headerlink\" title=\"面试高频\"></a>面试高频</h3><ul>\n<li>Mysql引擎</li>\n<li>InnoDB底层原理</li>\n<li>索引</li>\n<li>索引优化！</li>\n</ul>\n<h2 id=\"11、动态SQL\"><a href=\"#11、动态SQL\" class=\"headerlink\" title=\"11、动态SQL\"></a>11、动态SQL</h2><p><strong>动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句</strong></p>\n<p>**本质还是SQL语句，只是在SQL层面，去执行一个逻辑代码 **</p>\n<h3 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h3><ol>\n<li>导包</li>\n<li>编写配置文件</li>\n<li>编写实体类</li>\n<li>编写实体类Mapper接口和Mapper.xml文件</li>\n</ol>\n<h3 id=\"IF\"><a href=\"#IF\" class=\"headerlink\" title=\"IF\"></a>IF</h3><pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;select id&#x3D;&quot;getBlogByIF&quot; parameterType&#x3D;&quot;map&quot; resultType&#x3D;&quot;blog&quot;&gt;\n    select * from &#96;blog&#96; where 1&#x3D;1\n    &lt;if test&#x3D;&quot;title!&#x3D;null&quot;&gt;\n        and title like #&#123;title&#125;\n    &lt;&#x2F;if&gt;\n    &lt;if test&#x3D;&quot;author!&#x3D;null &quot;&gt;\n        and author like #&#123;author&#125;\n    &lt;&#x2F;if&gt;\n&lt;&#x2F;select&gt;</code></pre>\n\n<h3 id=\"WHERE\"><a href=\"#WHERE\" class=\"headerlink\" title=\"WHERE\"></a>WHERE</h3><p><em>*<em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，*where</em> 元素也会将它们去除。**</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--    where标签--&gt;\n    &lt;select id&#x3D;&quot;getBlogByWhere&quot; parameterType&#x3D;&quot;map&quot; resultType&#x3D;&quot;blog&quot;&gt;\n        select * from &#96;blog&#96;\n        &lt;where&gt;\n            &lt;if test&#x3D;&quot;title!&#x3D;null&quot;&gt;\n                title &#x3D;#&#123;title&#125;\n            &lt;&#x2F;if&gt;\n            &lt;if test&#x3D;&quot;author!&#x3D;null&quot;&gt;\n                and author&#x3D;#&#123;author&#125;\n            &lt;&#x2F;if&gt;\n        &lt;&#x2F;where&gt;\n    &lt;&#x2F;select&gt;</code></pre>\n\n\n\n<h3 id=\"SET\"><a href=\"#SET\" class=\"headerlink\" title=\"SET\"></a>SET</h3><p><strong><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</strong></p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--    set标签--&gt;\n    &lt;update id&#x3D;&quot;updateBlogBySet&quot; parameterType&#x3D;&quot;map&quot;&gt;\n        update &#96;blog&#96;\n        &lt;set&gt;\n            &lt;if test&#x3D;&quot;title!&#x3D;null&quot;&gt;\n                title&#x3D;#&#123;title&#125;,\n            &lt;&#x2F;if&gt;\n            &lt;if test&#x3D;&quot;author!&#x3D;null&quot;&gt;\n                author&#x3D;#&#123;author&#125;,\n            &lt;&#x2F;if&gt;\n        &lt;&#x2F;set&gt;\n        where id&#x3D;#&#123;id&#125;\n    &lt;&#x2F;update&gt;</code></pre>\n\n\n\n<h3 id=\"choose、when、otherwise\"><a href=\"#choose、when、otherwise\" class=\"headerlink\" title=\"choose、when、otherwise\"></a>choose、when、otherwise</h3><p><strong>有点像 Java 中的 switch 语句。</strong></p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--    choose when otherwise标签--&gt;\n    &lt;select id&#x3D;&quot;getBlogByChoose&quot; parameterType&#x3D;&quot;map&quot; resultType&#x3D;&quot;blog&quot;&gt;\n        select * from &#96;blog&#96;\n        &lt;where&gt;\n            &lt;choose&gt;\n                &lt;when test&#x3D;&quot;title!&#x3D;null&quot;&gt;\n                    title &#x3D;#&#123;title&#125;\n                &lt;&#x2F;when&gt;\n                &lt;when test&#x3D;&quot;author!&#x3D;null&quot;&gt;\n                    and author &#x3D;#&#123;author&#125;\n                &lt;&#x2F;when&gt;\n                &lt;otherwise&gt;\n                    and view &#x3D;#&#123;view&#125;\n                &lt;&#x2F;otherwise&gt;\n            &lt;&#x2F;choose&gt;\n        &lt;&#x2F;where&gt;\n    &lt;&#x2F;select&gt;</code></pre>\n\n<h3 id=\"SQL片段\"><a href=\"#SQL片段\" class=\"headerlink\" title=\"SQL片段\"></a>SQL片段</h3><ul>\n<li>使用SQL标签抽取公共部分</li>\n</ul>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;sql id&#x3D;&quot;if-where&quot;&gt;\n    &lt;where&gt;\n        &lt;if test&#x3D;&quot;title!&#x3D;null&quot;&gt;\n            title &#x3D;#&#123;title&#125;\n        &lt;&#x2F;if&gt;\n        &lt;if test&#x3D;&quot;author!&#x3D;null&quot;&gt;\n            and author&#x3D;#&#123;author&#125;\n        &lt;&#x2F;if&gt;\n    &lt;&#x2F;where&gt;\n&lt;&#x2F;sql&gt;</code></pre>\n\n\n\n<ul>\n<li>使用include标签引用即可</li>\n</ul>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;include refid&#x3D;&quot;if-where&quot;&gt;&lt;&#x2F;include&gt;</code></pre>\n\n\n\n<h4 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h4><ul>\n<li>最好基于单表来定义SQL片段</li>\n</ul>\n<h3 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h3><p><strong><em>foreach</em> 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加多余的分隔符，看它多智能！</strong></p>\n<p><strong>使用可迭代对象或者数组时，index 是当前迭代的序号，item 的值是本次迭代获取到的元素。当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。</strong></p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;select id&#x3D;&quot;getBlogByForEach&quot; resultType&#x3D;&quot;blog&quot; parameterType&#x3D;&quot;map&quot;&gt;\n    select * from &#96;blog&#96;\n    &lt;where&gt;\n        &lt;foreach collection&#x3D;&quot;ids&quot; item&#x3D;&quot;id&quot; open&#x3D;&quot;and (&quot; close&#x3D;&quot;)&quot; separator&#x3D;&quot;and&quot;&gt;\n            id&#x3D;#&#123;id&#125;\n        &lt;&#x2F;foreach&gt;\n    &lt;&#x2F;where&gt;\n&lt;&#x2F;select&gt;\n</code></pre>\n\n<h2 id=\"12、缓存\"><a href=\"#12、缓存\" class=\"headerlink\" title=\"12、缓存\"></a>12、缓存</h2><h3 id=\"12-1、简介\"><a href=\"#12-1、简介\" class=\"headerlink\" title=\"12.1、简介\"></a>12.1、简介</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">查询  ：  连接数据库 ，耗资源！\n\t一次查询的结果，给他暂存在一个可以直接取到的地方！--&gt; 内存 ： 缓存\n\t\n我们再次查询相同数据的时候，直接走缓存，就不用走数据库了</code></pre>\n\n\n\n<ol>\n<li><p>什么是缓存 [ Cache ]？</p>\n<ul>\n<li>存在内存中的临时数据。</li>\n<li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li>\n</ul>\n</li>\n<li><p>为什么使用缓存？</p>\n<ul>\n<li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li>\n</ul>\n</li>\n<li><p>什么样的数据能使用缓存？</p>\n<ul>\n<li>经常查询并且不经常改变的数据。【可以使用缓存】</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"12-2、Mybatis缓存\"><a href=\"#12-2、Mybatis缓存\" class=\"headerlink\" title=\"12.2、Mybatis缓存\"></a>12.2、Mybatis缓存</h3><ul>\n<li>Mybatis包含一个非常强大的查询缓存特性，它可以非常方便地订制和配置缓存。缓存可以极大的提升查询效率</li>\n<li>Mybatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和*<em>二级缓存</em><ul>\n<li>默认情况下，只有一级缓存开启。(SqlSession级别地缓存，也称为本地缓存)</li>\n<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li>\n<li>为了提高扩展性，Mybatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12-3、一级缓存\"><a href=\"#12-3、一级缓存\" class=\"headerlink\" title=\"12.3、一级缓存\"></a>12.3、一级缓存</h3><ul>\n<li>一级缓存也叫本地缓存：SqlSession<ul>\n<li>与数据库同义词会话期间查询到地数据会放在本地缓存中。</li>\n<li>以后如果需要相同地数据，直接从缓存中拿，不用再去查询数据库。</li>\n</ul>\n</li>\n</ul>\n<p>测试步骤：</p>\n<ol>\n<li>开启日志</li>\n<li>测试在一个Session中查询两次相同的日志</li>\n<li>查看输出日志</li>\n</ol>\n<p><img src=\"/MyBatis.assets/image-20210806155218095.png\" alt=\"image-20210806155218095\"></p>\n<p>缓存失效的情况：</p>\n<ol>\n<li><p>查询不同的东西</p>\n</li>\n<li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@org.junit.Test\n   public void test() &#123;\n       SqlSession sqlSession &#x3D; MybatisUtil.getSqlSession();\n       UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);\n   \n       User user &#x3D; mapper.getUserById(1);\n       System.out.println(user);\n   \n       mapper.updateUser(new User(1,&quot;ajklad&quot;,&quot;adalskdjfkal&quot;));\n       sqlSession.commit();\n   \n       System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n   \n       User user1 &#x3D; mapper.getUserById(1);\n       System.out.println(user1);\n       sqlSession.close();\n   &#125;</code></pre>\n\n<p><img src=\"/MyBatis.assets/image-20210806155942106.png\" alt=\"image-20210806155942106\"></p>\n</li>\n<li><p>查询不同Mapper.xml</p>\n</li>\n<li><p>手动清理缓存</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">SqlSession.clearCache();</code></pre>\n\n\n\n<p><img src=\"/MyBatis.assets/image-20210806160054552.png\" alt=\"image-20210806160054552\"></p>\n<p>小结：一级缓存默认是开启的，只在一次SqlSession中有效，也就是从拿到连接到关闭连接这个区间段！</p>\n<p>一级缓存就是一个Map。</p>\n<h3 id=\"12-4、二级缓存\"><a href=\"#12-4、二级缓存\" class=\"headerlink\" title=\"12.4、二级缓存\"></a>12.4、二级缓存</h3><ul>\n<li>二级缓存也叫全局缓存，一级缓存作用于太低，所以诞生了二级缓存</li>\n<li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存</li>\n<li>工作机制<ul>\n<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li>\n<li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li>\n<li>新的会话查询信息，就可以从二级缓存中获取内容；</li>\n<li>不同mapper查出的数据会放在自己对应的缓存中；</li>\n</ul>\n</li>\n</ul>\n<p>步骤：</p>\n<ol>\n<li>开启全局缓存(显式开启)</li>\n</ol>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;setting name&#x3D;&quot;cacheEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</code></pre>\n\n<ol start=\"2\">\n<li>在要使用的二级缓存的Mapper中开启</li>\n</ol>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;cache&#x2F;&gt;</code></pre>\n\n<p>​    也可以自定义参数</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;cache\n  eviction&#x3D;&quot;FIFO&quot;\n  flushInterval&#x3D;&quot;60000&quot;\n  size&#x3D;&quot;512&quot;\n  readOnly&#x3D;&quot;true&quot;&#x2F;&gt;</code></pre>\n\n<ol start=\"3\">\n<li>测试</li>\n</ol>\n<ul>\n<li>需要将类序列化，否则在readOnly&#x3D;”false“时会报错。</li>\n</ul>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">Caused by: java.io.NotSerializableException: com.kuang.pojo.User</code></pre>\n\n<p>小结：</p>\n<ul>\n<li>只要开启了二级缓存，在同一个Mapper下就有效</li>\n<li>所有的数据都会先放在一级缓存中</li>\n<li>只有当会话提交，或者关闭时，才会提交到二级缓存中。</li>\n</ul>\n<h3 id=\"12-5、缓存原理\"><a href=\"#12-5、缓存原理\" class=\"headerlink\" title=\"12.5、缓存原理\"></a>12.5、缓存原理</h3><p><img src=\"/MyBatis.assets/image-20210806172253314.png\" alt=\"image-20210806172253314\"></p>\n<h3 id=\"12-6、自定义缓存-ehcache\"><a href=\"#12-6、自定义缓存-ehcache\" class=\"headerlink\" title=\"12.6、自定义缓存-ehcache\"></a>12.6、自定义缓存-ehcache</h3>","text":"MyBatis1、简介 1.1、什么是 MyBatis？MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"23 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#MyBatis\"><span class=\"toc-text\">MyBatis</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1、简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF-MyBatis%EF%BC%9F\"><span class=\"toc-text\">1.1、什么是 MyBatis？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2%E3%80%81%E6%8C%81%E4%B9%85%E5%8C%96\"><span class=\"toc-text\">1.2、持久化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3%E3%80%81%E6%8C%81%E4%B9%85%E5%B1%82\"><span class=\"toc-text\">1.3、持久层</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81Mybatis%EF%BC%9F\"><span class=\"toc-text\">1.4为什么需要Mybatis？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAMybatis%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">2、第一个Mybatis程序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">2.1搭建环境</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">2.2创建模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">2.3测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81CURD\"><span class=\"toc-text\">3、CURD</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81namespace\"><span class=\"toc-text\">1、namespace</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81select\"><span class=\"toc-text\">2、select</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%BC%96%E5%86%99%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">1、编写接口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%BC%96%E5%86%99Mapper%E4%B8%AD%E5%AF%B9%E5%BA%94%E7%9A%84xml%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">2、编写Mapper中对应的xml语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">3、测试</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81update\"><span class=\"toc-text\">3、update</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81delete\"><span class=\"toc-text\">4、delete</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81insert\"><span class=\"toc-text\">5、insert</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81Map\"><span class=\"toc-text\">6、Map</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%E3%80%81%E6%B3%A8%E6%84%8F\"><span class=\"toc-text\">7、注意</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">4、配置解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">1、核心配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%88environments%EF%BC%89\"><span class=\"toc-text\">2、环境配置（environments）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%B1%9E%E6%80%A7%EF%BC%88properties%EF%BC%89\"><span class=\"toc-text\">3、属性（properties）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D%EF%BC%88typeAliases%EF%BC%89\"><span class=\"toc-text\">4、类型别名（typeAliases）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">5、设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E6%98%A0%E5%B0%84%E5%99%A8\"><span class=\"toc-text\">6、映射器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%E3%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">7、生命周期和作用域</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E8%A7%A3%E5%86%B3%E5%B1%9E%E6%80%A7%E5%90%8D%E5%92%8C%E5%AD%97%E6%AE%B5%E5%90%8D%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">5、解决属性名和字段名不一致的问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">6、日志</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LOG4J\"><span class=\"toc-text\">LOG4J</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E5%88%86%E9%A1%B5\"><span class=\"toc-text\">7、分页</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%88%86%E9%A1%B5%EF%BC%9F\"><span class=\"toc-text\">为什么分页？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1%E3%80%81%E4%BD%BF%E7%94%A8LIMIT%E5%88%86%E9%A1%B5\"><span class=\"toc-text\">7.1、使用LIMIT分页</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8Mybatis%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%EF%BC%8C%E6%A0%B8%E5%BF%83SQL\"><span class=\"toc-text\">使用Mybatis实现分页，核心SQL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">1.接口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-Mapper-xml\"><span class=\"toc-text\">2.Mapper.xml</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-2%E3%80%81RowBounds%E5%88%86%E9%A1%B5\"><span class=\"toc-text\">7.2、RowBounds分页</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-3%E3%80%81%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">7.3、分页插件</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8%E3%80%81%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">8、使用注解开发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-1%E3%80%81%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">8.1、面向接口编程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MyBatis%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">MyBatis流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2%E3%80%81%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">8.2、使用注解开发</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-3%E3%80%81CURD\"><span class=\"toc-text\">8.3、CURD</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E-Param-%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">关于@Param()注解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%92%8C-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9A-%E6%9B%B4%E5%AE%89%E5%85%A8%EF%BC%8C%E9%98%B2%E6%AD%A2SQL%E6%B3%A8%E5%85%A5%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%8A%A0%E4%B8%8A%E2%80%9D%E2%80%9D-%E5%8F%8C%E5%BC%95%E5%8F%B7-%E3%80%82\"><span class=\"toc-text\">#{}和${}的区别：#{}更安全，防止SQL注入，自动加上””(双引号)。</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9%E3%80%81%E5%A4%9A%E5%AF%B9%E4%B8%80\"><span class=\"toc-text\">9、多对一</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%89%E7%85%A7%E6%9F%A5%E8%AF%A2%E5%B5%8C%E5%A5%97%E5%A4%84%E7%90%86\"><span class=\"toc-text\">按照查询嵌套处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%89%E7%85%A7%E7%BB%93%E6%9E%9C%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86\"><span class=\"toc-text\">按照结果查询处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MySql%E5%A4%9A%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">MySql多对一查询方式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10%E3%80%81%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">10、一对多查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%89%E7%BB%93%E6%9E%9C%E5%B5%8C%E5%A5%97%E5%A4%84%E7%90%86\"><span class=\"toc-text\">按结果嵌套处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%89%E6%9F%A5%E8%AF%A2%E5%B5%8C%E5%A5%97%E5%A4%84%E7%90%86\"><span class=\"toc-text\">按查询嵌套处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">注意点：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91\"><span class=\"toc-text\">面试高频</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11%E3%80%81%E5%8A%A8%E6%80%81SQL\"><span class=\"toc-text\">11、动态SQL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">搭建环境</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IF\"><span class=\"toc-text\">IF</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#WHERE\"><span class=\"toc-text\">WHERE</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SET\"><span class=\"toc-text\">SET</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#choose%E3%80%81when%E3%80%81otherwise\"><span class=\"toc-text\">choose、when、otherwise</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SQL%E7%89%87%E6%AE%B5\"><span class=\"toc-text\">SQL片段</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%9A\"><span class=\"toc-text\">注意事项：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#forEach\"><span class=\"toc-text\">forEach</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12%E3%80%81%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">12、缓存</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-1%E3%80%81%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">12.1、简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-2%E3%80%81Mybatis%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">12.2、Mybatis缓存</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-3%E3%80%81%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">12.3、一级缓存</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-4%E3%80%81%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">12.4、二级缓存</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-5%E3%80%81%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">12.5、缓存原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-6%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BC%93%E5%AD%98-ehcache\"><span class=\"toc-text\">12.6、自定义缓存-ehcache</span></a></li></ol></li></ol></li></ol>","author":{"name":"Xoc001","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"SMBMS","date":"2022-02-10T17:38:23.832Z","updated":"2021-07-25T14:43:02.005Z","comments":true,"path":"api/articles/SMBMS.json","keywords":null,"cover":[],"text":"SMBMS1、项目搭建1.搭建一个Maven web 项目 2.配置Tomcat 3.测试项目 4.导入项目中需要的jar包 5.编写实体类 ​ ORM映射：表-类映射 6.编写基础公共类 ​ 1.数据库配置文件 driver&#x3D;com.mysql.jdbc.Driver...","link":"","photos":[],"count_time":{"symbolsCount":"41k","symbolsTime":"37 mins."},"categories":[],"tags":[],"author":{"name":"Xoc001","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"JavaWeb","date":"2022-02-10T17:38:23.820Z","updated":"2021-07-30T11:26:01.248Z","comments":true,"path":"api/articles/JavaWeb.json","keywords":null,"cover":[],"text":"JavaWeb1、Servlet1.1、ServletContext应用1、获取初始化参数&lt;!-- 配置一些web应用初始化参数--&gt; &lt;context-param&gt; &lt;param-name&gt;url&lt;&#x2F;param-name&gt...","link":"","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"26 mins."},"categories":[],"tags":[],"author":{"name":"Xoc001","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}