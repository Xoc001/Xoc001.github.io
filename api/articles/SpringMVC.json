{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"SpringMVC","date":"2022-02-10T17:38:23.903Z","updated":"2021-08-31T14:52:26.768Z","comments":true,"path":"api/articles/SpringMVC.json","keywords":null,"cover":[],"content":"<h1 id=\"SpringMVC\"><a href=\"#SpringMVC\" class=\"headerlink\" title=\"SpringMVC\"></a>SpringMVC</h1><p>2021年8月15日</p>\n<p>ssm:mybatis+Spring + SpringMVC  MVC三层架构</p>\n<h2 id=\"1、MVC\"><a href=\"#1、MVC\" class=\"headerlink\" title=\"1、MVC\"></a>1、MVC</h2><h3 id=\"1-1、什么是MVC\"><a href=\"#1-1、什么是MVC\" class=\"headerlink\" title=\"1.1、什么是MVC\"></a>1.1、什么是MVC</h3><ul>\n<li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li>\n<li>是将业务逻辑、数据、显示分离的方法来组织代码。</li>\n<li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li>\n<li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。</li>\n</ul>\n<p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p>\n<p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p>\n<p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p>\n<p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p>\n<h3 id=\"1-2、什么是SpringMVC\"><a href=\"#1-2、什么是SpringMVC\" class=\"headerlink\" title=\"1.2、什么是SpringMVC\"></a>1.2、什么是SpringMVC</h3><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p>\n<p>查看官方文档：<a href=\"https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web\">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p>\n<p><strong>我们为什么要学习SpringMVC呢?</strong></p>\n<p> Spring MVC的特点：</p>\n<ol>\n<li>轻量级，简单易学</li>\n<li>高效 , 基于请求响应的MVC框架</li>\n<li>与Spring兼容性好，无缝结合</li>\n<li>约定优于配置</li>\n<li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li>\n<li>简洁灵活</li>\n</ol>\n<p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p>\n<p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p>\n<p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用Spring IoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……</p>\n<h3 id=\"1-3、中心控制器\"><a href=\"#1-3、中心控制器\" class=\"headerlink\" title=\"1.3、中心控制器\"></a>1.3、中心控制器</h3><p>​    Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p>\n<p><img src=\"/SpringMVC.assets/image-20210816223340474.png\" alt=\"image-20210816223340474\"></p>\n<p><strong>SpringMVC的原理如下图所示：</strong></p>\n<p>​    当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p>\n<p><img src=\"/SpringMVC.assets/640\" alt=\"图片\"></p>\n<p><img src=\"/SpringMVC.assets/image-20210817160523439.png\" alt=\"image-20210817160523439\"></p>\n<h2 id=\"2、第一个SpringMVC程序\"><a href=\"#2、第一个SpringMVC程序\" class=\"headerlink\" title=\"2、第一个SpringMVC程序\"></a>2、第一个SpringMVC程序</h2><h3 id=\"配置版创建SpringMVC程序\"><a href=\"#配置版创建SpringMVC程序\" class=\"headerlink\" title=\"配置版创建SpringMVC程序\"></a>配置版创建SpringMVC程序</h3><ol>\n<li><p>配置web.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--    配置DispatcherServlet 这是SPring MVC的核心，请求分发器--&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;\n\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;\n            &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;&#x2F;param-value&gt;\n        &lt;&#x2F;init-param&gt;\n    &lt;&#x2F;servlet&gt;\n\n&lt;!--     在Spring MVC中,  &#x2F;  &#x2F;*\n        &#x2F;:只匹配所有的请求，不会去匹配JSP页面\n        &#x2F;* ：匹配所有的请求，包括jsp页面\n\n--&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;\n        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;\n    &lt;&#x2F;servlet-mapping&gt;\n</code></pre>\n\n\n</li>\n<li><p>编写springmvc-servlet.xml</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n      xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n      xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;\n\n&lt;&#x2F;beans&gt;</code></pre>\n\n\n\n<ul>\n<li>添加处理映射器</li>\n<li>添加处理适配器</li>\n<li>添加视图解析器</li>\n</ul>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--    处理器映射器--&gt;\n    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;&#x2F;&gt;\n&lt;!--    处理器适配器--&gt;\n    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;&#x2F;&gt;\n&lt;!--    视图解析器 : 模板引擎--&gt;\n    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; id&#x3D;&quot;InternalResourceViewResolver&quot;&gt;\n        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\n    &lt;bean id&#x3D;&quot;&#x2F;test&quot; class&#x3D;&quot;my.HelloController&quot;&#x2F;&gt;</code></pre>\n\n\n</li>\n<li><p>创建操作业务类，实现Controller接口</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class HelloController implements Controller &#123;\n    @Override\n    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;\n        ModelAndView mv &#x3D; new ModelAndView();\n\n        String result &#x3D; &quot;HelloSpringMVC!&quot;;\n        mv.addObject(&quot;msg&quot;,result);\n\n        mv.setViewName(&quot;test&quot;);\n\n        return mv;\n    &#125;\n&#125;</code></pre>\n\n\n</li>\n<li><p>注册bean</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;bean id&#x3D;&quot;&#x2F;test&quot; class&#x3D;&quot;my.HelloController&quot;&#x2F;&gt;</code></pre>\n\n\n</li>\n<li><p>编写需要跳转的视图界面</p>\n</li>\n<li><p>测试。</p>\n</li>\n</ol>\n<h3 id=\"注解创建SpringMVC程序\"><a href=\"#注解创建SpringMVC程序\" class=\"headerlink\" title=\"注解创建SpringMVC程序\"></a>注解创建SpringMVC程序</h3><ol>\n<li><p>配置web.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;\n         version&#x3D;&quot;4.0&quot;&gt;\n\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;\n\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;\n            &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;&#x2F;param-value&gt;\n        &lt;&#x2F;init-param&gt;\n        &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;\n    &lt;&#x2F;servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;\n        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;\n    &lt;&#x2F;servlet-mapping&gt;\n\n&lt;&#x2F;web-app&gt;</code></pre>\n\n<p><strong>&#x2F; 和 &#x2F;* 的区别：</strong></p>\n<p>&lt; url-pattern &gt; &#x2F; &lt;&#x2F; url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。</p>\n<p>&lt; url-pattern &gt; &#x2F;* &lt;&#x2F; url-pattern &gt; 会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</p>\n<ol>\n<li><ul>\n<li>注意web.xml版本问题，要最新版！</li>\n<li>注册DispatcherServlet</li>\n<li>关联SpringMVC的配置文件</li>\n<li>启动级别为1</li>\n<li>映射路径为 &#x2F; 【不要用&#x2F;*，会404】</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>配置spring-servlet.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--自动扫描包--&gt;\n    &lt;context:component-scan base-package&#x3D;&quot;my&quot;&#x2F;&gt;\n&lt;!--    Spring mvc 不处理静态资源--&gt;\n    &lt;mvc:default-servlet-handler&#x2F;&gt;\n\n&lt;!--    支持MVC注解驱动--&gt;\n    &lt;mvc:annotation-driven&#x2F;&gt;\n\n&lt;!--    视图适配器--&gt;\n    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; id&#x3D;&quot;internalResourceViewResolver&quot;&gt;\n        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;WEB-INF&#x2F;jsp&#x2F;&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n</code></pre>\n\n\n</li>\n<li><p>创建Controller 类</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class HelloController &#123;\n\n    @RequestMapping(&quot;&#x2F;hello&quot;)\n    public String hello(Model model)&#123;\n        model.addAttribute(&quot;msg&quot;,&quot;Hello,SpringMVC Annotation!&quot;);\n        return &quot;hello&quot;;\n    &#125;\n&#125;\n</code></pre>\n\n<ul>\n<li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li>\n<li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是&#x2F;HelloController&#x2F;hello；</li>\n<li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li>\n<li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF&#x2F;jsp&#x2F;<strong>hello</strong>.jsp。</li>\n</ul>\n</li>\n<li><p>编写jsp页面</p>\n</li>\n<li><p>测试</p>\n</li>\n</ol>\n<h2 id=\"3、控制器-Controller\"><a href=\"#3、控制器-Controller\" class=\"headerlink\" title=\"3、控制器 Controller\"></a>3、控制器 Controller</h2><h3 id=\"1-实现Controller-接口\"><a href=\"#1-实现Controller-接口\" class=\"headerlink\" title=\"1.实现Controller 接口\"></a>1.实现Controller 接口</h3><p>Controller 是一个接口，接口中只有一个方法</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@FunctionalInterface\npublic interface Controller &#123;\n    @Nullable\n    ModelAndView handleRequest(HttpServletRequest var1, HttpServletResponse var2) throws Exception;\n&#125;</code></pre>\n\n\n\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><ol>\n<li><p>新建Moudle</p>\n</li>\n<li><p>编写ControllerTest类，实现Controller接口</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my;\n\n\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.mvc.Controller;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class ControllerTest1 implements Controller &#123;\n    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;\n        ModelAndView mv &#x3D; new ModelAndView();\n        mv.addObject(&quot;msg&quot;,&quot;ControllerTest1&quot;);\n\n        mv.setViewName(&quot;test&quot;);\n        return mv;\n    &#125;\n&#125;\n</code></pre>\n\n\n</li>\n<li><p>在Spring 配置文件中配置bean；name对应请求路径，class对应处理类路径。</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;bean id&#x3D;&quot;&#x2F;test1&quot; class&#x3D;&quot;my.ControllerTest1&quot;&#x2F;&gt;</code></pre>\n</li>\n<li><p>编写前端界面</p>\n<pre class=\"line-numbers language-jsp\" data-language=\"jsp\"><code class=\"language-jsp\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n$&#123;msg&#125;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n</li>\n<li><p>测试</p>\n</li>\n</ol>\n<p>说明：</p>\n<ul>\n<li>实现接口Controller定义控制器是较老的办法</li>\n<li>缺点：一个控制器中只有一个方法，需要多个方法则需要多个控制器，定义麻烦。</li>\n</ul>\n<h3 id=\"2-使用注解-Controller\"><a href=\"#2-使用注解-Controller\" class=\"headerlink\" title=\"2.使用注解@Controller\"></a>2.使用注解@Controller</h3><ul>\n<li>@Controller注解类型用于声明Spring类的实例是一个控制器</li>\n<li>Spring可以用扫描机制扫描应用程序下所有基于注解的类，为了保证可以扫描到控制器，需要在Spring配置文件中设置扫描的包路径。</li>\n</ul>\n<h4 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h4><ol>\n<li><p>创建ControllerTest2类</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class ControllerTest2 &#123;\n    @RequestMapping(&quot;&#x2F;test2&quot;)\n    public String test2(Model model)&#123;\n\n        model.addAttribute(&quot;msg&quot;,&quot;Hello ControllerTest2&quot;);\n\n        return &quot;test&quot;;\n    &#125;\n\n\n    @RequestMapping(&quot;&#x2F;test3&quot;)\n    public String test3(Model model)&#123;\n        model.addAttribute(&quot;msg&quot;,&quot;ControllerTest3&quot;);\n\n        return &quot;test&quot;;\n    &#125;\n&#125;\n</code></pre>\n\n\n</li>\n<li><p>在Spring配置中实现自动扫描指定的包</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--自动扫描包--&gt;\n&lt;context:component-scan base-package&#x3D;&quot;my&quot;&#x2F;&gt;</code></pre>\n\n\n</li>\n<li><p>测试</p>\n</li>\n</ol>\n<h3 id=\"3-RequestMapping\"><a href=\"#3-RequestMapping\" class=\"headerlink\" title=\"3.RequestMapping\"></a>3.RequestMapping</h3><ul>\n<li><p>@RequestMapping 注解用于映射url到控制器类或一个特定的处理程序方法，可用于类上或方法上。用于类上，表示类中所有的相应请求的方法都是以该路径作为父路径。</p>\n</li>\n<li><p>只注解在方法上面</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@RequestMapping(&quot;&#x2F;test2&quot;)\npublic String test2(Model model)&#123;\n  \n    model.addAttribute(&quot;msg&quot;,&quot;Hello ControllerTest2&quot;);\n  \n    return &quot;test&quot;;\n&#125;</code></pre>\n\n<p>实现路径为：”<a href=\"http://localhost:8080/\">http://localhost:8080/</a> 项目名 &#x2F;test2”</p>\n</li>\n<li><p>注解在类上面</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Controller\n@RequestMapping(&quot;&#x2F;hello&quot;)\npublic class ControllerTest3 &#123;\n\n    @RequestMapping(&quot;&#x2F;t1&quot;)\n    public String test1(Model model)&#123;\n        model.addAttribute(&quot;msg&quot;,&quot;RequestMapping  Test1!&quot;);\n\n        return &quot;test&quot;;\n    &#125;\n&#125;\n</code></pre>\n\n<p>实现路径为：<a href=\"http://localhost:8080/%E9%A1%B9%E7%9B%AE%E5%90%8D\">http://localhost:8080/项目名</a> &#x2F;hello&#x2F;t1</p>\n<p>&#x3D;&#x3D;<strong>需要先指定类的路径在指定方法的路径。</strong>&#x3D;&#x3D;</p>\n</li>\n</ul>\n<h2 id=\"4、RestFul-风格\"><a href=\"#4、RestFul-风格\" class=\"headerlink\" title=\"4、RestFul 风格\"></a>4、RestFul 风格</h2><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，知识一种风格。基于这个风格设计的软件可以更简洁，更有层次，更容易实现缓存等机制。</p>\n<h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><p>资源：互联网所有的事物都可以被抽象为资源</p>\n<p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。分别对应：添加，删除，修改，查询。</p>\n<p><strong>传统方式操作资源</strong>  ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p>\n<p>​    <a href=\"http://127.0.0.1/item/queryItem.action?id=1\">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</p>\n<p>​    <a href=\"http://127.0.0.1/item/saveItem.action\">http://127.0.0.1/item/saveItem.action</a> 新增,POST</p>\n<p>​    <a href=\"http://127.0.0.1/item/updateItem.action\">http://127.0.0.1/item/updateItem.action</a> 更新,POST</p>\n<p>​    <a href=\"http://127.0.0.1/item/deleteItem.action?id=1\">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</p>\n<p><strong>使用RESTful操作资源</strong> ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p>\n<p>​    <a href=\"http://127.0.0.1/item/1\">http://127.0.0.1/item/1</a> 查询,GET</p>\n<p>​    <a href=\"http://127.0.0.1/item\">http://127.0.0.1/item</a> 新增,POST</p>\n<p>​    <a href=\"http://127.0.0.1/item\">http://127.0.0.1/item</a> 更新,PUT</p>\n<p>​    <a href=\"http://127.0.0.1/item/1\">http://127.0.0.1/item/1</a> 删除,DELETE</p>\n<h4 id=\"测试-2\"><a href=\"#测试-2\" class=\"headerlink\" title=\"测试\"></a>测试</h4><ol>\n<li><p>新建RestfulController 类</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Controller\npublic class RestFulController &#123;\n\n&#125;\n</code></pre>\n\n\n</li>\n<li><p>在参数中使用@pathVariable注解，让方法参数的值对应绑定到一个URI模型板的变量上。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class RestFulController &#123;\n\n    @RequestMapping(value &#x3D; &quot;&#x2F;abc&#x2F;&#123;a&#125;&#x2F;&#123;b&#125;&quot;, method &#x3D; RequestMethod.GET)\n    public String index(@PathVariable int a, @PathVariable int b, Model model)&#123;\n\n        int sum &#x3D; a+b;\n        model.addAttribute(&quot;msg&quot;,&quot;结果为：&quot; + sum);\n\n        return &quot;test&quot;;\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li><p>测试</p>\n</li>\n</ol>\n<h4 id=\"使用路径变量的好处\"><a href=\"#使用路径变量的好处\" class=\"headerlink\" title=\"使用路径变量的好处\"></a>使用路径变量的好处</h4><ul>\n<li>使路径变的更加简洁</li>\n<li>获得参数更加方便，框架会自动进行类型转换</li>\n<li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法。</li>\n</ul>\n<h5 id=\"参数测试\"><a href=\"#参数测试\" class=\"headerlink\" title=\"参数测试\"></a>参数测试</h5><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Controller\npublic class RestFulController &#123;\n\n    @RequestMapping(value &#x3D; &quot;&#x2F;abc&#x2F;&#123;a&#125;&#x2F;&#123;b&#125;&quot;, method &#x3D; RequestMethod.GET)\n    public String index(@PathVariable int a, @PathVariable int b, Model model)&#123;\n\n        int sum &#x3D; a+b;\n        model.addAttribute(&quot;msg&quot;,&quot;结果为：&quot; + sum);\n\n        return &quot;test&quot;;\n    &#125;\n&#125;</code></pre>\n\n<p>&#x3D;&#x3D;<strong>路径：localhost:8080&#x2F;demo04&#x2F;abc&#x2F;123&#x2F;1211</strong>&#x3D;&#x3D;</p>\n<p><img src=\"/SpringMVC.assets/image-20210817215556509.png\" alt=\"image-20210817215556509\"></p>\n<h4 id=\"使用method属性指定请求类型\"><a href=\"#使用method属性指定请求类型\" class=\"headerlink\" title=\"使用method属性指定请求类型\"></a>使用method属性指定请求类型</h4><p>&#x3D;&#x3D;用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如：GET、POST、HEAD、OPTIONS、PUT、PATCH、DELETE、TRACE等。&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class RestFulController &#123;\n\n    @RequestMapping(value &#x3D; &quot;&#x2F;abc&#x2F;&#123;a&#125;&#x2F;&#123;b&#125;&quot;, method &#x3D; RequestMethod.GET)\n    public String index(@PathVariable int a, @PathVariable int b, Model model)&#123;\n\n        int sum &#x3D; a+b;\n        model.addAttribute(&quot;msg&quot;,&quot;结果为：&quot; + sum);\n\n        return &quot;test&quot;;\n    &#125;\n&#125;</code></pre>\n\n\n\n\n\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p>\n<p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p>\n<p>方法级别的注解变体有如下几个：组合注解</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@GetMapping\n@PostMapping\n@PutMapping\n@DeleteMapping\n@PatchMapping</code></pre>\n\n<p>@GetMapping 是一个组合注解，平时使用的会比较多！</p>\n<p>它所扮演的是 @RequestMapping(method &#x3D;RequestMethod.GET) 的一个快捷方式。</p>\n<h2 id=\"5、Spring-MVC重定向\"><a href=\"#5、Spring-MVC重定向\" class=\"headerlink\" title=\"5、Spring MVC重定向\"></a>5、Spring MVC重定向</h2><p>通过SpringMVC来实现转发和重定向-<strong>无需视图解析器：</strong></p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Controller\npublic class ModelTest1 &#123;\n    \n    @RequestMapping(&quot;&#x2F;test&#x2F;t2&quot;)\n    public String test3(Model model) &#123;\n        &#x2F;&#x2F;转发\n        model.addAttribute(&quot;msg&quot;,&quot;转发&quot;);\n        return &quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;test.jsp&quot;;\n    &#125;\n\n    @RequestMapping(&quot;&#x2F;test&#x2F;t2&quot;)\n    public String test2(Model model) &#123;\n        &#x2F;&#x2F;转发\n        model.addAttribute(&quot;msg&quot;,&quot;转发&quot;);\n        return &quot;forward:&#x2F;WEB-INF&#x2F;jsp&#x2F;test.jsp&quot;;\n    &#125;\n\n\n    @RequestMapping(&quot;&#x2F;test&#x2F;h1&quot;)\n    public String test(Model model) &#123;\n        &#x2F;&#x2F;重定向\n        return &quot;redirect:&#x2F;abc.jsp&quot;;\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<p>通过SpringMVC实现转发和重定向-使用视图解析器</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Controller\npublic class ModelTest1 &#123;\n\n    @RequestMapping(&quot;&#x2F;test&#x2F;t2&quot;)\n    public String test2(Model model) &#123;\n        &#x2F;&#x2F;转发\n        model.addAttribute(&quot;msg&quot;,&quot;转发&quot;);\n        return &quot;test&quot;;\n    &#125;\n\n\n    @RequestMapping(&quot;&#x2F;test&#x2F;h1&quot;)\n    public String test(Model model) &#123;\n        &#x2F;&#x2F;重定向\n        return &quot;redirect:&#x2F;abc.jsp&quot;;\n    &#125;\n&#125;\n</code></pre>\n\n<h2 id=\"6、数据处理\"><a href=\"#6、数据处理\" class=\"headerlink\" title=\"6、数据处理\"></a>6、数据处理</h2><h3 id=\"处理提交数据\"><a href=\"#处理提交数据\" class=\"headerlink\" title=\"处理提交数据\"></a>处理提交数据</h3><h4 id=\"1、提交的域名称和处理方法的参数名一致\"><a href=\"#1、提交的域名称和处理方法的参数名一致\" class=\"headerlink\" title=\"1、提交的域名称和处理方法的参数名一致\"></a>1、提交的域名称和处理方法的参数名一致</h4><p>提交数据：localhost:8080&#x2F;user&#x2F;t1?name&#x3D;xoc001</p>\n<p>处理方法：</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Controller\n@RequestMapping(&quot;&#x2F;user&quot;)\npublic class UserController &#123;\n\n    @GetMapping(&quot;&#x2F;t1&quot;)\n    public String test1(@RequestParam(&quot;name&quot;) String name, Model model)&#123;\n\n        System.out.println(&quot;name&#x3D;&quot;+name);\n        model.addAttribute(&quot;msg&quot;,name);\n        return &quot;test&quot;;\n    &#125;\n&#125;</code></pre>\n\n<h4 id=\"2、提交的域名称和处理方法的参数名不一致\"><a href=\"#2、提交的域名称和处理方法的参数名不一致\" class=\"headerlink\" title=\"2、提交的域名称和处理方法的参数名不一致\"></a>2、提交的域名称和处理方法的参数名不一致</h4><p>提交数据：localhost:8080&#x2F;user&#x2F;t1?username&#x3D;xoc001</p>\n<p>处理方法：</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Controller\n@RequestMapping(&quot;&#x2F;user&quot;)\npublic class UserController &#123;\n\n    @GetMapping(&quot;&#x2F;t1&quot;)\n    public String test1(@RequestParam(&quot;username&quot;) String name, Model model)&#123;\n\n        System.out.println(&quot;name&#x3D;&quot;+name);\n        model.addAttribute(&quot;msg&quot;,name);\n        return &quot;test&quot;;\n    &#125;\n&#125;</code></pre>\n\n\n\n<h4 id=\"3、提交的是一个对象\"><a href=\"#3、提交的是一个对象\" class=\"headerlink\" title=\"3、提交的是一个对象\"></a>3、提交的是一个对象</h4><ol>\n<li><p>实体类</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.pojo;\n\npublic class User &#123;\n    private int id;\n    private String name;\n    private int age;\n    \n    &#x2F;&#x2F;Get、Set\n    &#x2F;&#x2F;toString\n    &#x2F;&#x2F;构造\n&#125;\n</code></pre>\n\n\n</li>\n<li><p>提交数据：localhost:8080&#x2F;user&#x2F;t2?id&#x3D;1&amp;name&#x3D;xoc001?&amp;age&#x3D;21</p>\n</li>\n<li><p>处理方法</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Controller\n@RequestMapping(&quot;&#x2F;user&quot;)\npublic class UserController &#123;\n\n    @GetMapping(&quot;&#x2F;t2&#x2F;&#123;id&#125;&#x2F;&#123;name&#125;&#x2F;&#123;age&#125;&quot;)\n    public String test2(User user)&#123;\n\n        System.out.println(user);\n        return &quot;test&quot;;\n    &#125;\n&#125;</code></pre>\n\n<p>如果使用对象的话，前端传递的参数名和对象名必须一致，否则字段信息为null</p>\n<h3 id=\"数据显示到前端\"><a href=\"#数据显示到前端\" class=\"headerlink\" title=\"数据显示到前端\"></a>数据显示到前端</h3><h4 id=\"第一种：使用ModelAndView\"><a href=\"#第一种：使用ModelAndView\" class=\"headerlink\" title=\"第一种：使用ModelAndView\"></a>第一种：使用ModelAndView</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HelloController implements Controller &#123;\n    @Override\n    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;\n        ModelAndView mv &#x3D; new ModelAndView();\n\n        String result &#x3D; &quot;HelloSpringMVC!&quot;;\n        mv.addObject(&quot;msg&quot;,result);\n\n        mv.setViewName(&quot;test&quot;);\n\n        return mv;\n    &#125;\n&#125;</code></pre>\n\n\n\n<h4 id=\"第二种：使用Model\"><a href=\"#第二种：使用Model\" class=\"headerlink\" title=\"第二种：使用Model\"></a>第二种：使用Model</h4><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Controller\n@RequestMapping(&quot;&#x2F;hello&quot;)\npublic class ControllerTest3 &#123;\n\n    @RequestMapping(&quot;&#x2F;t1&quot;)\n    public String test1(Model model)&#123;\n        model.addAttribute(&quot;msg&quot;,&quot;RequestMapping  Test1!&quot;);\n\n        return &quot;test&quot;;\n    &#125;\n&#125;</code></pre>\n\n\n\n<h4 id=\"第三种：使用ModelMap\"><a href=\"#第三种：使用ModelMap\" class=\"headerlink\" title=\"第三种：使用ModelMap\"></a>第三种：使用ModelMap</h4><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Controller\n@RequestMapping(&quot;&#x2F;hello&quot;)\npublic class ControllerTest3 &#123;\n\n    @GetMapping(&quot;&#x2F;t3&quot;)\n    public String test3(@RequestParam(&quot;phone&quot;) String phone,ModelMap map)&#123;\n\n        map.addAttribute(&quot;msg&quot;,phone);\n\n        return &quot;test&quot;;\n    &#125;\n&#125;</code></pre>\n\n<p>区别：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；\n\nModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；\n\nModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</code></pre>\n\n\n\n<h3 id=\"乱码问题\"><a href=\"#乱码问题\" class=\"headerlink\" title=\"乱码问题\"></a>乱码问题</h3><p>测试</p>\n<ol>\n<li><p>编写前端提交的表单页面</p>\n<pre class=\"line-numbers language-JSP\" data-language=\"JSP\"><code class=\"language-JSP\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n    &lt;form action&#x3D;&quot;e&#x2F;t1&quot; method&#x3D;&quot;post&quot;&gt;\n        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot;&gt;\n        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n    &lt;&#x2F;form&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n\n</li>\n<li><p>后台编写对应处理类</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PostMapping;\n\n@Controller\npublic class EncodingController &#123;\n\n    @PostMapping(&quot;e&#x2F;t1&quot;)\n    public String test1(String name, Model model)&#123;\n        model.addAttribute(&quot;msg&quot;,name);\n        return &quot;test&quot;;\n    &#125;\n&#125;\n</code></pre>\n\n\n</li>\n<li><p>&#x3D;&#x3D;在web.xml中配置SpringMVC过滤器&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;filter&gt;\n    &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;\n    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;\n        &lt;param-value&gt;utf-8&lt;&#x2F;param-value&gt;\n    &lt;&#x2F;init-param&gt;\n&lt;&#x2F;filter&gt;\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;\n    &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;\n&lt;&#x2F;filter-mapping&gt;</code></pre>\n\n\n</li>\n<li><p>其余方法</p>\n<ul>\n<li>修改tomcat配置文件：设置编码</li>\n</ul>\n  <pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;Connector URIEncoding&#x3D;&quot;utf-8&quot; port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;\n          connectionTimeout&#x3D;&quot;20000&quot;\n          redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;</code></pre>\n\n<ul>\n<li><p>自定义过滤器</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package com.kuang.filter;\n\nimport javax.servlet.*;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.util.Map;\n\n&#x2F;**\n* 解决get和post请求 全部乱码的过滤器\n*&#x2F;\npublic class GenericEncodingFilter implements Filter &#123;\n\n   @Override\n   public void destroy() &#123;\n  &#125;\n\n   @Override\n   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;\n       &#x2F;&#x2F;处理response的字符编码\n       HttpServletResponse myResponse&#x3D;(HttpServletResponse) response;\n       myResponse.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);\n\n       &#x2F;&#x2F; 转型为与协议相关对象\n       HttpServletRequest httpServletRequest &#x3D; (HttpServletRequest) request;\n       &#x2F;&#x2F; 对request包装增强\n       HttpServletRequest myrequest &#x3D; new MyRequest(httpServletRequest);\n       chain.doFilter(myrequest, response);\n  &#125;\n\n   @Override\n   public void init(FilterConfig filterConfig) throws ServletException &#123;\n  &#125;\n\n&#125;\n\n&#x2F;&#x2F;自定义request对象，HttpServletRequest的包装类\nclass MyRequest extends HttpServletRequestWrapper &#123;\n\n   private HttpServletRequest request;\n   &#x2F;&#x2F;是否编码的标记\n   private boolean hasEncode;\n   &#x2F;&#x2F;定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰\n   public MyRequest(HttpServletRequest request) &#123;\n       super(request);&#x2F;&#x2F; super必须写\n       this.request &#x3D; request;\n  &#125;\n\n   &#x2F;&#x2F; 对需要增强方法 进行覆盖\n   @Override\n   public Map getParameterMap() &#123;\n       &#x2F;&#x2F; 先获得请求方式\n       String method &#x3D; request.getMethod();\n       if (method.equalsIgnoreCase(&quot;post&quot;)) &#123;\n           &#x2F;&#x2F; post请求\n           try &#123;\n               &#x2F;&#x2F; 处理post乱码\n               request.setCharacterEncoding(&quot;utf-8&quot;);\n               return request.getParameterMap();\n          &#125; catch (UnsupportedEncodingException e) &#123;\n               e.printStackTrace();\n          &#125;\n      &#125; else if (method.equalsIgnoreCase(&quot;get&quot;)) &#123;\n           &#x2F;&#x2F; get请求\n           Map&lt;String, String[]&gt; parameterMap &#x3D; request.getParameterMap();\n           if (!hasEncode) &#123; &#x2F;&#x2F; 确保get手动编码逻辑只运行一次\n               for (String parameterName : parameterMap.keySet()) &#123;\n                   String[] values &#x3D; parameterMap.get(parameterName);\n                   if (values !&#x3D; null) &#123;\n                       for (int i &#x3D; 0; i &lt; values.length; i++) &#123;\n                           try &#123;\n                               &#x2F;&#x2F; 处理get乱码\n                               values[i] &#x3D; new String(values[i]\n                                      .getBytes(&quot;ISO-8859-1&quot;), &quot;utf-8&quot;);\n                          &#125; catch (UnsupportedEncodingException e) &#123;\n                               e.printStackTrace();\n                          &#125;\n                      &#125;\n                  &#125;\n              &#125;\n               hasEncode &#x3D; true;\n          &#125;\n           return parameterMap;\n      &#125;\n       return super.getParameterMap();\n  &#125;\n\n   &#x2F;&#x2F;取一个值\n   @Override\n   public String getParameter(String name) &#123;\n       Map&lt;String, String[]&gt; parameterMap &#x3D; getParameterMap();\n       String[] values &#x3D; parameterMap.get(name);\n       if (values &#x3D;&#x3D; null) &#123;\n           return null;\n      &#125;\n       return values[0]; &#x2F;&#x2F; 取回参数的第一个值\n  &#125;\n\n   &#x2F;&#x2F;取所有值\n   @Override\n   public String[] getParameterValues(String name) &#123;\n       Map&lt;String, String[]&gt; parameterMap &#x3D; getParameterMap();\n       String[] values &#x3D; parameterMap.get(name);\n       return values;\n  &#125;\n&#125;</code></pre></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"7、JSON\"><a href=\"#7、JSON\" class=\"headerlink\" title=\"7、JSON\"></a>7、JSON</h2><h3 id=\"JSON介绍\"><a href=\"#JSON介绍\" class=\"headerlink\" title=\"JSON介绍\"></a>JSON介绍</h3><ul>\n<li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li>\n<li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li>\n<li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li>\n<li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li>\n</ul>\n<p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p>\n<ul>\n<li>对象表示为键值对，数据由逗号分隔</li>\n<li>花括号保存对象</li>\n<li>方括号保存数组</li>\n</ul>\n<p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键&#x2F;值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;&quot;name&quot;: &quot;Xoc001&quot;&#125;\n&#123;&quot;age&quot;: &quot;3&quot;&#125;\n&#123;&quot;sex&quot;: &quot;男&quot;&#125;</code></pre>\n\n<p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p>\n<p><strong>JSON 和 JavaScript 对象互转</strong></p>\n<p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">var obj &#x3D; JSON.parse(&#39;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#39;);\n&#x2F;&#x2F;结果是 &#123;a: &#39;Hello&#39;, b: &#39;World&#39;&#125;</code></pre>\n\n<p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">var json &#x3D; JSON.stringify(&#123;a: &#39;Hello&#39;, b: &#39;World&#39;&#125;);\n&#x2F;&#x2F;结果是 &#39;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#39;</code></pre>\n\n\n\n<p><strong>相关Jar包</strong></p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;dependencies&gt;\n     &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.fasterxml.jackson.core&#x2F;jackson-databind --&gt;\n     &lt;dependency&gt;\n         &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;\n         &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;\n         &lt;version&gt;2.12.4&lt;&#x2F;version&gt;\n     &lt;&#x2F;dependency&gt;\n\n &lt;&#x2F;dependencies&gt;</code></pre>\n\n\n\n\n\n<h3 id=\"乱码优化\"><a href=\"#乱码优化\" class=\"headerlink\" title=\"乱码优化\"></a>乱码优化</h3><h4 id=\"乱码统一解决\"><a href=\"#乱码统一解决\" class=\"headerlink\" title=\"乱码统一解决\"></a>乱码统一解决</h4><p>在SpringMVC的配置文件中添加配置</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;mvc:annotation-driven&gt;\n   &lt;mvc:message-converters register-defaults&#x3D;&quot;true&quot;&gt;\n       &lt;bean class&#x3D;&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;\n           &lt;constructor-arg value&#x3D;&quot;UTF-8&quot;&#x2F;&gt;\n       &lt;&#x2F;bean&gt;\n       &lt;bean class&#x3D;&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;\n           &lt;property name&#x3D;&quot;objectMapper&quot;&gt;\n               &lt;bean class&#x3D;&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;&gt;\n                   &lt;property name&#x3D;&quot;failOnEmptyBeans&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;\n               &lt;&#x2F;bean&gt;\n           &lt;&#x2F;property&gt;\n       &lt;&#x2F;bean&gt;\n   &lt;&#x2F;mvc:message-converters&gt;\n&lt;&#x2F;mvc:annotation-driven&gt;</code></pre>\n\n\n\n<h4 id=\"返回json字符串统一解决\"><a href=\"#返回json字符串统一解决\" class=\"headerlink\" title=\"返回json字符串统一解决\"></a>返回json字符串统一解决</h4><p>在类上直接使用@RestController，这样里面所有的方法只会返回json字符串。不用再每一个都添加@ResponseBody。</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@RestController\npublic class UserController &#123;\n\n    @RequestMapping(&quot;&#x2F;t1&quot;)\n    &#x2F;&#x2F;@ResponseBody       &#x2F;&#x2F;不走视图解析器，返回字符串\n    public String test() throws JsonProcessingException &#123;\n        User user &#x3D; new User(1,&quot;百度一下你就知道&quot;,12);\n\n        ObjectMapper mapper &#x3D; new ObjectMapper();\n        String s &#x3D; mapper.writeValueAsString(user);\n\n        return s;\n    &#125;\n\n    @RequestMapping(&quot;&#x2F;t2&quot;)\n    public String test2() throws JsonProcessingException &#123;\n        ObjectMapper mapper &#x3D; new ObjectMapper();\n\n        List&lt;User&gt; userList &#x3D; new ArrayList&lt;User&gt;();\n        userList.add(new User(1,&quot;a&quot;,18));\n        userList.add(new User(2,&quot;b&quot;,18));\n        userList.add(new User(3,&quot;c&quot;,18));\n        userList.add(new User(4,&quot;大大&quot;,18));\n\n        String s &#x3D; mapper.writeValueAsString(userList);\n\n        return s;\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<p>Jackson、FastJson</p>\n<h2 id=\"8、整合SSM框架\"><a href=\"#8、整合SSM框架\" class=\"headerlink\" title=\"8、整合SSM框架\"></a>8、整合SSM框架</h2><h3 id=\"环境要求：\"><a href=\"#环境要求：\" class=\"headerlink\" title=\"环境要求：\"></a><strong>环境要求</strong>：</h3><ul>\n<li>IDEA</li>\n<li>MySQL</li>\n<li>Tomcat8.5</li>\n<li>Maven3.6</li>\n</ul>\n<p>要求：</p>\n<ul>\n<li>熟练掌握MySQL数据库，Spring，JavaWeb及Mybatis知识</li>\n</ul>\n<h3 id=\"数据库环境\"><a href=\"#数据库环境\" class=\"headerlink\" title=\"数据库环境\"></a><strong>数据库环境</strong></h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE DATABASE &#96;ssmbuild&#96;;\n\nUSE &#96;ssmbuild&#96;;\n\nDROP TABLE IF EXISTS &#96;books&#96;;\n\nCREATE TABLE &#96;books&#96; (\n&#96;bookID&#96; INT(10) NOT NULL AUTO_INCREMENT COMMENT &#39;书id&#39;,\n&#96;bookName&#96; VARCHAR(100) NOT NULL COMMENT &#39;书名&#39;,\n&#96;bookCounts&#96; INT(11) NOT NULL COMMENT &#39;数量&#39;,\n&#96;detail&#96; VARCHAR(200) NOT NULL COMMENT &#39;描述&#39;,\nKEY &#96;bookID&#96; (&#96;bookID&#96;)\n) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8\n\nINSERT  INTO &#96;books&#96;(&#96;bookID&#96;,&#96;bookName&#96;,&#96;bookCounts&#96;,&#96;detail&#96;)VALUES\n(1,&#39;Java&#39;,1,&#39;从入门到放弃&#39;),\n(2,&#39;MySQL&#39;,10,&#39;从删库到跑路&#39;),\n(3,&#39;Linux&#39;,5,&#39;从进门到进牢&#39;);</code></pre>\n\n\n\n<h3 id=\"基本环境搭建\"><a href=\"#基本环境搭建\" class=\"headerlink\" title=\"基本环境搭建\"></a><strong>基本环境搭建</strong></h3><p>导入pom依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependencies&gt;\n   &lt;!--Junit--&gt;\n   &lt;dependency&gt;\n       &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;\n       &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;\n       &lt;version&gt;4.12&lt;&#x2F;version&gt;\n   &lt;&#x2F;dependency&gt;\n   &lt;!--数据库驱动--&gt;\n   &lt;dependency&gt;\n       &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n       &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n       &lt;version&gt;5.1.47&lt;&#x2F;version&gt;\n   &lt;&#x2F;dependency&gt;\n   &lt;!-- 数据库连接池 --&gt;\n   &lt;dependency&gt;\n       &lt;groupId&gt;com.mchange&lt;&#x2F;groupId&gt;\n       &lt;artifactId&gt;c3p0&lt;&#x2F;artifactId&gt;\n       &lt;version&gt;0.9.5.2&lt;&#x2F;version&gt;\n   &lt;&#x2F;dependency&gt;\n\n   &lt;!--Servlet - JSP --&gt;\n   &lt;dependency&gt;\n       &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;\n       &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;\n       &lt;version&gt;2.5&lt;&#x2F;version&gt;\n   &lt;&#x2F;dependency&gt;\n   &lt;dependency&gt;\n       &lt;groupId&gt;javax.servlet.jsp&lt;&#x2F;groupId&gt;\n       &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt;\n       &lt;version&gt;2.2&lt;&#x2F;version&gt;\n   &lt;&#x2F;dependency&gt;\n   &lt;dependency&gt;\n       &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;\n       &lt;artifactId&gt;jstl&lt;&#x2F;artifactId&gt;\n       &lt;version&gt;1.2&lt;&#x2F;version&gt;\n   &lt;&#x2F;dependency&gt;\n\n   &lt;!--Mybatis--&gt;\n   &lt;dependency&gt;\n       &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;\n       &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;\n       &lt;version&gt;3.5.2&lt;&#x2F;version&gt;\n   &lt;&#x2F;dependency&gt;\n   &lt;dependency&gt;\n       &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;\n       &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;\n       &lt;version&gt;2.0.2&lt;&#x2F;version&gt;\n   &lt;&#x2F;dependency&gt;\n\n   &lt;!--Spring--&gt;\n   &lt;dependency&gt;\n       &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n       &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;\n       &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;\n   &lt;&#x2F;dependency&gt;\n   &lt;dependency&gt;\n       &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n       &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;\n       &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;\n   &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<p>Maven资源过滤设置</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;build&gt;\n   &lt;resources&gt;\n       &lt;resource&gt;\n           &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;\n           &lt;includes&gt;\n               &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;\n               &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;\n           &lt;&#x2F;includes&gt;\n           &lt;filtering&gt;false&lt;&#x2F;filtering&gt;\n       &lt;&#x2F;resource&gt;\n       &lt;resource&gt;\n           &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n           &lt;includes&gt;\n               &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;\n               &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;\n           &lt;&#x2F;includes&gt;\n           &lt;filtering&gt;false&lt;&#x2F;filtering&gt;\n       &lt;&#x2F;resource&gt;\n   &lt;&#x2F;resources&gt;\n&lt;&#x2F;build&gt;</code></pre>\n\n<p>配置框架和基本结构</p>\n<ul>\n<li><p>my.pojo</p>\n</li>\n<li><p>my.dao</p>\n</li>\n<li><p>my.service</p>\n</li>\n<li><p>my.controller</p>\n</li>\n<li><p>mybatis-config.xml</p>\n</li>\n<li><p>applicationContext.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;\n\n    &lt;import resource&#x3D;&quot;classpath:spring-dao.xml&quot;&#x2F;&gt;\n    &lt;import resource&#x3D;&quot;classpath:spring-service.xml&quot;&#x2F;&gt;\n    &lt;import resource&#x3D;&quot;classpath:spring-mvc.xml&quot;&#x2F;&gt;\n\n&lt;&#x2F;beans&gt;</code></pre></li>\n</ul>\n<h3 id=\"MyBatis编写\"><a href=\"#MyBatis编写\" class=\"headerlink\" title=\"MyBatis编写\"></a>MyBatis编写</h3><ul>\n<li>编写Mybatis核心配置文件Mybatis-config.xml</li>\n</ul>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE configuration\n        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;\n        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;\n&lt;configuration&gt;\n\n    &lt;typeAliases&gt;\n        &lt;package name&#x3D;&quot;my.pojo&quot;&#x2F;&gt;\n    &lt;&#x2F;typeAliases&gt;\n\n    &lt;mappers&gt;\n        &lt;mapper class&#x3D;&quot;my.dao.BookMapper&quot;&#x2F;&gt;\n        &lt;mapper class&#x3D;&quot;my.dao.UserMapper&quot;&#x2F;&gt;\n    &lt;&#x2F;mappers&gt;\n&lt;&#x2F;configuration&gt;</code></pre>\n\n<ul>\n<li><p>创建POJO类</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.pojo;\n\npublic class Books &#123;\n    private int bookID;\n    private String bookName;\n    private int bookCounts;\n    private String detail;\n\t\n    &#x2F;&#x2F;有参，无参构造方法\n    &#x2F;&#x2F;get set方法\n    &#x2F;&#x2F; toString 方法\n&#125;\n</code></pre>\n</li>\n<li><p>编写Dao层Mapper接口</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.dao;\n\nimport my.pojo.Books;\n\nimport java.util.List;\n\npublic interface BookMapper &#123;\n    &#x2F;&#x2F;添加\n    int addBook(Books books);\n    &#x2F;&#x2F;删除\n    int deleteBook(int id);\n    &#x2F;&#x2F;更新\n    int updateBook(Books book);\n    &#x2F;&#x2F;查找单个\n    Books queryBookById(int id);\n    &#x2F;&#x2F;查找全部\n    List&lt;Books&gt; queryAllBook();\n    &#x2F;&#x2F;根据书籍名称查询\n    List&lt;Books&gt; queryBookByName(String queryBookByName);\n&#125;\n</code></pre>\n\n\n</li>\n<li><p>编写对应Mapper.xml文件。</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF8&quot; ?&gt;\n&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD mapper 3.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace&#x3D;&quot;my.dao.BookMapper&quot;&gt;\n    &lt;insert id&#x3D;&quot;addBook&quot; parameterType&#x3D;&quot;books&quot;&gt;\n        insert into &#96;books&#96; (bookName,&#96;bookCounts&#96;,&#96;detail&#96;) values (#&#123;bookName&#125;,#&#123;bookCounts&#125;,#&#123;detail&#125;);\n    &lt;&#x2F;insert&gt;\n\n    &lt;delete id&#x3D;&quot;deleteBook&quot; parameterType&#x3D;&quot;int&quot;&gt;\n        delete from &#96;books&#96; where &#96;bookID&#96;&#x3D;#&#123;id&#125;;\n    &lt;&#x2F;delete&gt;\n    \n    &lt;update id&#x3D;&quot;updateBook&quot; parameterType&#x3D;&quot;books&quot;&gt;\n        update &#96;books&#96; set bookName&#x3D;#&#123;bookName&#125;,bookCounts&#x3D;#&#123;bookCounts&#125;,detail&#x3D;#&#123;detail&#125;where bookID&#x3D;#&#123;bookID&#125; ;\n    &lt;&#x2F;update&gt;\n\n    &lt;select id&#x3D;&quot;queryBookById&quot; parameterType&#x3D;&quot;int&quot; resultType&#x3D;&quot;books&quot;&gt;\n        select * from &#96;books&#96; where &#96;bookID&#96;&#x3D;#&#123;id&#125;\n    &lt;&#x2F;select&gt;\n    \n    &lt;select id&#x3D;&quot;queryAllBook&quot; resultType&#x3D;&quot;books&quot;&gt;\n        select * from &#96;books&#96;\n    &lt;&#x2F;select&gt;\n\n    &lt;select id&#x3D;&quot;queryBookByName&quot; resultType&#x3D;&quot;books&quot;&gt;\n        select * from &#96;books&#96;\n        &lt;where&gt;\n            &lt;if test&#x3D;&quot;queryBookByName!&#x3D;null&quot;&gt;\n                bookName like #&#123;queryBookByName&#125;\n            &lt;&#x2F;if&gt;\n        &lt;&#x2F;where&gt;\n\n    &lt;&#x2F;select&gt;\n&lt;&#x2F;mapper&gt;</code></pre>\n\n\n</li>\n<li><p>编写Service层接口和实现类</p>\n</li>\n</ul>\n  <pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.service;\n\nimport my.pojo.Books;\n\nimport java.util.List;\n\npublic interface BookService &#123;\n    &#x2F;&#x2F;添加\n    int addBook(Books books);\n    &#x2F;&#x2F;删除\n    int deleteBook(int id);\n    &#x2F;&#x2F;更新\n    int updateBook(Books book);\n    &#x2F;&#x2F;查找单个\n    Books queryBookById(int id);\n    &#x2F;&#x2F;查找全部\n    List&lt;Books&gt; queryAllBook();\n\n    List&lt;Books&gt; queryBookByName(String queryBookByName);\n&#125;\n</code></pre>\n\n<p>  实现类</p>\n  <pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.service;\n\n        import my.dao.BookMapper;\n        import my.pojo.Books;\n\n        import java.util.List;\n\npublic class BookServiceImpl implements BookService &#123;\n\n    &#x2F;&#x2F;service调用Dao层\n    private BookMapper bookMapper;\n\n    public void setBookMapper(BookMapper bookMapper) &#123;\n        this.bookMapper &#x3D; bookMapper;\n    &#125;\n\n    public int addBook(Books books) &#123;\n        return bookMapper.addBook(books);\n    &#125;\n\n    public int deleteBook(int id) &#123;\n        return bookMapper.deleteBook(id);\n    &#125;\n\n    public int updateBook(Books book) &#123;\n        return bookMapper.updateBook(book);\n    &#125;\n\n    public Books queryBookById(int id) &#123;\n        return bookMapper.queryBookById(id);\n    &#125;\n\n    public List&lt;Books&gt; queryAllBook() &#123;\n        return bookMapper.queryAllBook();\n    &#125;\n\n    public List&lt;Books&gt; queryBookByName(String queryBookByName) &#123;\n        return bookMapper.queryBookByName(queryBookByName);\n    &#125;\n&#125;\n</code></pre>\n\n<h3 id=\"Spring层\"><a href=\"#Spring层\" class=\"headerlink\" title=\"Spring层\"></a>Spring层</h3><ol>\n<li><p>整合Spring-Mybatis，使用c3p0连接池</p>\n</li>\n<li><p>spring-dao.xml文件</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;\n\n\n    &lt;!--    DataSource：使用Spring的数据源替换Mybatis的位置 c3p0 dbcp druid\n        这里使用Spring 提供的JDBC org.springframework.jdbc.datasource.DriverManagerDataSource\n    --&gt;\n    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;\n        &lt;property name&#x3D;&quot;driverClass&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;jdbcUrl&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssmbuild?useSSL&#x3D;true&amp;useUncode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;user&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot;&#x2F;&gt;\n\n        &lt;!-- c3p0连接池的私有属性 --&gt;\n        &lt;property name&#x3D;&quot;maxPoolSize&quot; value&#x3D;&quot;30&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;minPoolSize&quot; value&#x3D;&quot;10&quot;&#x2F;&gt;\n        &lt;!-- 关闭连接后不自动commit --&gt;\n        &lt;property name&#x3D;&quot;autoCommitOnClose&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;\n        &lt;!-- 获取连接超时时间 --&gt;\n        &lt;property name&#x3D;&quot;checkoutTimeout&quot; value&#x3D;&quot;10000&quot;&#x2F;&gt;\n        &lt;!-- 当获取连接失败重试次数 --&gt;\n        &lt;property name&#x3D;&quot;acquireRetryAttempts&quot; value&#x3D;&quot;2&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\n    &lt;!--    sqlSessionFactory--&gt;\n    &lt;bean class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot; id&#x3D;&quot;sqlSessionFactory&quot;&gt;\n        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;\n        &lt;!--        绑定Mybatis 配置文件--&gt;\n        &lt;property name&#x3D;&quot;configLocation&quot; value&#x3D;&quot;classpath:mybatis-config.xml&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\n    &lt;!--    配置dao接口扫描包，动态的实现了Dao接口可以注入到Spring容器中--&gt;\n    &lt;bean class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;\n        &lt;!--        注入SqlSessionFactory--&gt;\n        &lt;property name&#x3D;&quot;sqlSessionFactoryBeanName&quot; value&#x3D;&quot;sqlSessionFactory&quot;&#x2F;&gt;\n        &lt;!--        要扫描的dao 包--&gt;\n        &lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;my.dao&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n&lt;&#x2F;beans&gt;</code></pre></li>\n</ol>\n<h3 id=\"Spring整合Service层\"><a href=\"#Spring整合Service层\" class=\"headerlink\" title=\"Spring整合Service层\"></a>Spring整合Service层</h3><pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;\n\n    &lt;context:component-scan base-package&#x3D;&quot;my.service&quot;&#x2F;&gt;\n\n    &lt;!--将所有业务类，注入到Spring--&gt;\n    &lt;bean id&#x3D;&quot;BookServiceImpl&quot; class&#x3D;&quot;my.service.BookServiceImpl&quot;&gt;\n        &lt;property name&#x3D;&quot;bookMapper&quot; ref&#x3D;&quot;bookMapper&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n    &lt;bean id&#x3D;&quot;UserServiceImpl&quot; class&#x3D;&quot;my.service.UserServiceImpl&quot;&gt;\n        &lt;property name&#x3D;&quot;userMapper&quot; ref&#x3D;&quot;userMapper&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\n    &lt;!--    声明式事务配置--&gt;\n    &lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;\n        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\n    &lt;!--    aop事务支持--&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n\n\n<h3 id=\"SpringMVC层\"><a href=\"#SpringMVC层\" class=\"headerlink\" title=\"SpringMVC层\"></a>SpringMVC层</h3><ul>\n<li>web.xml</li>\n</ul>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;\n         version&#x3D;&quot;4.0&quot;&gt;\n\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;\n\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;\n            &lt;!-- 注意此处的配置文件为总的配置文件，否则找不到相关的包--&gt;\n            &lt;param-value&gt;classpath:applicationContext.xml&lt;&#x2F;param-value&gt;\n        &lt;&#x2F;init-param&gt;\n\n        &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;\n    &lt;&#x2F;servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;\n        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;\n    &lt;&#x2F;servlet-mapping&gt;\n\n    &lt;filter&gt;\n        &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;\n        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;\n            &lt;param-value&gt;utf-8&lt;&#x2F;param-value&gt;\n        &lt;&#x2F;init-param&gt;\n    &lt;&#x2F;filter&gt;\n    &lt;filter-mapping&gt;\n        &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;\n        &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;\n    &lt;&#x2F;filter-mapping&gt;\n\n\n&lt;&#x2F;web-app&gt;</code></pre>\n\n<ul>\n<li><p>Spring-mvc.xml</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;\n       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\n       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context\n       https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd\n       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc\n       https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd&quot;&gt;\n\n&lt;!--    注解驱动--&gt;\n    &lt;mvc:annotation-driven&#x2F;&gt;\n&lt;!--    静态资源过滤--&gt;\n    &lt;mvc:default-servlet-handler&#x2F;&gt;\n&lt;!--    扫描包--&gt;\n    &lt;context:component-scan base-package&#x3D;&quot;my.controller&quot;&#x2F;&gt;\n\n&lt;!--    视图解析器--&gt;\n    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; id&#x3D;&quot;internalResourceViewResolver&quot;&gt;\n        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\n\n&lt;&#x2F;beans&gt;</code></pre>\n\n\n</li>\n<li><p>在applicationContext.xml中整合spring需要的配置文件</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;\n\n    &lt;import resource&#x3D;&quot;classpath:spring-dao.xml&quot;&#x2F;&gt;\n    &lt;import resource&#x3D;&quot;classpath:spring-service.xml&quot;&#x2F;&gt;\n    &lt;import resource&#x3D;&quot;classpath:spring-mvc.xml&quot;&#x2F;&gt;\n\n&lt;&#x2F;beans&gt;</code></pre></li>\n</ul>\n<h3 id=\"Controller和视图层编写\"><a href=\"#Controller和视图层编写\" class=\"headerlink\" title=\"Controller和视图层编写\"></a>Controller和视图层编写</h3><ol>\n<li><p>BookController类编写：查询书籍</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Controller\n@RequestMapping(&quot;&#x2F;book&quot;)\npublic class BookController &#123;\n\n    @Autowired\n    @Qualifier(&quot;BookServiceImpl&quot;)\n    private BookService bookService;\n\n    &#x2F;&#x2F;查询全部书籍\n    @RequestMapping(&quot;&#x2F;allBook&quot;)\n    public String queryAllBook(Model model) &#123;\n        List&lt;Books&gt; books &#x3D; bookService.queryAllBook();\n        model.addAttribute(&quot;books&quot;, books);\n        return &quot;allBook&quot;;\n    &#125;\n&#125;</code></pre>\n\n\n</li>\n<li><p>编写index.jsp页面</p>\n<pre class=\"line-numbers language-JSP\" data-language=\"JSP\"><code class=\"language-JSP\">&lt;%--\n  Created by IntelliJ IDEA.\n  User: Xoc001\n  Date: 2021&#x2F;8&#x2F;21\n  Time: 16:01\n  To change this template use File | Settings | File Templates.\n--%&gt;\n&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;$Title$&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      a&#123;\n        text-decoration: none;\n        color: black;\n        font-size: 18px;\n      &#125;\n      h3&#123;\n        width: 180px;\n        height: 30px;\n        margin: 100px auto;\n        text-align: center;\n        line-height: 38px;\n        background: deepskyblue;\n        border-radius: 5px;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n  &lt;h3&gt;\n    &lt;a href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;allBook&quot;&gt;进入书籍页面&lt;&#x2F;a&gt;\n  &lt;&#x2F;h3&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n\n</li>\n<li><p>书籍列表页面 allBook.jsp</p>\n<pre class=\"line-numbers language-jsp\" data-language=\"jsp\"><code class=\"language-jsp\">&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;\n&lt;%--\n  Created by IntelliJ IDEA.\n  User: Xoc001\n  Date: 2021&#x2F;8&#x2F;21\n  Time: 16:15\n  To change this template use File | Settings | File Templates.\n--%&gt;\n&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;书籍展示&lt;&#x2F;title&gt;\n    &lt;!-- 引入 Bootstrap --&gt;\n    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\n&lt;div class&#x3D;&quot;container&quot;&gt;\n    &lt;div class&#x3D;&quot;row clearfix&quot;&gt;\n        &lt;div class&#x3D;&quot;color-md-12 column&quot;&gt;\n            &lt;div class&#x3D;&quot;page-header&quot;&gt;\n                &lt;h1&gt;\n                    &lt;small&gt;书籍列表—————— 显示所有书籍&lt;&#x2F;small&gt;\n                &lt;&#x2F;h1&gt;\n            &lt;&#x2F;div&gt;\n        &lt;&#x2F;div&gt;\n        &lt;div class&#x3D;&quot;row&quot;&gt;\n            &lt;div class&#x3D;&quot;col-md-4 column&quot;&gt;\n                &lt;a class&#x3D;&quot;btn btn-primary&quot; href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;toAddBook&quot;&gt;新增书籍&lt;&#x2F;a&gt;\n            &lt;&#x2F;div&gt;\n\n            &lt;div class&#x3D;&quot;col-md-4 column&quot; style&#x3D;&quot;float: right&quot;&gt;\n                &lt;form action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;queryByName&quot; method&#x3D;&quot;post&quot;&gt;\n                    &lt;div class&#x3D;&quot;form-inline&quot;&gt;\n                        &lt;span style&#x3D;&quot;color: red&quot;&gt;$&#123;error&#125;&lt;&#x2F;span&gt;\n                        &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; name&#x3D;&quot;queryBookByName&quot; placeholder&#x3D;&quot;查询的书籍的名称&quot;&gt;\n                        &lt;input class&#x3D;&quot;btn btn-primary&quot; type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n                    &lt;&#x2F;div&gt;\n                &lt;&#x2F;form&gt;\n            &lt;&#x2F;div&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n\n    &lt;div class&#x3D;&quot;row clearfix&quot;&gt;\n        &lt;div class&#x3D;&quot;col-md-12 column&quot;&gt;\n            &lt;table class&#x3D;&quot;table table-hover table-striped&quot;&gt;\n                &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;书籍编号&lt;&#x2F;th&gt;\n                    &lt;th&gt;书籍名称&lt;&#x2F;th&gt;\n                    &lt;th&gt;书籍数量&lt;&#x2F;th&gt;\n                    &lt;th&gt;书籍详情&lt;&#x2F;th&gt;\n                    &lt;th&gt;操作&lt;&#x2F;th&gt;\n                &lt;&#x2F;tr&gt;\n                &lt;&#x2F;thead&gt;\n                &lt;%--                书籍从数据库查询出来，从list中遍历出来--%&gt;\n                &lt;tbody&gt;\n                    &lt;c:forEach var&#x3D;&quot;book&quot; items&#x3D;&quot;$&#123;books&#125;&quot;&gt;\n                        &lt;tr&gt;\n                            &lt;td&gt;$&#123;book.bookID&#125;&lt;&#x2F;td&gt;\n                            &lt;td&gt;$&#123;book.bookName&#125;&lt;&#x2F;td&gt;\n                            &lt;td&gt;$&#123;book.bookCounts&#125;&lt;&#x2F;td&gt;\n                            &lt;td&gt;$&#123;book.detail&#125;&lt;&#x2F;td&gt;\n                            &lt;td&gt;\n                                &lt;a href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;toUpdateBook&#x2F;$&#123;book.bookID&#125;&quot;&gt;修改&lt;&#x2F;a&gt;\n                                &amp;nbsp;|&amp;nbsp;\n                                &lt;a href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;deleteBook&#x2F;$&#123;book.bookID&#125;&quot;&gt;删除&lt;&#x2F;a&gt;\n                            &lt;&#x2F;td&gt;\n                        &lt;&#x2F;tr&gt;\n                    &lt;&#x2F;c:forEach&gt;\n                &lt;&#x2F;tbody&gt;\n            &lt;&#x2F;table&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n\n&lt;&#x2F;div&gt;\n\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n\n</li>\n<li><p>BookController类编写，添加书籍</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\n@RequestMapping(&quot;&#x2F;book&quot;)\npublic class BookController &#123;\n\n    @Autowired\n    @Qualifier(&quot;BookServiceImpl&quot;)\n    private BookService bookService;\n\n    &#x2F;&#x2F;查询全部书籍\n    @RequestMapping(&quot;&#x2F;allBook&quot;)\n    public String queryAllBook(Model model) &#123;\n        List&lt;Books&gt; books &#x3D; bookService.queryAllBook();\n        model.addAttribute(&quot;books&quot;, books);\n        return &quot;allBook&quot;;\n    &#125;\n\n    &#x2F;&#x2F;跳转到增加书籍页面\n    @RequestMapping(&quot;&#x2F;toAddBook&quot;)\n    public String toAddPage() &#123;\n        return &quot;addBook&quot;;\n    &#125;\n\n    &#x2F;&#x2F;添加数据请求\n    @RequestMapping(&quot;&#x2F;addBook&quot;)\n    public String addBook(Model model, Books books) &#123;\n        bookService.addBook(books);\n        return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>添加书籍页面 addBook.jsp</p>\n<pre class=\"line-numbers language-JSP\" data-language=\"JSP\"><code class=\"language-JSP\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;div class&#x3D;&quot;container&quot;&gt;\n    &lt;div class&#x3D;&quot;row clearfix&quot;&gt;\n        &lt;div class&#x3D;&quot;color-md-12 column&quot;&gt;\n            &lt;div class&#x3D;&quot;page-header&quot;&gt;\n                &lt;h1&gt;\n                    &lt;small&gt;书籍列表—————— 新增书籍&lt;&#x2F;small&gt;\n                &lt;&#x2F;h1&gt;\n            &lt;&#x2F;div&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n\n    &lt;form action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;addBook&quot; method&#x3D;&quot;post&quot;&gt;\n        &lt;div class&#x3D;&quot;form-group&quot;&gt;\n            &lt;label&gt;书籍名称&lt;&#x2F;label&gt;\n            &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; name&#x3D;&quot;bookName&quot; required&gt;\n        &lt;&#x2F;div&gt;\n\n        &lt;div class&#x3D;&quot;form-group&quot;&gt;\n            &lt;label&gt;书籍数量&lt;&#x2F;label&gt;\n            &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; name&#x3D;&quot;bookCounts&quot; required&gt;\n        &lt;&#x2F;div&gt;\n        &lt;div class&#x3D;&quot;form-group&quot;&gt;\n            &lt;label&gt;书籍描述&lt;&#x2F;label&gt;\n            &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; name&#x3D;&quot;detail&quot; required&gt;\n        &lt;&#x2F;div&gt;\n        &lt;div class&#x3D;&quot;form-group&quot;&gt;\n            &lt;input type&#x3D;&quot;submit&quot; class&#x3D;&quot;form-control&quot; value&#x3D;&quot;添加&quot;&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;form&gt;\n\n&lt;&#x2F;div&gt;\n\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n\n</li>\n<li><p>BookController 类编写，修改书籍</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@Controller\n@RequestMapping(&quot;&#x2F;book&quot;)\npublic class BookController &#123;\n\n    @Autowired\n    @Qualifier(&quot;BookServiceImpl&quot;)\n    private BookService bookService;\n\n    &#x2F;&#x2F;查询全部书籍\n    @RequestMapping(&quot;&#x2F;allBook&quot;)\n    public String queryAllBook(Model model) &#123;\n        List&lt;Books&gt; books &#x3D; bookService.queryAllBook();\n        model.addAttribute(&quot;books&quot;, books);\n        return &quot;allBook&quot;;\n    &#125;\n\n    &#x2F;&#x2F;跳转到增加书籍页面\n    @RequestMapping(&quot;&#x2F;toAddBook&quot;)\n    public String toAddPage() &#123;\n        return &quot;addBook&quot;;\n    &#125;\n\n    &#x2F;&#x2F;添加数据请求\n    @RequestMapping(&quot;&#x2F;addBook&quot;)\n    public String addBook(Model model, Books books) &#123;\n        bookService.addBook(books);\n        return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;\n    &#125;\n\n    &#x2F;&#x2F;跳转修改书籍页面\n    @RequestMapping(&quot;&#x2F;toUpdateBook&#x2F;&#123;bookID&#125;&quot;)\n    public String toUpdateBook(@PathVariable(&quot;bookID&quot;) int id, Model model) &#123;\n\n        Books books &#x3D; bookService.queryBookById(id);\n        model.addAttribute(&quot;books&quot;, books);\n        return &quot;updateBook&quot;;\n    &#125;\n\n    &#x2F;&#x2F;修改数据请求\n    @RequestMapping(&quot;&#x2F;updateBook&quot;)\n    public String updateBook(Books books) &#123;\n        System.out.println(&quot;updateBook&#x3D;&gt;&quot; + books);\n        bookService.updateBook(books);\n\n        return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;\n    &#125;\n&#125;</code></pre>\n\n\n</li>\n<li><p>添加修改界面 updateBook.jsp</p>\n<pre class=\"line-numbers language-JSP\" data-language=\"JSP\"><code class=\"language-JSP\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;div class&#x3D;&quot;container&quot;&gt;\n    &lt;div class&#x3D;&quot;row clearfix&quot;&gt;\n        &lt;div class&#x3D;&quot;color-md-12 column&quot;&gt;\n            &lt;div class&#x3D;&quot;page-header&quot;&gt;\n                &lt;h1&gt;\n                    &lt;small&gt;书籍列表—————— 修改书籍&lt;&#x2F;small&gt;\n                &lt;&#x2F;h1&gt;\n            &lt;&#x2F;div&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n\n    &lt;form action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;updateBook&quot; method&#x3D;&quot;post&quot;&gt;\n\n&lt;%--        隐藏域--%&gt;\n        &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;bookID&quot; value&#x3D;&quot;$&#123;books.bookID&#125;&quot;&gt;\n        &lt;div class&#x3D;&quot;form-group&quot;&gt;\n            &lt;label&gt;书籍名称&lt;&#x2F;label&gt;\n            &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; name&#x3D;&quot;bookName&quot; value&#x3D;&quot;$&#123;books.bookName&#125;&quot; required&gt;\n        &lt;&#x2F;div&gt;\n\n        &lt;div class&#x3D;&quot;form-group&quot;&gt;\n            &lt;label&gt;书籍数量&lt;&#x2F;label&gt;\n            &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; name&#x3D;&quot;bookCounts&quot; value&#x3D;&quot;$&#123;books.bookCounts&#125;&quot; required&gt;\n        &lt;&#x2F;div&gt;\n        &lt;div class&#x3D;&quot;form-group&quot;&gt;\n            &lt;label&gt;书籍描述&lt;&#x2F;label&gt;\n            &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; name&#x3D;&quot;detail&quot; value&#x3D;&quot;$&#123;books.detail&#125;&quot; required&gt;\n        &lt;&#x2F;div&gt;\n        &lt;div class&#x3D;&quot;form-group&quot;&gt;\n            &lt;input type&#x3D;&quot;submit&quot; class&#x3D;&quot;form-control&quot; value&#x3D;&quot;修改&quot;&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;form&gt;\n\n&lt;&#x2F;div&gt;\n\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n\n</li>\n<li><p>BookController 类编写，查询书籍</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.controller;\n\nimport my.pojo.Books;\nimport my.service.BookService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport java.util.List;\n\n@Controller\n@RequestMapping(&quot;&#x2F;book&quot;)\npublic class BookController &#123;\n\n    @Autowired\n    @Qualifier(&quot;BookServiceImpl&quot;)\n    private BookService bookService;\n\n    &#x2F;&#x2F;查询全部书籍\n    @RequestMapping(&quot;&#x2F;allBook&quot;)\n    public String queryAllBook(Model model) &#123;\n        List&lt;Books&gt; books &#x3D; bookService.queryAllBook();\n        model.addAttribute(&quot;books&quot;, books);\n        return &quot;allBook&quot;;\n    &#125;\n\n    &#x2F;&#x2F;跳转到增加书籍页面\n    @RequestMapping(&quot;&#x2F;toAddBook&quot;)\n    public String toAddPage() &#123;\n        return &quot;addBook&quot;;\n    &#125;\n\n    &#x2F;&#x2F;添加数据请求\n    @RequestMapping(&quot;&#x2F;addBook&quot;)\n    public String addBook(Model model, Books books) &#123;\n        bookService.addBook(books);\n        return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;\n    &#125;\n\n    &#x2F;&#x2F;跳转修改书籍页面\n    @RequestMapping(&quot;&#x2F;toUpdateBook&#x2F;&#123;bookID&#125;&quot;)\n    public String toUpdateBook(@PathVariable(&quot;bookID&quot;) int id, Model model) &#123;\n\n        Books books &#x3D; bookService.queryBookById(id);\n        model.addAttribute(&quot;books&quot;, books);\n        return &quot;updateBook&quot;;\n    &#125;\n\n    &#x2F;&#x2F;修改数据请求\n    @RequestMapping(&quot;&#x2F;updateBook&quot;)\n    public String updateBook(Books books) &#123;\n        System.out.println(&quot;updateBook&#x3D;&gt;&quot; + books);\n        bookService.updateBook(books);\n\n        return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;\n    &#125;\n\n    &#x2F;&#x2F;删除数据\n    @RequestMapping(&quot;&#x2F;deleteBook&#x2F;&#123;bookID&#125;&quot;)\n    public String deleteBook(@PathVariable(&quot;bookID&quot;) int id) &#123;\n\n        bookService.deleteBook(id);\n        return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;\n    &#125;\n\n    &#x2F;&#x2F;搜索书籍数据\n    @RequestMapping(&quot;&#x2F;queryByName&quot;)\n    public String queryBookByName(String queryBookByName,Model model)&#123;\n        List&lt;Books&gt; booksList &#x3D; bookService.queryBookByName(&quot;%&quot;+queryBookByName+&quot;%&quot;);\n\n        if(!(booksList.size()&gt;0))&#123;\n            model.addAttribute(&quot;error&quot;,&quot;未找到该书籍&quot;);\n        &#125;\n        model.addAttribute(&quot;books&quot;,booksList);\n        return &quot;allBook&quot;;\n    &#125;\n&#125;\n</code></pre>\n\n\n</li>\n<li><p>配置查询书籍的底层实现源码</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;select id&#x3D;&quot;queryBookByName&quot; resultType&#x3D;&quot;books&quot;&gt;\n    select * from &#96;books&#96;\n    &lt;where&gt;\n        &lt;if test&#x3D;&quot;queryBookByName!&#x3D;null&quot;&gt;\n            bookName like #&#123;queryBookByName&#125;\n        &lt;&#x2F;if&gt;\n    &lt;&#x2F;where&gt;\n&lt;&#x2F;select&gt;</code></pre>\n\n\n</li>\n<li><p>出现问题的排错思路</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">排错思路\n1. 查看这个bean注入是否成功\n2.Junit单元测试,看底层代码是否能查询出结果\n3.SpringMVC，整合的时候没调用Service层的bean\n\t1.applicationContext.xml没有注入bean\n\t2.web.xml中，我们也绑过配置文件，发现问题我们配置的是Spring-mvc.xml 并没有service bean，所以找不到</code></pre>\n\n<h2 id=\"9、AJAX\"><a href=\"#9、AJAX\" class=\"headerlink\" title=\"9、AJAX\"></a>9、AJAX</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><ul>\n<li><p><strong>AJAX &#x3D; Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p>\n</li>\n<li><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p>\n</li>\n<li><p><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p>\n</li>\n<li><p>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</p>\n</li>\n<li><p>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p>\n</li>\n<li><p>就和国内百度的搜索框一样!</p>\n</li>\n<li><p>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</p>\n</li>\n<li><p>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</p>\n</li>\n<li><p>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p>\n</li>\n</ul>\n<p><strong>利用AJAX可以做：</strong></p>\n<ul>\n<li>注册时，输入用户名自动检测用户是否已经存在。</li>\n<li>登陆时，提示用户名密码错误</li>\n<li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li>\n<li>….等等</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">jQuery.ajax(...)\n      部分参数：\n            url：请求地址\n            type：请求方式，GET、POST（1.9.0之后用method）\n        headers：请求头\n            data：要发送的数据\n    contentType：即将发送信息至服务器的内容编码类型(默认: &quot;application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8&quot;)\n          async：是否异步\n        timeout：设置请求超时时间（毫秒）\n      beforeSend：发送请求前执行的函数(全局)\n        complete：完成之后执行的回调函数(全局)\n        success：成功之后执行的回调函数(全局)\n          error：失败之后执行的回调函数(全局)\n        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型\n        dataType：将服务器端返回的数据转换成指定类型\n          &quot;xml&quot;: 将服务器端返回的内容转换成xml格式\n          &quot;text&quot;: 将服务器端返回的内容转换成普通文本格式\n          &quot;html&quot;: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。\n        &quot;script&quot;: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式\n          &quot;json&quot;: 将服务器端返回的内容转换成相应的JavaScript对象\n        &quot;jsonp&quot;: JSONP 格式使用 JSONP 形式调用函数时，如 &quot;myurl?callback&#x3D;?&quot; jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</code></pre>\n\n\n\n<p>导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.1.1.min.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.1.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</code></pre>\n\n\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>web.xml</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;\n         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;\n         version&#x3D;&quot;4.0&quot;&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;\n            &lt;param-value&gt;classpath:applicationContext.xml&lt;&#x2F;param-value&gt;\n        &lt;&#x2F;init-param&gt;\n        &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;\n    &lt;&#x2F;servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;\n        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;\n    &lt;&#x2F;servlet-mapping&gt;\n\n    &lt;filter&gt;\n        &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;\n        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;\n            &lt;param-value&gt;utf-8&lt;&#x2F;param-value&gt;\n        &lt;&#x2F;init-param&gt;\n    &lt;&#x2F;filter&gt;\n\n    &lt;filter-mapping&gt;\n        &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;\n        &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;\n    &lt;&#x2F;filter-mapping&gt;\n&lt;&#x2F;web-app&gt;</code></pre>\n\n\n\n\n\n<p>applicationContext.xml</p>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;\n       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\n       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context\n       https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd\n       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc\n       https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd&quot;&gt;\n\n    &lt;context:component-scan base-package&#x3D;&quot;my&quot;&#x2F;&gt;\n    &lt;!-- 静态资源过滤--&gt;\n    &lt;mvc:default-servlet-handler&#x2F;&gt;\n\n\n    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; id&#x3D;&quot;internalResourceViewResolver&quot;&gt;\n        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\t&lt;!-- 解决乱码--&gt;\n    &lt;mvc:annotation-driven&gt;\n        &lt;mvc:message-converters register-defaults&#x3D;&quot;true&quot;&gt;\n            &lt;bean class&#x3D;&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;\n                &lt;constructor-arg value&#x3D;&quot;UTF-8&quot;&#x2F;&gt;\n            &lt;&#x2F;bean&gt;\n            &lt;bean class&#x3D;&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;\n                &lt;property name&#x3D;&quot;objectMapper&quot;&gt;\n                    &lt;bean class&#x3D;&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;&gt;\n                        &lt;property name&#x3D;&quot;failOnEmptyBeans&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;\n                    &lt;&#x2F;bean&gt;\n                &lt;&#x2F;property&gt;\n            &lt;&#x2F;bean&gt;\n        &lt;&#x2F;mvc:message-converters&gt;\n    &lt;&#x2F;mvc:annotation-driven&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n\n\n\n\n\n\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><h4 id=\"1-登录界面的异步交互\"><a href=\"#1-登录界面的异步交互\" class=\"headerlink\" title=\"1.登录界面的异步交互\"></a>1.登录界面的异步交互</h4><h5 id=\"后端实现\"><a href=\"#后端实现\" class=\"headerlink\" title=\"后端实现\"></a>后端实现</h5><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@RequestMapping(&quot;&#x2F;a3&quot;)\n   public String ajax3(String name, String pwd) &#123;\n       String msg &#x3D; &quot;&quot;;\n\n       if (name !&#x3D; null) &#123;\n           if (&quot;admin&quot;.equals(name)) &#123;\n               msg &#x3D; &quot;OK&quot;;\n           &#125; else &#123;\n               msg &#x3D; &quot;账号有误&quot;;\n           &#125;\n       &#125;\n       if (pwd !&#x3D; null) &#123;\n           if (&quot;123456&quot;.equals(pwd)) &#123;\n               msg &#x3D; &quot;OK&quot;;\n           &#125; else &#123;\n               msg &#x3D; &quot;密码有误&quot;;\n           &#125;\n       &#125;\n       return msg;\n   &#125;</code></pre>\n\n\n\n<h5 id=\"前端界面实现-login-jsp\"><a href=\"#前端界面实现-login-jsp\" class=\"headerlink\" title=\"前端界面实现 login.jsp\"></a>前端界面实现 login.jsp</h5><pre class=\"line-numbers language-JSP\" data-language=\"JSP\"><code class=\"language-JSP\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.3.1.min.js&quot;&gt;&lt;&#x2F;script&gt;\n\n    &lt;script&gt;\n        function a1() &#123;\n            $.post(&#123;\n                url: &quot;$&#123;pageContext.request.contextPath&#125;&#x2F;a3&quot;,\n                data: &#123;&quot;name&quot;: $(&quot;#name&quot;).val()&#125;,\n                success: function (data) &#123;\n                    if (data.toString() &#x3D;&#x3D;&#x3D; &quot;OK&quot;) &#123;\n                        $(&quot;#namemsg&quot;).css(&quot;color&quot;, &quot;green&quot;);\n                    &#125;else&#123;\n                        $(&quot;#namemsg&quot;).css(&quot;color&quot;, &quot;red&quot;);\n                    &#125;\n                    $(&quot;#namemsg&quot;).html(data);\n                &#125;\n            &#125;)\n        &#125;\n\n        function a2() &#123;\n            $.post(&#123;\n                url: &quot;$&#123;pageContext.request.contextPath&#125;&#x2F;a3&quot;,\n                data: &#123;&quot;pwd&quot;: $(&quot;#pwd&quot;).val()&#125;,\n                success: function (data) &#123;\n                    if (data.toString() &#x3D;&#x3D;&#x3D; &quot;OK&quot;) &#123;\n                        $(&quot;#pwdmsg&quot;).css(&quot;color&quot;, &quot;green&quot;);\n                    &#125; else &#123;\n                        $(&quot;#pwdmsg&quot;).css(&quot;color&quot;, &quot;red&quot;);\n                    &#125;\n                    $(&quot;#pwdmsg&quot;).html(data);\n                &#125;\n            &#125;)\n        &#125;\n    &lt;&#x2F;script&gt;\n\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\n&lt;div&gt;\n    用户名：\n    &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;name&quot; onblur&#x3D;&quot;a1()&quot;&gt;\n    &lt;span id&#x3D;&quot;namemsg&quot;&gt;&lt;&#x2F;span&gt;\n&lt;&#x2F;div&gt;\n&lt;div&gt;\n    密码：\n    &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;pwd&quot; onblur&#x3D;&quot;a2()&quot;&gt;\n    &lt;span id&#x3D;&quot;pwdmsg&quot; &gt;&lt;&#x2F;span&gt;\n&lt;&#x2F;div&gt;\n\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n<h5 id=\"显示效果\"><a href=\"#显示效果\" class=\"headerlink\" title=\"显示效果\"></a>显示效果</h5><p><img src=\"/SpringMVC.assets/image-20210823163437119.png\" alt=\"image-20210823163437119\"></p>\n<h4 id=\"2-Spring-MVC实现\"><a href=\"#2-Spring-MVC实现\" class=\"headerlink\" title=\"2.Spring MVC实现\"></a>2.Spring MVC实现</h4><h5 id=\"实现类\"><a href=\"#实现类\" class=\"headerlink\" title=\"实现类\"></a>实现类</h5><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.pojo;\n\npublic class User &#123;\n    private int id;\n    private String name;\n    private int age;\n\n&#x2F;&#x2F;构造方法\n&#x2F;&#x2F;Get Set方法\n&#x2F;&#x2F;toString方法\n&#125;\n</code></pre>\n\n<h5 id=\"后台实现\"><a href=\"#后台实现\" class=\"headerlink\" title=\"后台实现\"></a>后台实现</h5><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">@RequestMapping(&quot;&#x2F;a2&quot;)\npublic List&lt;User&gt; ajax2() &#123;\n    List&lt;User&gt; userList &#x3D; new ArrayList&lt;User&gt;();\n\n    userList.add(new User(1, &quot;奥迪罚&quot;, 18));\n    userList.add(new User(2, &quot;啊方法&quot;, 19));\n    userList.add(new User(3, &quot;昂发&quot;, 20));\n\n    return userList;\n&#125;</code></pre>\n\n<h5 id=\"界面实现\"><a href=\"#界面实现\" class=\"headerlink\" title=\"界面实现\"></a>界面实现</h5><pre class=\"line-numbers language-JSP\" data-language=\"JSP\"><code class=\"language-JSP\">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt; &lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.3.1.min.js&quot;&gt;&lt;&#x2F;script&gt;\n\n    &lt;script&gt;\n        $(function () &#123;\n            $(&quot;#btn&quot;).click(function () &#123;\n                $.post(&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;a2&quot;,function (data) &#123;\n                    var html&#x3D;&quot;&quot;;\n                    for(var i&#x3D;0;i&lt;data.length;i++)&#123;\n                        html+&#x3D;&quot;&lt;tr&gt;&quot;\n                            +&quot;&lt;td&gt;&quot;+data[i].id+&quot;&lt;&#x2F;td&gt;&quot;+\n                            &quot;&lt;td&gt;&quot;+data[i].name+&quot;&lt;&#x2F;td&gt;&quot;+\n                            &quot;&lt;td&gt;&quot;+data[i].age+&quot;&lt;&#x2F;td&gt;&quot;+\n                            &quot;&lt;&#x2F;tr&gt;&quot;\n                    &#125;;\n                    $(&quot;#button&quot;).html(html);\n                &#125;);\n            &#125;)\n        &#125;);\n\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n\n&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;加载数据&quot; id&#x3D;&quot;btn&quot;&gt;&lt;br&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;ID&lt;&#x2F;tr&gt;\n        &lt;tr&gt;Name&lt;&#x2F;tr&gt;\n        &lt;tr&gt;Age&lt;&#x2F;tr&gt;\n    &lt;&#x2F;thead&gt;\n    &lt;tbody id&#x3D;&quot;button&quot;&gt;\n\n    &lt;&#x2F;tbody&gt;\n&lt;&#x2F;table&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n\n\n\n\n<h2 id=\"10、拦截器\"><a href=\"#10、拦截器\" class=\"headerlink\" title=\"10、拦截器\"></a>10、拦截器</h2><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p>\n<p>过滤器与拦截器的区别：拦截器是AOP思想的具体应用。</p>\n<p>过滤器：</p>\n<ul>\n<li>servlet规范中的一部分，任何java web工程中都可以使用。</li>\n<li>在url-partten中配置了&#x2F;*之后，可以对所有要访问的资源进行拦截。</li>\n</ul>\n<p>拦截器：</p>\n<ul>\n<li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li>\n<li>拦截器只会拦截访问控制器的方法，如果访问的是静态资源，不会拦截。</li>\n</ul>\n<h3 id=\"自定义拦截器\"><a href=\"#自定义拦截器\" class=\"headerlink\" title=\"自定义拦截器\"></a>自定义拦截器</h3><ul>\n<li>实现自定义拦截器必须实现HandlerInterceptor接口</li>\n</ul>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my.interceptor;\n\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class MyInterceptor implements HandlerInterceptor &#123;\n\n   &#x2F;&#x2F;在请求处理的方法之前执行\n   &#x2F;&#x2F;如果返回true执行下一个拦截器\n   &#x2F;&#x2F;如果返回false就不执行下一个拦截器\n   public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception &#123;\n       System.out.println(&quot;------------处理前------------&quot;);\n       return true;\n  &#125;\n\n   &#x2F;&#x2F;在请求处理方法执行之后执行\n   public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception &#123;\n       System.out.println(&quot;------------处理后------------&quot;);\n  &#125;\n\n   &#x2F;&#x2F;在dispatcherServlet处理后执行,做清理工作.\n   public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception &#123;\n       System.out.println(&quot;------------清理------------&quot;);\n  &#125;\n&#125;</code></pre>\n\n<ul>\n<li>在SpringMVC的配置文件中配置拦截器</li>\n</ul>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--关于拦截器的配置--&gt;\n&lt;mvc:interceptors&gt;\n   &lt;mvc:interceptor&gt;\n       &lt;!--&#x2F;** 包括路径及其子路径--&gt;\n       &lt;!--&#x2F;admin&#x2F;* 拦截的是&#x2F;admin&#x2F;add等等这种 , &#x2F;admin&#x2F;add&#x2F;user不会被拦截--&gt;\n       &lt;!--&#x2F;admin&#x2F;** 拦截的是&#x2F;admin&#x2F;下的所有--&gt;\n       &lt;mvc:mapping path&#x3D;&quot;&#x2F;**&quot;&#x2F;&gt;\n       &lt;!--bean配置的就是拦截器--&gt;\n       &lt;bean class&#x3D;&quot;com.my.interceptor.MyInterceptor&quot;&#x2F;&gt;\n   &lt;&#x2F;mvc:interceptor&gt;\n&lt;&#x2F;mvc:interceptors&gt;</code></pre>\n\n\n\n\n\n<p>2021年8月24日</p>\n","feature":true,"text":"SpringMVC2021年8月15日 ssm:mybatis+Spring + SpringMVC MVC三层架构 1、MVC1.1、什么是MVC MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。 是将业务逻辑、数据、显示...","link":"","photos":[],"count_time":{"symbolsCount":"74k","symbolsTime":"1:07"},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SpringMVC\"><span class=\"toc-text\">SpringMVC</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81MVC\"><span class=\"toc-text\">1、MVC</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFMVC\"><span class=\"toc-text\">1.1、什么是MVC</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFSpringMVC\"><span class=\"toc-text\">1.2、什么是SpringMVC</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3%E3%80%81%E4%B8%AD%E5%BF%83%E6%8E%A7%E5%88%B6%E5%99%A8\"><span class=\"toc-text\">1.3、中心控制器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AASpringMVC%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">2、第一个SpringMVC程序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E7%89%88%E5%88%9B%E5%BB%BASpringMVC%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">配置版创建SpringMVC程序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E8%A7%A3%E5%88%9B%E5%BB%BASpringMVC%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">注解创建SpringMVC程序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%8E%A7%E5%88%B6%E5%99%A8-Controller\"><span class=\"toc-text\">3、控制器 Controller</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AE%9E%E7%8E%B0Controller-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">1.实现Controller 接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">测试</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3-Controller\"><span class=\"toc-text\">2.使用注解@Controller</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95-1\"><span class=\"toc-text\">测试</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-RequestMapping\"><span class=\"toc-text\">3.RequestMapping</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81RestFul-%E9%A3%8E%E6%A0%BC\"><span class=\"toc-text\">4、RestFul 风格</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95-2\"><span class=\"toc-text\">测试</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E8%B7%AF%E5%BE%84%E5%8F%98%E9%87%8F%E7%9A%84%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">使用路径变量的好处</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%82%E6%95%B0%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">参数测试</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8method%E5%B1%9E%E6%80%A7%E6%8C%87%E5%AE%9A%E8%AF%B7%E6%B1%82%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">使用method属性指定请求类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81Spring-MVC%E9%87%8D%E5%AE%9A%E5%90%91\"><span class=\"toc-text\">5、Spring MVC重定向</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86\"><span class=\"toc-text\">6、数据处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">处理提交数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%8F%90%E4%BA%A4%E7%9A%84%E5%9F%9F%E5%90%8D%E7%A7%B0%E5%92%8C%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0%E5%90%8D%E4%B8%80%E8%87%B4\"><span class=\"toc-text\">1、提交的域名称和处理方法的参数名一致</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%8F%90%E4%BA%A4%E7%9A%84%E5%9F%9F%E5%90%8D%E7%A7%B0%E5%92%8C%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0%E5%90%8D%E4%B8%8D%E4%B8%80%E8%87%B4\"><span class=\"toc-text\">2、提交的域名称和处理方法的参数名不一致</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%8F%90%E4%BA%A4%E7%9A%84%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3、提交的是一个对象</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%E5%88%B0%E5%89%8D%E7%AB%AF\"><span class=\"toc-text\">数据显示到前端</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E7%A7%8D%EF%BC%9A%E4%BD%BF%E7%94%A8ModelAndView\"><span class=\"toc-text\">第一种：使用ModelAndView</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E7%A7%8D%EF%BC%9A%E4%BD%BF%E7%94%A8Model\"><span class=\"toc-text\">第二种：使用Model</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E7%A7%8D%EF%BC%9A%E4%BD%BF%E7%94%A8ModelMap\"><span class=\"toc-text\">第三种：使用ModelMap</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">乱码问题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81JSON\"><span class=\"toc-text\">7、JSON</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JSON%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">JSON介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B9%B1%E7%A0%81%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">乱码优化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B9%B1%E7%A0%81%E7%BB%9F%E4%B8%80%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">乱码统一解决</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9Ejson%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%9F%E4%B8%80%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">返回json字符串统一解决</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8%E3%80%81%E6%95%B4%E5%90%88SSM%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">8、整合SSM框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E8%A6%81%E6%B1%82%EF%BC%9A\"><span class=\"toc-text\">环境要求：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">数据库环境</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">基本环境搭建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MyBatis%E7%BC%96%E5%86%99\"><span class=\"toc-text\">MyBatis编写</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Spring%E5%B1%82\"><span class=\"toc-text\">Spring层</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Spring%E6%95%B4%E5%90%88Service%E5%B1%82\"><span class=\"toc-text\">Spring整合Service层</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SpringMVC%E5%B1%82\"><span class=\"toc-text\">SpringMVC层</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Controller%E5%92%8C%E8%A7%86%E5%9B%BE%E5%B1%82%E7%BC%96%E5%86%99\"><span class=\"toc-text\">Controller和视图层编写</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9%E3%80%81AJAX\"><span class=\"toc-text\">9、AJAX</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2%E7%9A%84%E5%BC%82%E6%AD%A5%E4%BA%A4%E4%BA%92\"><span class=\"toc-text\">1.登录界面的异步交互</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%8E%E7%AB%AF%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">后端实现</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0-login-jsp\"><span class=\"toc-text\">前端界面实现 login.jsp</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">显示效果</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-Spring-MVC%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">2.Spring MVC实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E7%B1%BB\"><span class=\"toc-text\">实现类</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%8E%E5%8F%B0%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">后台实现</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">界面实现</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10%E3%80%81%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">10、拦截器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">自定义拦截器</span></a></li></ol></li></ol></li></ol>","author":{"name":"Xoc001","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Go语言开发","date":"2022-02-10T17:38:23.912Z","updated":"2022-01-28T14:27:13.532Z","comments":true,"path":"api/articles/Go语言开发.json","keywords":null,"cover":[],"text":"Go语言开发 程序基本结构一： go文件的后缀是.go package main : 表示该hello.go文件所的包是main，在go中，每个文件都必须属于一个包。 import “fmt” : 表示引入一个包，包名 fmt，引入该包后，就可以使用fmt包的函数。 func m...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[],"author":{"name":"Xoc001","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"SpringBoot","date":"2022-02-10T17:38:23.869Z","updated":"2021-09-11T15:35:21.893Z","comments":true,"path":"api/articles/SpringBoot.json","keywords":null,"cover":[],"text":"SpringBoot2021年8月25日 第一个SpringBoot程序原理yaml配置注入配置文件SpringBoot使用一个全局的配置文件，配置文件名称是固定的 application.properties 语法结构：key&#x3D;value application.ya...","link":"","photos":[],"count_time":{"symbolsCount":"54k","symbolsTime":"49 mins."},"categories":[],"tags":[],"author":{"name":"Xoc001","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}