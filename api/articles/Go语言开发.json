{"title":"Go语言入门","uid":"1ec064dab4601a68b47e5aba81d18d63","slug":"Go语言开发","date":"2022-02-11T04:11:01.854Z","updated":"2022-02-11T04:17:48.878Z","comments":true,"path":"api/articles/Go语言开发.json","keywords":null,"cover":[],"content":"<h1 id=\"Go语言开发\"><a href=\"#Go语言开发\" class=\"headerlink\" title=\"Go语言开发\"></a>Go语言开发</h1><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220110200000296.png\" alt=\"image-20220110200000296\"></p>\n<h2 id=\"程序基本结构\"><a href=\"#程序基本结构\" class=\"headerlink\" title=\"程序基本结构\"></a>程序基本结构</h2><p>一：</p>\n<ol>\n<li><p>go文件的后缀是.go</p>\n</li>\n<li><p>package main : 表示该hello.go文件所的包是main，在go中，每个文件都必须属于一个包。</p>\n</li>\n<li><p>import “fmt”  : 表示引入一个包，包名 fmt，引入该包后，就可以使用fmt包的函数。</p>\n</li>\n<li><p>func main(){</p>\n<p>}</p>\n<p>func 是一个关键字，表示一个函数。</p>\n<p>main是函数名，是一个主函数。</p>\n</li>\n<li><p>fmt.Println(“hello”) 表示调用fmt包的Println函数 输出hello。</p>\n</li>\n</ol>\n<p>二：通过 go build 文件名.go命令对该go文件编译，生成.exe文件。</p>\n<p>三：运行文件名.exe文件。</p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220110200901860.png\" alt=\"image-20220110200901860\"></p>\n<p>四：通过 <code> go run</code> 命令可以直接运行hello.go程序。</p>\n<h2 id=\"执行流程分析\"><a href=\"#执行流程分析\" class=\"headerlink\" title=\"执行流程分析\"></a>执行流程分析</h2><ul>\n<li><p>如果是对源码编译后，再执行的流程。<img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220110201632537.png\" alt=\"image-20220110201632537\"></p>\n</li>\n<li><p>对源码直接go run 的运行流程<img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220110201649026.png\" alt=\"image-20220110201649026\"></p>\n</li>\n<li><p>两种执行流程方式的区别</p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220110202001896.png\" alt=\"image-20220110202001896\"></p>\n</li>\n</ul>\n<h3 id=\"Go语言开发注意事项\"><a href=\"#Go语言开发注意事项\" class=\"headerlink\" title=\"Go语言开发注意事项\"></a>Go语言开发注意事项</h3><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220110204408296.png\" alt=\"image-20220110204408296\"></p>\n<h3 id=\"Go语言常用转义字符\"><a href=\"#Go语言常用转义字符\" class=\"headerlink\" title=\"Go语言常用转义字符\"></a>Go语言常用转义字符</h3><ul>\n<li>\\t：表示一个制表符，可以用来排版</li>\n<li>\\n：换行符</li>\n<li>\\\\：一个\\</li>\n<li>\\“ :一个”</li>\n<li>\\r : 一个回车</li>\n</ul>\n<h3 id=\"Dos命令\"><a href=\"#Dos命令\" class=\"headerlink\" title=\"Dos命令\"></a>Dos命令</h3><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220111185040141.png\" alt=\"image-20220111185040141\"></p>\n<p>删除目录及下面的文件，不询问</p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220111185129874.png\" alt=\"image-20220111185129874\"></p>\n<p>删除目录及下面的文件，询问</p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220111185210776.png\" alt=\"image-20220111185210776\"></p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220111191041517.png\" alt=\"image-20220111191041517\"></p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><ul>\n<li>指定变量类型，声明后若不赋值，使用默认值</li>\n<li>根据值自行判定变量类型(类型推导)</li>\n<li>省略<code>var </code> , 使用<code>:=</code> 等价于<code>var nume string </code> <code> name = &quot;tom&quot;</code></li>\n<li>多变量声明</li>\n</ul>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220111214106691.png\" alt=\"image-20220111214106691\"></p>\n<ul>\n<li>全局变量：定义在main方法外</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F;定义全局变量\nvar n1 &#x3D; 100\nvar n2 &#x3D; 200\nvar n3 &#x3D; 300\n&#x2F;&#x2F;上面的声明方式，可以改成一次性声明\nvar(\n    n4 &#x3D; 100\n    n5 &#x3D; &quot;hello&quot;\n)</code></pre>\n\n<ul>\n<li>该区域的数据值可以在同一类型范围内不断变化</li>\n<li>变量在同一个作用域内不能重名</li>\n<li>变量&#x3D;变量名+值+数据类型</li>\n<li>默认值 int为0，string为空串</li>\n</ul>\n<h3 id=\"变量的数据类型\"><a href=\"#变量的数据类型\" class=\"headerlink\" title=\"变量的数据类型\"></a>变量的数据类型</h3><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220111220753720.png\" alt=\"image-20220111220753720\"></p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220111230332843.png\" alt=\"image-20220111230332843\"></p>\n<p><strong>在程序中查看某个变量的字节大小和数据类型。</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func main() &#123;\n\tvar i int\n\ti&#x3D;100\n\tfmt.Printf(&quot;i变量的类型 %T \\n&quot;,i)\n\tvar j int64 &#x3D;10\n\tfmt.Printf(&quot;j变量的类型 %T,j所占的字节大小 %d&quot;,i,unsafe.Sizeof(j))\n&#125;</code></pre>\n\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220111231736953.png\" alt=\"image-20220111231736953\"></p>\n<h4 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h4><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220112122416639.png\" alt=\"image-20220112122416639\"></p>\n<p>浮点数在机器中存放形式为：浮点数&#x3D;符号位+指数位+尾数位</p>\n<p>浮点数都是有符号的。</p>\n<p>尾数部分可能丢失，造成精度损失。</p>\n<h4 id=\"字符类型\"><a href=\"#字符类型\" class=\"headerlink\" title=\"字符类型\"></a>字符类型</h4><p>Go中没有专门的字符类型，需要保存到byte中</p>\n<p><strong>字符串就是一串固定长度的字符连接起来的字符序列</strong>。Go的字符串是由单个字节连接起来的。也就是说对于传统的字符串是由字符组成的，而Go的字符串不同，它是由字节组成的。</p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220112153422630.png\" alt=\"image-20220112153422630\"></p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220112155108549.png\" alt=\"image-20220112155108549\"></p>\n<ul>\n<li>如果保存的字符存在于ASCII表中，则可以直接保存到byte</li>\n<li>如果保存的字符的码值大于255，这时需要使用int类型保存</li>\n<li>需要按照字符的方式输出，需要格式化输出，使用<code>fmt.Printf(&quot;%c&quot;,c1)</code></li>\n</ul>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220112170544742.png\" alt=\"image-20220112170544742\"></p>\n<h4 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h4><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220112170855155.png\" alt=\"image-20220112170855155\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;unsafe&quot;\n)\n\nfunc main() &#123;\n\tvar flag bool &#x3D; true\n\tfmt.Println(flag)\n\t&#x2F;&#x2F;查看所占存储空间\n\tfmt.Println(&quot;所占存储空间&quot;,unsafe.Sizeof(flag))\n&#125;\n</code></pre>\n\n\n\n<h4 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h4><ul>\n<li>字符串一旦赋值，就不能修改。字符串在Go中是不可变的。</li>\n<li>字符串的两种表示形式<ul>\n<li>双引号，会识别转义字符</li>\n<li>反引号&#96;&#96;，以字符串的原生形式输出，包括换行和特殊字符，可以实现防止攻击、输出源代码的效果</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;unsafe&quot;\n)\n\nfunc main() &#123;\n\tvar str1 string &#x3D; &quot;hello&quot;\n\tfmt.Println(str1)\n\tfmt.Println(&quot;str1的存储大小&quot;,unsafe.Sizeof(str1))\n\n\tvar str2 string &#x3D;&quot;abc\\nabce&quot;\n\tfmt.Println(str2)\n\tvar str3 string &#x3D; &#96;package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;unsafe&quot;\n)\n\nfunc main() &#123;\n\tvar str1 string &#x3D; &quot;hello&quot;\n\tfmt.Println(str1)\n\tfmt.Println(&quot;str1的存储大小&quot;,unsafe.Sizeof(str1))\n\n\tvar str2 string &#x3D;&quot;abc\\nabce&quot;\n\tfmt.Println(str2)\n\tvar str3 string &#x3D; &quot;&quot;\n&#125;\n&#96;\n\tfmt.Println(str3)\n\n\t&#x2F;&#x2F;字符串的拼接\n\tvar str4 &#x3D; &quot;Hello&quot; + &quot;world&quot;\n\tfmt.Println(str4)\n\t&#x2F;&#x2F;连续换行拼接，需要将+号写在上一行的结尾\n\tvar str5 &#x3D; &quot;Hello&quot; +&quot; world&quot; +&quot;Hello&quot; +\n\t\t&quot; world&quot; + &quot;Hello&quot; +&quot; world&quot; +\n\t\t&quot;Hello&quot; +&quot; world&quot;\n\tfmt.Println(str5)\n\n\t&#x2F;&#x2F;&#x2F;基本数据类型的默认值\n\tvar a int\n\tvar b float32\n\tvar c float64\n\tvar flag bool\n\tvar name string\n\t&#x2F;&#x2F;格式化输出\n\tfmt.Printf(&quot;a&#x3D;%d,b&#x3D;%f,c&#x3D;%v,flag&#x3D;%v,name&#x3D;%v&quot;,a,b,c,flag,name)\n&#125;\n</code></pre>\n\n<h3 id=\"基本数据类型的转换\"><a href=\"#基本数据类型的转换\" class=\"headerlink\" title=\"基本数据类型的转换\"></a>基本数据类型的转换</h3><ul>\n<li>Go在不同类型之间的赋值需要显式转换。<strong>不能自动转换</strong></li>\n</ul>\n<pre class=\"line-numbers language-GO\" data-language=\"GO\"><code class=\"language-GO\">package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\tvar i int32 &#x3D; 100\n\tvar n1 float32 &#x3D; float32(i)\n\tvar n2 int8 &#x3D; int8(i)\n\tvar n3 int64 &#x3D; int64(i)\n\n\tfmt.Printf(&quot;n1&#x3D;%f,n2&#x3D;%d,n3&#x3D;%d&quot;,n1,n2,n3)\n&#125;\n</code></pre>\n\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220112201117902.png\" alt=\"image-20220112201117902\"></p>\n<p><strong>注意事项</strong></p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220112202023337.png\" alt=\"image-20220112202023337\"></p>\n<h3 id=\"基本数据类型和String的转换\"><a href=\"#基本数据类型和String的转换\" class=\"headerlink\" title=\"基本数据类型和String的转换\"></a>基本数据类型和String的转换</h3><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220112221853940.png\" alt=\"image-20220112221853940\"></p>\n<p>方法1：使用<code>fmt.Sprintf()</code>函数</p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220112204701031.png\" alt=\"image-20220112204701031\"></p>\n<p>方式2：使用<code>strconv</code>包的函数。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">func FormatBool(b bool) string\nfunc FormatInt(i int64, base int) string\nfunc FormatUint(i uint64, base int) string\nfunc FormatFloat(f float64, fmt byte, prec, bitSize int) string</code></pre>\n\n\n\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220112221525234.png\" alt=\"image-20220112221525234\"></p>\n<p><strong>相关代码</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;strconv&quot;\n)\n\nfunc main() &#123;\n\tvar n1 int &#x3D;100\n\tvar n2 float64 &#x3D;23.123\n\tvar flag bool &#x3D;true\n\tvar b byte &#x3D;&#39;a&#39;\n\tvar str string\n\n\t&#x2F;&#x2F;第一种方法，使用fmt包中的函数\n\tstr &#x3D; fmt.Sprintf(&quot;%d&quot;,n1)\n\tfmt.Printf(&quot;str type %T str&#x3D;%q\\n&quot;,str,str)\n\n\tstr &#x3D; fmt.Sprintf(&quot;%f&quot;,n2)\n\tfmt.Printf(&quot;str type %T str&#x3D;%q\\n&quot;,str,str)\n\n\tstr &#x3D; fmt.Sprintf(&quot;%t&quot;,flag)\n\tfmt.Printf(&quot;str type %T str&#x3D;%q\\n&quot;,str,str)\n\n\tstr &#x3D; fmt.Sprintf(&quot;%c&quot;,b)\n\tfmt.Printf(&quot;str type %T str&#x3D;%q\\n&quot;,str,str)\n\n\t&#x2F;&#x2F;第二种方法，使用strconv包中的函数\n\tvar num1 int &#x3D; 99\n\tvar num2 float64 &#x3D; 32.1212\n\tvar flag2 bool &#x3D;true\n\n\tstr &#x3D; strconv.FormatInt(int64(num1),10)\n\tfmt.Printf(&quot;str type %T str&#x3D;%q\\n&quot;,str,str)\n\n\tstr &#x3D; strconv.FormatFloat(num2,&#39;f&#39;,10,64)\n\tfmt.Printf(&quot;str type %T str&#x3D;%q\\n&quot;,str,str)\n\n\tstr &#x3D; strconv.FormatBool(flag2)\n\tfmt.Printf(&quot;str type %T str&#x3D;%q\\n&quot;,str,str)\n&#125;</code></pre>\n\n\n\n<h3 id=\"String类型转基本数据类型\"><a href=\"#String类型转基本数据类型\" class=\"headerlink\" title=\"String类型转基本数据类型\"></a>String类型转基本数据类型</h3><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220113171331762.png\" alt=\"image-20220113171331762\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;strconv&quot;\n)\n\nfunc main() &#123;\n\t&#x2F;&#x2F;String 转int\n\tvar str string &#x3D;&quot;123747&quot;\n\tvar n1 int64\n\tn1,_ &#x3D; strconv.ParseInt(str,10,64)\n\tfmt.Printf(&quot;n1 type&#x3D; %T n1&#x3D;%d \\n&quot;,n1,n1)\n\n\t&#x2F;&#x2F;String 转float\n\tvar str1 string &#x3D; &quot;123.4567&quot;\n\tvar n2 float64\n\tn2,_ &#x3D; strconv.ParseFloat(str1,64)\n\tfmt.Printf(&quot;n2 type&#x3D;%T n2&#x3D;%f\\n&quot;,n2,n2)\n\n\t&#x2F;&#x2F;String 转 bool\n\tvar str2 string &#x3D;&quot;true&quot;\n\tvar flag bool\n\tflag,_ &#x3D; strconv.ParseBool(str2)\n\tfmt.Printf(&quot;flag type&#x3D;%T flag&#x3D;%t&quot;,flag,flag)\n&#125;\n</code></pre>\n\n<ul>\n<li>要确保String类型可以转成有效数据。无效数据直接转换成0，或者默认值。bool-&gt;false</li>\n</ul>\n<h2 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h2><ul>\n<li>基本数据类型，变量存的就是值，也叫值类型</li>\n<li>获取变量的地址，用&amp;</li>\n<li>指针类型，指针变量存的是一个地址，这个地址指向的空间存的才是值。</li>\n<li>获取指针类型所指向的值，使用*</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\tvar n1 int &#x3D; 100\n\t&#x2F;&#x2F;使用&amp;取地址\n\tfmt.Printf(&quot;n1的地址为:%v \\n&quot;,&amp;n1)\n\t&#x2F;&#x2F;将n1变量的地址赋值给ptr指针变量\n\tvar ptr * int &#x3D; &amp;n1\n\t&#x2F;&#x2F;输出ptr指针变量中的内容\n\tfmt.Printf(&quot;ptr的地址为:%v \\n&quot;,ptr)\n\t&#x2F;&#x2F;输出ptr指针内容所对应地址的值。\n\tfmt.Printf(&quot;ptr指针指向的值为：%d&quot;,*ptr)\n&#125;\n</code></pre>\n\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220113183709124.png\" alt=\"image-20220113183709124\"></p>\n<h3 id=\"值类型和引用类型\"><a href=\"#值类型和引用类型\" class=\"headerlink\" title=\"值类型和引用类型\"></a>值类型和引用类型</h3><ul>\n<li>值类型：基本数据类型，数组和结构体struct</li>\n<li>引用类型：指针、slice切片、map、管道chan、interface等都是引用类型</li>\n</ul>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220113214350082.png\" alt=\"image-20220113214350082\"></p>\n<ul>\n<li>值类型：变量直接存储值、内存通常在栈中分配。</li>\n<li>引用类型: 变量存储得是一个地址，这个地址对应的空间才真正存储数据(值)，内存通常在堆上分配，当没有任何变量引用这个地址时，该地址对应的数据空间就成为一个垃圾，会被GC回收</li>\n</ul>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220113220155843.png\" alt=\"image-20220113220155843\"></p>\n<h2 id=\"标识符命名规范\"><a href=\"#标识符命名规范\" class=\"headerlink\" title=\"标识符命名规范\"></a>标识符命名规范</h2><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220113221337548.png\"></p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220113222357036.png\" alt=\"image-20220113222357036\"></p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220113225605688.png\" alt=\"image-20220113225605688\"></p>\n<p><strong>代码示例</strong></p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220113225634758.png\" alt=\"image-20220113225634758\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;GoProject&#x2F;src&#x2F;Study03&#x2F;demo13&#x2F;model&quot;\n\t&quot;fmt&quot;\n)\nfunc main() &#123;\n\tfmt.Println(model.HeroName)\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package model\n\nvar HeroName string &#x3D;&quot;adfadf&quot;\n</code></pre>\n\n<h3 id=\"预定义标识符\"><a href=\"#预定义标识符\" class=\"headerlink\" title=\"预定义标识符\"></a>预定义标识符</h3><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220113230128231.png\" alt=\"image-20220113230128231\"> </p>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220114220636064.png\" alt=\"image-20220114220636064\"></p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220114221651616.png\" alt=\"image-20220114221651616\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 除法运算符。说明：如果运算的数都是整数，那么除后，去掉小数部分，保留整数部分\n\tfmt.Println(10 &#x2F; 4)\n\n\t&#x2F;&#x2F;如果希望有小数部分，需要使用浮点数参与运算。\n\tfmt.Println(10.0 &#x2F; 4)\n\n\t&#x2F;&#x2F; 演示取余运算的使用\n\t&#x2F;&#x2F; a % b &#x3D; a - a &#x2F; b * b\n\tfmt.Println(10 % 3)   &#x2F;&#x2F;1\n\tfmt.Println(-10 % 3)  &#x2F;&#x2F; -1\n\tfmt.Println(10 % -3)  &#x2F;&#x2F;1\n\tfmt.Println(-10 % -3) &#x2F;&#x2F;-1\n\n\tvar i int &#x3D; 10\n\ti++\n\tfmt.Println(&quot;i&#x3D;&quot;,i)\n\ti--\n\tfmt.Println(&quot;i&#x3D;&quot;,i)\n\n&#125;\n</code></pre>\n\n<h3 id=\"运算符使用的注意事项\"><a href=\"#运算符使用的注意事项\" class=\"headerlink\" title=\"运算符使用的注意事项\"></a>运算符使用的注意事项</h3><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220114230719924.png\" alt=\"image-20220114230719924\"></p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220115182643303.png\" alt=\"image-20220115182643303\"> </p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220115183858156.png\" alt=\"image-20220115183858156\"></p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220115201222746.png\" alt=\"image-20220115201222746\"></p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220115201233405.png\" alt=\"image-20220115201233405\"></p>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220115201452054.png\" alt=\"image-20220115201452054\"></p>\n<h3 id=\"运算符的优先级\"><a href=\"#运算符的优先级\" class=\"headerlink\" title=\"运算符的优先级\"></a>运算符的优先级</h3><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220115212019123.png\" alt=\"image-20220115212019123\"></p>\n<h3 id=\"特别说明\"><a href=\"#特别说明\" class=\"headerlink\" title=\"特别说明\"></a>特别说明</h3><p>Go语言明确不支持三元运算符。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F;n &#x3D; i &gt; j? i:j\nif i&gt;j&#123;\n    n &#x3D; i\n&#125; else&#123;\n    n &#x3D; j\n&#125;</code></pre>\n\n\n\n<h2 id=\"键盘输入语句\"><a href=\"#键盘输入语句\" class=\"headerlink\" title=\"键盘输入语句\"></a>键盘输入语句</h2><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220117173952864.png\" alt=\"image-20220117173952864\"></p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220117173959750.png\" alt=\"image-20220117173959750\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;fmt&quot;\n\nfunc main()&#123;\n\tvar name string\n\tvar age int\n\tvar salary float32\n\tvar isPass bool\n\n\t&#x2F;&#x2F;Sacnln()函数使用。\n\t\n\tfmt.Println(&quot;请输入姓名&quot;)\n\t&#x2F;&#x2F;输入地址，将内容给name变量\n\tfmt.Scanln(&amp;name)\n\t\n\tfmt.Println(&quot;请输入年龄&quot;)\n\tfmt.Scanln(&amp;age)\n\t\n\tfmt.Println(&quot;请输入薪水&quot;)\n\tfmt.Scanln(&amp;salary)\n\t\n\tfmt.Println(&quot;请输入是否通过&quot;)\n\tfmt.Scanln(&amp;isPass)\n\t\n\tfmt.Printf(&quot;结果：name&#x3D;%v,age&#x3D;%v,salary&#x3D;%v,isPass&#x3D;%v&quot;,name,age,salary,isPass)\n\n\t&#x2F;&#x2F;方式二，指定格式输入\n\tfmt.Println(&quot;请输入你的姓名，年龄，薪水，是否通过，使用空格隔开&quot;)\n\tfmt.Scanf(&quot;%s %d %f %t&quot;,&amp;name,&amp;age,&amp;salary,&amp;isPass)\n\tfmt.Printf(&quot;结果：name&#x3D;%v,age&#x3D;%v,salary&#x3D;%v,isPass&#x3D;%v&quot;,name,age,salary,isPass)\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"进制\"><a href=\"#进制\" class=\"headerlink\" title=\"进制\"></a>进制</h2><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220117185357093.png\" alt=\"image-20220117185357093\"></p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220117195732408.png\" alt=\"image-20220117195732408\"></p>\n<h2 id=\"程序流程控制\"><a href=\"#程序流程控制\" class=\"headerlink\" title=\"程序流程控制\"></a>程序流程控制</h2><ul>\n<li><p>顺序控制</p>\n</li>\n<li><p>分支控制</p>\n<ul>\n<li><p>单分支</p>\n<ul>\n<li><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220117200549994.png\" alt=\"image-20220117200549994\"></p>\n</li>\n<li><p>&#96;&#96;&#96;&#96;go<br>package main</p>\n<p>import “fmt”</p>\n<p>func main() {<br>var age int<br>fmt.Println(“请输入年龄”)<br>fmt.Scanln(&amp;age)<br>if age&gt;18{<br>    fmt.Println(“你的年龄大于18”)<br>}<br>}</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n    * ![image-20220117202209104](Go语言开发.assets&#x2F;image-20220117202209104.png)\n\n    * ![image-20220117202901541](Go语言开发.assets&#x2F;image-20220117202901541.png)\n\n    * &#96;&#96;&#96;GO\n      package main\n      \n      import &quot;fmt&quot;\n      \n      func main() &#123;\n      \tif age:&#x3D;20;age&gt;18&#123;\n      \t\tfmt.Println(&quot;年龄大于18&quot;)\n      \t&#125;\n      &#125;\n      \n      &#96;&#96;&#96;\n\n  * 双分支\n\n    * ![image-20220117204631898](Go语言开发.assets&#x2F;image-20220117204631898.png)\n\n    * &#96;&#96;&#96;go\n      package main\n      \n      import &quot;fmt&quot;\n      \n      func main() &#123;\n      \tvar age int\n      \tfmt.Println(&quot;请输入年龄&quot;)\n      \tfmt.Scanln(&amp;age)\n      \tif age&gt;18&#123;\n      \t\tfmt.Println(&quot;大于18&quot;)\n      \t&#125; else&#123;\n      \t\tfmt.Println(&quot;小于18&quot;)\n      \t&#125;\n      &#125;\n      \n      &#96;&#96;&#96;\n\n  * 多分支\n\n    * ![image-20220117222510430](Go语言开发.assets&#x2F;image-20220117222510430.png)\n\n    * ![image-20220117222528417](Go语言开发.assets&#x2F;image-20220117222528417.png)\n\n    * &#96;&#96;&#96;go\n      package main\n      \n      import &quot;fmt&quot;\n      \n      func main() &#123;\n      \tvar b bool &#x3D; true\n      \tif b &#x3D;&#x3D; false &#123;\n      \t\tfmt.Println(&quot;a&quot;)\n      \t&#125; else if b &#123;\n      \t\tfmt.Println(&quot;b&quot;)\n      \t&#125; else if !b &#123;\n      \t\tfmt.Println(&quot;c&quot;)\n      \t&#125; else &#123;\n      \t\tfmt.Println(&quot;d&quot;)\n      \t&#125;\n      &#125;\n      \n      &#96;&#96;&#96;\n\n* 循环控制\n\n\n\n### Switch分支\n\n#### 基本介绍\n\n![](Go语言开发.assets&#x2F;image-20220118190039691.png)\n\n#### 基本语法\n\n![image-20220118190324288](Go语言开发.assets&#x2F;image-20220118190324288.png)\n\n#### 流程图\n\n![image-20220118190422876](Go语言开发.assets&#x2F;image-20220118190422876.png)\n\n#### 使用细节\n\n* case&#x2F; which后是一个表达式(即：常量值、变量、一个有返回值的函数都可以)\n\n  * &#96;&#96;&#96;go\n    func main() &#123;\n    \tvar key int32 &#x3D;20\n    \t&#x2F;&#x2F;使用返回值的函数\n    \tswitch test(key) &#123;\n    \tcase 10:\n    \t\tfmt.Println(&quot;10&quot;)\n    \tcase 20:\n    \t\tfmt.Println(&quot;20&quot;)\n    \tcase 30:\n    \t\tfmt.Println(&quot;30&quot;)\n    \tdefault:\n    \t\tfmt.Println(&quot;abc&quot;)\n    \t&#125;\n    &#125;\n    &#96;&#96;&#96;\n\n* case后的各个表达式的数据类型，必须要和switch的表达书数据类型一致\n\n* case后面可以带多个表达式，使用逗号间隔。\n\n  * &#96;&#96;&#96;&#96;go\n    func main() &#123;\n    \tvar key int32 &#x3D;15\n    \t&#x2F;&#x2F;使用返回值的函数\n    \tswitch key &#123;\n    \tcase 10,15,20:\n    \t\tfmt.Println(&quot;10&quot;)\n    \tcase 30:\n    \t\tfmt.Println(&quot;20&quot;)\n    \tcase 40:\n    \t\tfmt.Println(&quot;30&quot;)\n    \tdefault:\n    \t\tfmt.Println(&quot;abc&quot;)\n    \t&#125;\n    &#125;</code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>case后面的表达式如果是常量值(字面量)，则要求不能重复</p>\n</li>\n<li><p>case后面不需要带break，程序匹配到一个case后就会执行对应的代码块，然后退出switch。如果匹配不到则执行switch</p>\n</li>\n<li><p>default语句不是必须的</p>\n</li>\n<li><p>switch 后可以不带表达式，类似if–else分支方式来使用</p>\n<ul>\n<li>&#96;&#96;&#96;&#96;go<br>func main() {<br>var age int &#x3D;10<br>&#x2F;&#x2F;switch后面不带表达式，if—else使用<br>switch {<br>case age&#x3D;&#x3D;10:<br>    fmt.Println(“10”)<br>    fallthrough<br>case age&gt;10 &amp;&amp;age&lt;&#x3D;20:<br>    fmt.Println(“20”)<br>case age&gt;20&amp;&amp;age&lt;&#x3D;30:<br>    fmt.Println(“30”)<br>default:<br>    fmt.Println(“aabc”)<br>}<br>}<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n* switch 后也可以直接声明&#x2F;定义一个变量，分号结束。**不推荐**\n\n  * &#96;&#96;&#96;go\n    func main() &#123;\n    \t&#x2F;&#x2F;使用返回值的函数\n    \tswitch m:&#x3D;20; &#123;\n    \tcase m&#x3D;&#x3D;10,m&#x3D;&#x3D;20:\n    \t\tfmt.Println(&quot;10&quot;)\n    \tcase m&#x3D;&#x3D;30:\n    \t\tfmt.Println(&quot;20&quot;)\n    \tcase m&#x3D;&#x3D;40:\n    \t\tfmt.Println(&quot;30&quot;)\n    \tdefault:\n    \t\tfmt.Println(&quot;abc&quot;)\n    \t&#125;\n        &#x2F;&#x2F;运行结果10\n    &#125;\n    &#96;&#96;&#96;\n\n* switch 穿透 &#96;fallthrough&#96;，如果在case语句块后增加&#96;fallthrough&#96;，则会继续执行下一个case，也叫switch穿透。\n\n  * &#96;&#96;&#96;go\n    func main() &#123;\n    \t&#x2F;&#x2F;使用返回值的函数\n    \tswitch m:&#x3D;20; &#123;\n    \tcase m&#x3D;&#x3D;10,m&#x3D;&#x3D;20:\n    \t\tfmt.Println(&quot;10&quot;)\n    \t\tfallthrough\n    \tcase m&#x3D;&#x3D;30:\n    \t\tfmt.Println(&quot;20&quot;)\n    \t\tfallthrough\n    \tcase m&#x3D;&#x3D;40:\n    \t\tfmt.Println(&quot;30&quot;)\n    \tdefault:\n    \t\tfmt.Println(&quot;abc&quot;)\n    \t&#125;\n        &#x2F;&#x2F;运行结果\n        &#x2F;&#x2F;10\n        &#x2F;&#x2F;20\n        &#x2F;&#x2F;30\n    &#125;\n    &#96;&#96;&#96;\n\n* Type Switch ：switch语句可以用于type-switch 来判断某个interface变量中实际指向的变量类型。\n\n\n\n### switch和if的比较\n\n* 如果判断的具体数值不多，而且符合整数、浮点数、字符、字符串这集中类型。建议使用switch，简洁高效\n* 其他情况：对区间判断和结果为bool类型的判断，使用if，if的适用范围更广泛。\n\n\n\n### for循环控制\n\n#### 基本语法\n\n![image-20220120231508752](Go语言开发.assets&#x2F;image-20220120231508752.png)\n\n![image-20220120232758266](Go语言开发.assets&#x2F;image-20220120232758266.png)\n\n![image-20220122175044471](Go语言开发.assets&#x2F;image-20220122175044471.png)\n\n![image-20220122180219648](Go语言开发.assets&#x2F;image-20220122180219648.png)\n\n\n\n\n\n### while和do-while的实现\n\nGo语言中没有while和do-while语法。**通过for循环来实现其使用效果**\n\n#### while实现\n\n![image-20220122190429492](Go语言开发.assets&#x2F;image-20220122190429492.png)\n\n&#96;&#96;&#96;&#96;go\n&#x2F;&#x2F;while语法实现\nvar i int &#x3D; 1\nfor&#123;\n    if i&gt;10&#123;\n        break\n    &#125;\n    fmt.Println(i)\n    i++\n&#125;</code></pre></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"do-while实现\"><a href=\"#do-while实现\" class=\"headerlink\" title=\"do-while实现\"></a>do-while实现</h4><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220122190733450.png\" alt=\"image-20220122190733450\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F;do-while语法实现\nvar j int &#x3D;1\nfor&#123;\n    fmt.Println(j)\n    j++\n    if j&gt;10&#123;\n        break\n    &#125;\n&#125;</code></pre>\n\n\n\n<h3 id=\"多层循环控制\"><a href=\"#多层循环控制\" class=\"headerlink\" title=\"多层循环控制\"></a>多层循环控制</h3><p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220128173858272.png\" alt=\"image-20220128173858272\"></p>\n<p>打印空心菱形</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\tvar totalLevel int &#x3D; 4\n\n\tfor i :&#x3D; 1; i &lt;&#x3D; totalLevel; i++ &#123;\n\t\tfor k :&#x3D; 1; k &lt;&#x3D; totalLevel-i; k++ &#123;\n\t\t\tfmt.Printf(&quot; &quot;)\n\t\t&#125;\n\t\tfor j :&#x3D; 1; j &lt;&#x3D; i*2-1; j++ &#123;\n\t\t\t&#x2F;&#x2F;空心金字塔\n\t\t\tif j &#x3D;&#x3D; 1 || j &#x3D;&#x3D; 2*i-1&#123;\n\t\t\t\tfmt.Printf(&quot;*&quot;)\n\t\t\t&#125;else&#123;\n\t\t\t\tfmt.Printf(&quot; &quot;)\n\t\t\t&#125;\n\t\t&#125;\n\t\tfmt.Println()\n\t&#125;\n\n\t&#x2F;&#x2F;菱形打印\n\tfor i :&#x3D; totalLevel-1; i &gt;&#x3D; 1; i-- &#123;\n\t\tfor k :&#x3D; 1; k &lt;&#x3D; totalLevel-i; k++ &#123;\n\t\t\tfmt.Printf(&quot; &quot;)\n\t\t&#125;\n\t\tfor j :&#x3D; 1; j &lt;&#x3D; i*2-1; j++ &#123;\n\t\t\t&#x2F;&#x2F;空心金字塔\n\t\t\tif j &#x3D;&#x3D; 1 || j &#x3D;&#x3D; 2*i-1 &#123;\n\t\t\t\tfmt.Printf(&quot;*&quot;)\n\t\t\t&#125;else&#123;\n\t\t\t\tfmt.Printf(&quot; &quot;)\n\t\t\t&#125;\n\n\t\t&#125;\n\t\tfmt.Println()\n\t&#125;\n&#125;\n</code></pre>\n\n\n\n<p>九九乘法表</p>\n<pre class=\"line-numbers language-GO\" data-language=\"GO\"><code class=\"language-GO\">for i:&#x3D;1;i&lt;&#x3D;9;i++&#123;\n    for j:&#x3D;1;j&lt;&#x3D;i;j++&#123;\n        fmt.Printf(&quot;%d * %d &#x3D; %d  &quot;,j,i,j*i)\n    &#125;\n    fmt.Println()\n&#125;</code></pre>\n\n\n\n<h3 id=\"break-语法\"><a href=\"#break-语法\" class=\"headerlink\" title=\"break 语法\"></a>break 语法</h3><p>break语句用于终止某个语句块的执行，用于中断当前for循环或跳出switch语句。</p>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220128210737650.png\" alt=\"image-20220128210737650\"></p>\n<ul>\n<li>break 语句出现在多层嵌套的语句块中时，可以通过<strong>标签</strong>指明要终止的是哪一层的语句块。</li>\n<li>break默认会跳出最近的for循环</li>\n<li>break 后面可以指定标签，跳出标签对应的for循环</li>\n</ul>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220128211928107.png\" alt=\"image-20220128211928107\"></p>\n<h3 id=\"continue语句\"><a href=\"#continue语句\" class=\"headerlink\" title=\"continue语句\"></a>continue语句</h3><ul>\n<li>continue语句用于结束本次循环，继续执行下一次循环。</li>\n<li>continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环，这个和break标签的使用规则一样。</li>\n</ul>\n<p><img src=\"/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.assets/image-20220128214307198.png\" alt=\"image-20220128214307198\"></p>\n<h3 id=\"goto语句\"><a href=\"#goto语句\" class=\"headerlink\" title=\"goto语句\"></a>goto语句</h3>","feature":true,"text":"Go语言开发 程序基本结构一： go文件的后缀是.go package main : 表示该hello.go文件所的包是main，在go中，每个文件都必须属于一个包。 import “fmt” : 表示引入一个包，包名 fmt，引入该包后，就可以使用fmt包的函数。 func m...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"go","slug":"go","count":1,"path":"api/tags/go.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">Go语言开发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">程序基本结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\">执行流程分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">Go语言开发注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Go%E8%AF%AD%E8%A8%80%E5%B8%B8%E7%94%A8%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">Go语言常用转义字符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Dos%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">Dos命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">变量的数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E5%9E%8B\"><span class=\"toc-text\">浮点型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">字符类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">布尔类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">字符串类型</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">基本数据类型的转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8CString%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">基本数据类型和String的转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#String%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">String类型转基本数据类型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88\"><span class=\"toc-text\">指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">值类型和引用类型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AF%86%E7%AC%A6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">标识符命名规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%84%E5%AE%9A%E4%B9%89%E6%A0%87%E8%AF%86%E7%AC%A6\"><span class=\"toc-text\">预定义标识符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BD%BF%E7%94%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">运算符使用的注意事项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">关系运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">逻辑运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">赋值运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">运算符的优先级</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E5%88%AB%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">特别说明</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">键盘输入语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E5%88%B6\"><span class=\"toc-text\">进制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">程序流程控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#do-while%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">do-while实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%B1%82%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">多层循环控制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#break-%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">break 语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#continue%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">continue语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#goto%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">goto语句</span></a></li></ol></li></ol></li></ol>","author":{"name":"Xoc001","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"测试标题","uid":"053d7ffb1d4e381b97c2451a59b88291","slug":"测试","date":"2022-02-11T03:57:11.000Z","updated":"2022-02-11T03:57:28.785Z","comments":true,"path":"api/articles/测试.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"测试","slug":"测试","count":2,"path":"api/tags/测试.json"}],"author":{"name":"Xoc001","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}