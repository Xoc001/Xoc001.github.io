{"title":"环境配置","uid":"b2824fba14847a426bc9d7e1d1d4d928","slug":"环境搭建","date":"2022-02-27T14:16:57.243Z","updated":"2022-02-27T14:16:52.207Z","comments":true,"path":"api/articles/环境搭建.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/Xoc001/photo/pexels-photo-546819.jpeg","content":"<h2 id=\"Node-js安装\"><a href=\"#Node-js安装\" class=\"headerlink\" title=\"Node.js安装\"></a>Node.js安装</h2><p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210222705763.png\" alt=\"image-20220210222705763\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210222725913.png\" alt=\"image-20220210222725913\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210222741792.png\" alt=\"image-20220210222741792\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210222758979.png\" alt=\"image-20220210222758979\"></p>\n<p>创建两个文件夹目录</p>\n<p>说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\\Users\\用户名\\AppData\\Roaming\\npm】路径中，占C盘空间。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">例如：我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【D:\\Nodejs】下创建两个文件夹【node_global】及【node_cache】如下图：</code></pre>\n\n\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210224140163.png\" alt=\"image-20220210224140163\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210225011523.png\" alt=\"image-20220210225011523\"></p>\n<h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210225740126.png\" alt=\"image-20220210225740126\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210225817997.png\" alt=\"image-20220210225817997\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210230039528.png\" alt=\"image-20220210230039528\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210230126394.png\" alt=\"image-20220210230126394\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210230220957.png\" alt=\"image-20220210230220957\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210230231218.png\" alt=\"image-20220210230231218\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  这个界面是调整您的PATH环境。\n\n  第一种配置是“仅从Git Bash使用Git”。这是最安全的选择，因为您的PATH根本不会被修改。您只能使用 Git Bash 的 Git 命令行工具。但是这将不能通过第三方软件使用。\n\n  第二种配置是“从命令行以及第三方软件进行Git”。该选项被认为是安全的，因为它仅向PATH添加了一些最小的Git包装器，以避免使用可选的Unix工具造成环境混乱。\n您将能够从Git Bash，命令提示符和Windows PowerShell以及在PATH中寻找Git的任何第三方软件中使用Git。这也是推荐的选项。\n\n  第三种配置是“从命令提示符使用Git和可选的Unix工具”。警告：这将覆盖Windows工具，如 “ find 和 sort ”。只有在了解其含义后才使用此选项。\n\n  我选择推荐的选项第二种配置，点击“Next”按钮继续到下图的界面</code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210230247903.png\" alt=\"image-20220210230247903\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210230339391.png\" alt=\"image-20220210230339391\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  这个界面是选择HTTPS后端传输。\n\n  第一个选项是“使用 OpenSSL 库”。服务器证书将使用ca-bundle.crt文件进行验证。这也是我们常用的选项。\n\n  第二个选项是“使用本地 Windows 安全通道库”。服务器证书将使用Windows证书存储验证。此选项还允许您使用公司的内部根CA证书，例如通过Active Directory Domain Services 。\n\n  我使用默认选项第一项，点击“Next”按钮继续到下图的界面：</code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210230352608.png\" alt=\"image-20220210230352608\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  这个界面是配置行尾符号转换。\n\n  第一个选项是“签出Windows风格，提交Unix风格的行尾”。签出文本文件时，Git会将LF转换为CRLF。提交文本文件时，CRLF将转换为LF。对于跨平台项目，这是Windows上的推荐设置（“ core.autocrlf”设置为“ true”）\n\n  第二个选项是“按原样签出，提交Unix样式的行尾”。签出文本文件时，Git不会执行任何转换。 提交文本文件时，CRLF将转换为LF。对于跨平台项目，这是Unix上的建议设置（“ core.autocrlf”设置为“ input”）\n\n  第三种选项是“按原样签出，按原样提交”。当签出或提交文本文件时，Git不会执行任何转换。不建议跨平台项目选择此选项（“ core.autocrlf”设置为“ false”）\n\n  我选择第一种选项，点击“Next”按钮继续到下图的界面：</code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210230446366.png\" alt=\"image-20220210230446366\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  这个界面是配置终端模拟器以与Git Bash一起使用。\n\n  第一个选项是“使用MinTTY（MSYS2的默认终端）”。Git Bash将使用MinTTY作为终端模拟器，该模拟器具有可调整大小的窗口，非矩形选择和Unicode字体。Windows控制台程序（例如交互式Python）必须通过“ winpty”启动才能在MinTTY中运行。\n\n  第二个选项是“使用Windows的默认控制台窗口”。Git将使用Windows的默认控制台窗口（“cmd.exe”），该窗口可以与Win32控制台程序（如交互式Python或node.js）一起使用，但默认的回滚非常有限，需要配置为使用unicode 字体以正确显示非ASCII字符，并且在Windows 10之前，其窗口不能自由调整大小，并且只允许矩形文本选择。\n\n  我选择默认的第一种选项，点击“Next”按钮继续到下图的界面：</code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210230511894.png\" alt=\"image-20220210230511894\"></p>\n<p><img src=\"/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.assets/image-20220210230518507.png\" alt=\"image-20220210230518507\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210230534240.png\" alt=\"image-20220210230534240\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  这个界面是配置配置额外的选项。\n\n  第一个选项是“启用文件系统缓存”。文件系统数据将被批量读取并缓存在内存中用于某些操作（“core.fscache”设置为“true”）。 这提供了显著的性能提升。\n\n  第二个选项是“启用符号链接”。启用符号链接（需要SeCreateSymbolicLink权限）。请注意，现有存储库不受此设置的影响。\n\n  我勾选默认的第一选项，点击“Next”按钮继续到下图的界面：</code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210230615132.png\" alt=\"image-20220210230615132\"></p>\n<p>安装完成后在 开始页面有三个图标</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210230754605.png\" alt=\"image-20220210230754605\"></p>\n<ul>\n<li>Git CMD 是通过CMD 使用git (不推荐使用)</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210230830467.png\" alt=\"image-20220210230830467\"></p>\n<ul>\n<li>Git GUI 是Git的图形化操作工具。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210230901914.png\" alt=\"image-20220210230901914\"></p>\n<ul>\n<li>Git Bash Git配套的一个控制台。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210230935469.png\" alt=\"image-20220210230935469\"></p>\n<p>Windows安装好后以管理员身份运行cmd输入<code>git --version</code>可以查看Git 版本</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220210231117261.png\" alt=\"image-20220210231117261\"></p>\n<h2 id=\"Hexo框架安装\"><a href=\"#Hexo框架安装\" class=\"headerlink\" title=\"Hexo框架安装\"></a>Hexo框架安装</h2><p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220211001421308.png\" alt=\"image-20220211001421308\"></p>\n<h3 id=\"PicGo-图床设置\"><a href=\"#PicGo-图床设置\" class=\"headerlink\" title=\"PicGo 图床设置\"></a>PicGo 图床设置</h3><p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220211193714176.png\" alt=\"image-20220211193714176\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220211193732978.png\" alt=\"image-20220211193732978\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220227221027230.png\" alt=\"image-20220227221025401\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Xoc001/photo/image-20220211194534437.png\" alt=\"image-20220211194534437\"></p>\n","text":"Node.js安装 创建两个文件夹目录 说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"环境","slug":"环境","count":1,"path":"api/tags/环境.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Node-js%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">Node.js安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85Git\"><span class=\"toc-text\">安装Git</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Hexo%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">Hexo框架安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PicGo-%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">PicGo 图床设置</span></a></li></ol></li></ol>","author":{"name":"Xoc001","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Xoc001/photo/photo.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Spring MVC","uid":"84c6604e94d88eec227a0b74aad54f6e","slug":"SpringMVC","date":"2022-02-27T14:22:48.729Z","updated":"2022-02-27T14:30:34.229Z","comments":true,"path":"api/articles/SpringMVC.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/Xoc001/photo/202202272154.jpg","text":"SpringMVC2021年8月15日 ssm:mybatis+Spring + SpringMVC MVC三层架构 1、MVC1.1、什么是MVC MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。 是将业务逻辑、数据、显示...","link":"","photos":[],"count_time":{"symbolsCount":"74k","symbolsTime":"1:07"},"categories":[],"tags":[{"name":"Spring框架","slug":"Spring框架","count":3,"path":"api/tags/Spring框架.json"}],"author":{"name":"Xoc001","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Xoc001/photo/photo.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Spring","uid":"946249c65165e1a3d66f50e0cb6e89e7","slug":"Spring","date":"2022-02-27T13:43:09.039Z","updated":"2022-02-27T14:25:36.557Z","comments":true,"path":"api/articles/Spring.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/Xoc001/photo/202202272154.jpg","text":"Spring21.8.7 1、Spring1.1、简介Spring是一个开源框架，它由Rod Johnson创建。它是为了解决企业应用开发的复杂性而创建的。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。Spring是一个轻量级的控制反转(IoC)和面向...","link":"","photos":[],"count_time":{"symbolsCount":"43k","symbolsTime":"39 mins."},"categories":[],"tags":[{"name":"Spring框架","slug":"Spring框架","count":3,"path":"api/tags/Spring框架.json"}],"author":{"name":"Xoc001","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/Xoc001/photo/photo.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}