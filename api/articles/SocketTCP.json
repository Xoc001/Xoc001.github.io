{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"SocketTCP","date":"2022-02-10T17:38:23.855Z","updated":"2022-01-01T10:17:03.195Z","comments":true,"path":"api/articles/SocketTCP.json","keywords":null,"cover":[],"content":"<h1 id=\"Socket-x2F-TCP\"><a href=\"#Socket-x2F-TCP\" class=\"headerlink\" title=\"Socket&#x2F;TCP\"></a>Socket&#x2F;TCP</h1><h2 id=\"数据发送与接收的规则\"><a href=\"#数据发送与接收的规则\" class=\"headerlink\" title=\"数据发送与接收的规则\"></a>数据发送与接收的规则</h2><p><img src=\"/SocketTCP.assets/image-20211225231717628.png\" alt=\"image-20211225231717628\"></p>\n<h2 id=\"数据的完整性\"><a href=\"#数据的完整性\" class=\"headerlink\" title=\"数据的完整性\"></a>数据的完整性</h2><p>发送方</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void sendMsg(String msg) throws Exception&#123;\n    byte[] msgBytes &#x3D; msg.getBytes(charset);\n\n    &#x2F;&#x2F;发送内容长度\n    ByteBuffer buffer &#x3D; ByteBuffer.allocate(4);\n    buffer.putInt(msgBytes.length);\n    outputStream.write(buffer.array(),0,4);\n\n    &#x2F;&#x2F;发送内容\n    outputStream.write(msgBytes);\n&#125;</code></pre>\n\n\n\n<p>接收方</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">&#x2F;&#x2F;接收相关信息\npublic String receiveMsg() throws Exception &#123;\n\t\n\tByteBuffer buffer &#x3D; ByteBuffer.allocate(4);\n\treadFully(buffer.array(),0,4); \t\t&#x2F;&#x2F;长度信息\n\tint n &#x3D; buffer.getInt();\n\n\treadFully(inputBuffer,0, n);\t&#x2F;&#x2F;内容信息。\n\tString msg &#x3D; new String(inputBuffer,0,n,&quot;UTF-8&quot;);\n\treturn msg;\n\t\n&#125;\n&#x2F;&#x2F;完全接收N个字节：此方法会一直等待，直到收满N个字节才返回\npublic int readFully(byte[]array,int off,int size) throws Exception &#123;\n\tint count &#x3D; 0;\t\t&#x2F;&#x2F;已读字节数\n\twhile(count &lt; size) &#123;\n\t\tint remain  &#x3D; size -count;\n\t\tint numBytes &#x3D; inputStream.read(array,off+count,remain);\n\t\tif(numBytes &lt; 0) &#123;\n\t\t\treturn -1;\n\t\t&#125;\n\t\tcount +&#x3D; numBytes;\n\t&#125;\n\treturn size;\n&#125;</code></pre>\n\n\n\n<h2 id=\"阻塞与超时\"><a href=\"#阻塞与超时\" class=\"headerlink\" title=\"阻塞与超时\"></a>阻塞与超时</h2><p><img src=\"/SocketTCP.assets/image-20211227211344335.png\" alt=\"image-20211227211344335\"></p>\n<p><img src=\"/SocketTCP.assets/image-20211227211917956.png\" alt=\"image-20211227211917956\"></p>\n<h2 id=\"文本的存储\"><a href=\"#文本的存储\" class=\"headerlink\" title=\"文本的存储\"></a>文本的存储</h2><p>文件里存储的是字节数据。因此，无论任何数据，都需要先编码为byte[],然后才能写入文件。</p>\n<p>对于String来说，也要编码：String-&gt;byte[]</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String text &#x3D; &quot;百度一下你就知道&quot;;\nbyte[]data &#x3D; text.getBytes(&quot;GBK&quot;);</code></pre>\n\n\n\n<h2 id=\"文件的传输\"><a href=\"#文件的传输\" class=\"headerlink\" title=\"文件的传输\"></a>文件的传输</h2><h3 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package my0903;\n\nimport af.net.AfNetConnection;\nimport af.net.AfNetPacket;\nimport org.json.JSONObject;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class FileUploadClient &#123;\n\n    AfNetConnection connection;\n    File file;\n    InputStream inputStream;\n\n    public FileUploadClient(AfNetConnection connection,File file)\n    &#123;\n        this.connection &#x3D; connection;\n        this.file &#x3D; file;\n    &#125;\n\n    public void work() throws Exception\n    &#123;\n        inputStream &#x3D; new FileInputStream(file);\n        &#x2F;&#x2F; 第一步\n        doStartTransfer();\n\n        while(true)\n        &#123;\n            byte [] buffer &#x3D; new byte[1024*8];\n            int n &#x3D; inputStream.read(buffer);\n            if(n&lt;0) break;\n\n            System.out.println(&quot;&gt;&gt; FILE_DATA  &quot; + n);\n            connection.send(MsgDefine.FILE_DATA,buffer,n);\n        &#125;\n\n        &#x2F;&#x2F;第三步\n        doEndTransfer();\n        System.out.println(&quot;上传完毕 &quot;+ file);\n    &#125;\n\n    public void close()\n    &#123;\n        try &#123;\n            inputStream.close();\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F;发送文件信息\n    private void doStartTransfer() throws Exception &#123;\n        JSONObject jreq &#x3D; new JSONObject();\n        jreq.put(&quot;fileName&quot;,file.getName());\n        jreq.put(&quot;fileLength&quot;,file.length());\n\n        connection.send(MsgDefine.FILE_UPLOAD,jreq.toString(2));\n\n        AfNetPacket packet &#x3D; connection.recv();\n        getReplyData(packet);\n    &#125;\n\n    &#x2F;&#x2F;文件结束\n    private void doEndTransfer() throws Exception\n    &#123;\n        System.out.println(&quot; &gt;&gt; FILE END&quot;);\n        &#x2F;&#x2F;\n        connection.send(MsgDefine.FILE_END);\n        &#x2F;&#x2F;接收应答\n        AfNetPacket packet &#x3D; connection.recv();\n        getReplyData(packet);\n    &#125;\n\n\n\n    private Object getReplyData(AfNetPacket packet) throws Exception\n    &#123;\n        JSONObject jresp &#x3D; new JSONObject(packet.toString(&quot;UTF-8&quot;));\n        int status &#x3D; jresp.getInt(&quot;status&quot;);\n        if(status!&#x3D;0)\n        &#123;\n            String reason &#x3D; jresp.optString(&quot;reason&quot;,&quot;未知错误&quot;);\n            throw new Exception(reason);\n        &#125;else&#123;\n            Object data &#x3D; jresp.opt(&quot;data&quot;);\n            return data;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<h3 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h3><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package my0903;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport af.net.AfNetConnection;\nimport af.net.AfNetPacket;\n\npublic class FileUploadHandler\n&#123;\n\tAfNetConnection connection;\n\tAfNetPacket packet;\n\t\n\tFile tmpDir;\t\t&#x2F;&#x2F;临时目录\n\tFile tmpFile;\n\tOutputStream outputStream;\n\t\n\tpublic FileUploadHandler(AfNetConnection conn,AfNetPacket packet)\n\t&#123;\n\t\tthis.connection  &#x3D; conn;\n\t\tthis.packet &#x3D; packet;\n\t\t\n\t\ttmpDir &#x3D; new File(&quot;D:&#x2F;test&#x2F;&quot;);\n\t\ttmpDir.mkdirs();\n\t&#125;\n\t\n\tpublic void work() throws Exception\n\t&#123;\n\t\tJSONObject jreq &#x3D; new JSONObject(packet.toString(&quot;UTF-8&quot;));\n\t\tString fileName &#x3D; jreq.getString(&quot;fileName&quot;);\n\t\t\n\t\ttmpFile &#x3D; new File(tmpDir,fileName);\n\t\toutputStream &#x3D; new FileOutputStream(tmpFile);\n\n\t\t&#x2F;&#x2F;接收传送\n\t\tsendReply(0, &quot;OK&quot;);\n\t\tSystem.out.println(&quot;保存临时文件 &quot; + tmpFile);\n\t\t\n\t\twhile(true)\n\t\t&#123;\n\t\t\tAfNetPacket packet &#x3D; connection.recv();\n\t\t\tif(packet.action &#x3D;&#x3D; MsgDefine.FILE_DATA)\n\t\t\t&#123;\n\t\t\t\tSystem.out.println(&quot;FILE_DATA&quot; + packet.length);\n\t\t\t\toutputStream.write(packet.content, 0, packet.length);\n\t\t\t&#125;else if(packet.action &#x3D;&#x3D; MsgDefine.FILE_END) &#123;\n\t\t\t\tSystem.out.println(&quot;FILE_END!&quot;);\n\t\t\t\t&#x2F;&#x2F;关闭文件\n\t\t\t\toutputStream.close();\n\t\t\t\tbreak;\n\t\t\t&#125;\n\t\t&#125;\n\t\t\n\t\t&#x2F;&#x2F;第三阶段\n\t\tsendReply(0, &quot;OK&quot;);\n\t&#125;\n\t\n\tpublic void close() \n\t&#123;\n\t\ttry\n\t\t&#123;\n\t\t\toutputStream.close();\n\t\t&#125; catch (IOException e)\n\t\t&#123;\n\t\t\t&#x2F;&#x2F; TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t&#125;\n\t&#125;\n\t\n\t\n\tprivate void sendReply(int status,String reason) throws Exception\n\t&#123;\n\t\tJSONObject jresp &#x3D; new JSONObject();\n\t\tjresp.put(&quot;status&quot;, status);\n\t\tjresp.put(&quot;reason&quot;, reason);\n\t\t\n\t\tconnection.send(MsgDefine.FILE_UPLOAD, jresp.toString(2));\n\t&#125;\n&#125;\n</code></pre>\n\n\n\n\n\n<h2 id=\"网络抓包\"><a href=\"#网络抓包\" class=\"headerlink\" title=\"网络抓包\"></a>网络抓包</h2><p><img src=\"/SocketTCP.assets/image-20211231205903696.png\" alt=\"image-20211231205903696\"></p>\n<h2 id=\"并发访问与多线程\"><a href=\"#并发访问与多线程\" class=\"headerlink\" title=\"并发访问与多线程\"></a>并发访问与多线程</h2><h3 id=\"线程与句柄\"><a href=\"#线程与句柄\" class=\"headerlink\" title=\"线程与句柄\"></a>线程与句柄</h3><p><img src=\"/SocketTCP.assets/image-20220101175506960.png\" alt=\"image-20220101175506960\"></p>\n<p>查看进程PID</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">RuntimeMXBean bean &#x3D; ManagementFactory.getRuntimeMXBean();\nString name &#x3D; bean.getName();\nSystem.out.println(name);</code></pre>\n\n","text":"Socket&#x2F;TCP数据发送与接收的规则 数据的完整性发送方 public void sendMsg(String msg) throws Exception&#123; byte[] msgBytes &#x3D; msg.getBytes(charset); &#x...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Socket-x2F-TCP\"><span class=\"toc-text\">Socket&#x2F;TCP</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6%E7%9A%84%E8%A7%84%E5%88%99\"><span class=\"toc-text\">数据发送与接收的规则</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AE%8C%E6%95%B4%E6%80%A7\"><span class=\"toc-text\">数据的完整性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%98%BB%E5%A1%9E%E4%B8%8E%E8%B6%85%E6%97%B6\"><span class=\"toc-text\">阻塞与超时</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E6%9C%AC%E7%9A%84%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">文本的存储</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%9A%84%E4%BC%A0%E8%BE%93\"><span class=\"toc-text\">文件的传输</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Client\"><span class=\"toc-text\">Client</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Server\"><span class=\"toc-text\">Server</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85\"><span class=\"toc-text\">网络抓包</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">并发访问与多线程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%8F%A5%E6%9F%84\"><span class=\"toc-text\">线程与句柄</span></a></li></ol></li></ol></li></ol>","author":{"name":"Xoc001","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Spring","date":"2022-02-10T17:38:23.861Z","updated":"2022-02-09T16:01:28.922Z","comments":true,"path":"api/articles/Spring.json","keywords":null,"cover":[],"text":"Spring21.8.7 1、Spring1.1、简介&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-webmvc --&gt; &lt;...","link":"","photos":[],"count_time":{"symbolsCount":"32k","symbolsTime":"29 mins."},"categories":[],"tags":[],"author":{"name":"Xoc001","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"SMBMS","date":"2022-02-10T17:38:23.832Z","updated":"2021-07-25T14:43:02.005Z","comments":true,"path":"api/articles/SMBMS.json","keywords":null,"cover":[],"text":"SMBMS1、项目搭建1.搭建一个Maven web 项目 2.配置Tomcat 3.测试项目 4.导入项目中需要的jar包 5.编写实体类 ​ ORM映射：表-类映射 6.编写基础公共类 ​ 1.数据库配置文件 driver&#x3D;com.mysql.jdbc.Driver...","link":"","photos":[],"count_time":{"symbolsCount":"41k","symbolsTime":"37 mins."},"categories":[],"tags":[],"author":{"name":"Xoc001","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}